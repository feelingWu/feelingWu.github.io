<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>软件开发手册</title>
      <link href="/2021/02/24/software-development-manual/"/>
      <url>/2021/02/24/software-development-manual/</url>
      
        <content type="html"><![CDATA[<blockquote><p>无规矩不成方圆<br><a id="more"></a></p></blockquote><h2 id="GIT系列"><a href="#GIT系列" class="headerlink" title="GIT系列"></a>GIT系列</h2><h3 id="开发分支规范"><a href="#开发分支规范" class="headerlink" title="开发分支规范"></a>开发分支规范</h3><table><thead><tr><th>分支</th><th>命名</th><th>说明</th></tr></thead><tbody><tr><td>主分支</td><td>master</td><td>所有提供给用户使用的正式版本，都在这个主分支上发布</td></tr><tr><td>开发分支</td><td>dev</td><td>永远是功能最新最全的分支</td></tr><tr><td>功能分支</td><td>feature-*</td><td>新功能分支，某个功能点正在开发阶段</td></tr><tr><td>发布版本</td><td>release-*</td><td>发布定期要上线的功能</td></tr><tr><td>修复分支</td><td>bug-*</td><td>修复线上代码的 bug</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手册 </tag>
            
            <tag> 软件开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记frame/iframe内嵌网页不显示问题</title>
      <link href="/2021/02/23/x-frame-options-sameorigin/"/>
      <url>/2021/02/23/x-frame-options-sameorigin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前端同事内嵌网页,发现个别网页无法显示并提示,”in a frame because it set ‘X-Frame-Options’ to ‘sameorigin’”的报错(如：youku视频)<br><a id="more"></a></p></blockquote><h1 id="一、预备知识点"><a href="#一、预备知识点" class="headerlink" title="一、预备知识点"></a>一、预备知识点</h1><h2 id="1-同源策略"><a href="#1-同源策略" class="headerlink" title="1.同源策略"></a>1.同源策略</h2><h3 id="1-1-什么是同源"><a href="#1-1-什么是同源" class="headerlink" title="1.1 什么是同源"></a>1.1 什么是同源</h3><p>URL由协议、域名、端口和路径组成，如果两个URL的协议、域名和端口相同，则表示他们同源。相反，只要协议，域名，端口有任何一个的不同，就被当作是跨域。<br><img src="/2021/02/23/x-frame-options-sameorigin/同源演示.png" alt=""></p><h3 id="1-2-同源策略-Same-Origin-Policy-SOP"><a href="#1-2-同源策略-Same-Origin-Policy-SOP" class="headerlink" title="1.2 同源策略(Same-Origin-Policy(SOP))"></a>1.2 同源策略(Same-Origin-Policy(SOP))</h3><p>浏览器默认采用同源策略，禁止页面加载或执行与自身来源不同的域的任何脚本。</p><pre><code>场景：一个恶意网站的页面通过iframe嵌入了银行的登录页面（二者不同源），如果没有同源限制，恶意网页上的javascript脚本就可以在用户登录银行的时候获取用户名和密码。浏览器中有哪些不受同源限制呢？&lt;script&gt;、&lt;img&gt;、&lt;iframe&gt;、&lt;link&gt;这些包含 src 属性的标签可以加载跨域资源。但浏览器限制了JavaScript的权限使其不能读、写加载的内容。</code></pre><h2 id="2-跨域"><a href="#2-跨域" class="headerlink" title="2.跨域"></a>2.跨域</h2><p>跨域是指从一个域的网页去请求另一个域的资源。</p><h2 id="3-点击劫持"><a href="#3-点击劫持" class="headerlink" title="3.点击劫持"></a>3.点击劫持</h2><p>这种攻击在恶意站点诱导用户点击另一个站点的被覆盖元素时出现，另一个站点已经加载到了隐藏的frame或iframe中。</p><pre><code>点击劫持的示例假设一个在线商店拥有一个页面，已登录的用户可以点击“购买”按钮来购买一个商品。用户为了方便，可以选择一直保持商店的登录状态。一个攻击者的站点可能在他们自己的页面上会创建一个“收藏”按钮，并且在一个透明的iframe中加载商店的页面，把“购买”的按钮隐藏起来覆盖在“收藏”上。如果用户访问了攻击者的站点，点击“收藏”按钮会触发对“购买”按钮的无意识的点击，不知不觉中便购买了商品。</code></pre><h1 id="二、X-Frame-Options"><a href="#二、X-Frame-Options" class="headerlink" title="二、X-Frame-Options"></a>二、X-Frame-Options</h1><h2 id="1-什么是X-Frame-Options"><a href="#1-什么是X-Frame-Options" class="headerlink" title="1.什么是X-Frame-Options"></a>1.什么是X-Frame-Options</h2><p>X-Frame-Options HTTP 响应头是用来给浏览器 指示允许一个页面 可否在&lt;frame&gt;,&lt;iframe&gt;, &lt;embed&gt; 或者 &lt;object&gt; 中展现的标记。站点可以通过确保网站没有被嵌入到别人的站点里面，从而避免 clickjacking 攻击。</p><h2 id="2-X-Frame-Options有什么用"><a href="#2-X-Frame-Options有什么用" class="headerlink" title="2.X-Frame-Options有什么用"></a>2.X-Frame-Options有什么用</h2><p>用于点击劫持的防御：现代浏览器遵循X-Frame-Options协议头(RFC 7034规范),根据协议头不同配置,从而决定一个资源是否允许加载到frame或者iframe中。</p><h2 id="3-如何配置"><a href="#3-如何配置" class="headerlink" title="3.如何配置"></a>3.如何配置</h2><blockquote><p>Note: 设置 meta 标签是无效的！例如 <meta http-equiv="X-Frame-Options" content="deny"> 没有任何效果。<br>只有当像下面示例那样设置 HTTP 头 X-Frame-Options 才会生效。</p></blockquote><h3 id="3-1-X-Frame-Options配置参数"><a href="#3-1-X-Frame-Options配置参数" class="headerlink" title="3.1 X-Frame-Options配置参数"></a>3.1 X-Frame-Options配置参数</h3><table><thead><tr><th>参数</th><th>含义</th><th>命令</th></tr></thead><tbody><tr><td>deny</td><td>表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。</td><td>add_header X-Frame-Options deny;</td></tr><tr><td>sameorigin</td><td>表示该页面可以在相同域名页面的 frame 中展示。</td><td>add_header X-Frame-Options sameorigin;</td></tr><tr><td>allow-from</td><td>表示该页面可以在指定来源的 frame 中展示。</td><td>add_header X-Frame-Options allow-from <a href="https://example.com/" target="_blank" rel="noopener">https://example.com/</a>;</td></tr><tr><td>allowall</td><td>允许所有站点内嵌展示。</td><td>add_header X-Frame-Options allowall;</td></tr></tbody></table><h3 id="3-2-配置-Apache"><a href="#3-2-配置-Apache" class="headerlink" title="3.2 配置 Apache"></a>3.2 配置 Apache</h3><p>配置 Apache 在所有页面上发送 X-Frame-Options 响应头，需要把下面这行添加到 ‘site’ 的配置中:</p><pre><code>Header always set X-Frame-Options "sameorigin"</code></pre><p>要将 Apache 的配置 X-Frame-Options 设置成 deny , 按如下配置去设置你的站点：</p><pre><code>Header set X-Frame-Options "deny"</code></pre><p>要将 Apache 的配置 X-Frame-Options 设置成 allow-from，在配置里添加：</p><pre><code>Header set X-Frame-Options "allow-from https://example.com/"</code></pre><h3 id="3-3-配置-nginx"><a href="#3-3-配置-nginx" class="headerlink" title="3.3 配置 nginx"></a>3.3 配置 nginx</h3><p>配置 nginx 发送 X-Frame-Options 响应头，把下面这行添加到 ‘http’, ‘server’ 或者 ‘location’ 的配置中:</p><p>例如：<br>1.修改配置</p><pre><code>add_header X-Frame-Options allowall always;</code></pre><p><img src="/2021/02/23/x-frame-options-sameorigin/nginx设置xfo.png" alt=""><br>2.nginx指定目下生效配置</p><pre><code>cd ../usr/sbin/./nginx -s reload </code></pre><p>3.检测是否配置成功</p><pre><code>curl -I http://192.168.2.2:5091</code></pre><p><img src="/2021/02/23/x-frame-options-sameorigin/检测xfo配置.png" alt=""></p><h3 id="3-4-配置-IIS"><a href="#3-4-配置-IIS" class="headerlink" title="3.4 配置 IIS"></a>3.4 配置 IIS</h3><p>配置 IIS 发送 X-Frame-Options 响应头，添加下面的配置到 Web.config 文件中：</p><pre><code>&lt;system.webServer&gt;  ...  &lt;httpProtocol&gt;    &lt;customHeaders&gt;      &lt;add name="X-Frame-Options" value="sameorigin" /&gt;    &lt;/customHeaders&gt;  &lt;/httpProtocol&gt;  ...&lt;/system.webServer&gt;</code></pre><h3 id="3-5-配置-HAProxy"><a href="#3-5-配置-HAProxy" class="headerlink" title="3.5 配置 HAProxy"></a>3.5 配置 HAProxy</h3><p>配置 HAProxy 发送 X-Frame-Options 头，添加这些到你的前端、监听 listen，或者后端的配置里面：</p><pre><code>rspadd X-Frame-Options:\ sameorigin</code></pre><p>或者，在更加新的版本中：</p><pre><code>http-response set-header X-Frame-Options sameorigin</code></pre><h3 id="3-6-配置-Express"><a href="#3-6-配置-Express" class="headerlink" title="3.6 配置 Express"></a>3.6 配置 Express</h3><p>要配置 Express 可以发送 X-Frame-Options header，你可以用借助了 frameguard 来设置头部的 helmet。在你的服务器配置里面添加：</p><pre><code>const helmet = require('helmet');const app = express();app.use(helmet.frameguard({ action: "sameorigin" }));</code></pre><p>或者，你也可以直接用 frameguard：</p><pre><code>const frameguard = require('frameguard')app.use(frameguard({ action: 'sameorigin' }))</code></pre><h2 id="4-测评"><a href="#4-测评" class="headerlink" title="4.测评"></a>4.测评</h2><p><img src="/2021/02/23/x-frame-options-sameorigin/xfo浏览器兼容性.png" alt=""></p><h1 id="三、最终结果"><a href="#三、最终结果" class="headerlink" title="三、最终结果"></a>三、最终结果</h1><p>1.猜测优酷开启了同源策略（sameorigin），所以我们的iframe无法内嵌其网页<br>2.解决方案，亲测可以<br><img src="/2021/02/23/x-frame-options-sameorigin/优酷嵌套解决方案.png" alt=""></p><h1 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-Options?redirectlocale=en-US&amp;redirectslug=The_X-FRAME-OPTIONS_response_header" target="_blank" rel="noopener">传送门1</a><br><a href="https://blog.csdn.net/qq_37193537/article/details/87086279" target="_blank" rel="noopener">传送门2</a><br><a href="http://cache.baiducontent.com/c?m=3yKvnBrULyInsKWE7o8-f-6T7oLBHdh_3ik8_2xWhZPlUb24PUsDN9GFVDND2_mXqgz5sID004p1CYGUGH4-PAFe5YHy-yTnyGyALm7JjXmBfZs2H32ZGXZ2r0JXwIRezabWPAM2JKQvKGpYGCUhbK&amp;p=877ec54ad1c352fc57eff86d4f53&amp;newp=c46fd315d9c441f50be29627610792695803ed6338d1db01298ffe0cc4241a1a1a3aecbf2c231305d6c4786306aa4f5bebf53571360634f1f689df08d2ecce7e75&amp;s=cfcd208495d565ef&amp;user=baidu&amp;fm=sc&amp;query=youku+sameorigin&amp;qid=e61d7d2500073cd4&amp;p1=2" target="_blank" rel="noopener">传送门3</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTTP </tag>
            
            <tag> X-Frame-Options </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三阶魔方教程</title>
      <link href="/2021/02/21/3ordercube/"/>
      <url>/2021/02/21/3ordercube/</url>
      
        <content type="html"><![CDATA[<blockquote><p>三阶魔方是玩任意阶魔方的基础<br><a id="more"></a></p></blockquote><h2 id="公式概览："><a href="#公式概览：" class="headerlink" title="公式概览："></a>公式概览：</h2><pre><code>公式一(小花、白十字、白面底)：上左下右公式二(中间层)：上右下左公式三(黄十字)：正面顺时针转90度，公式一（上左下右），逆时针转90度回去公式四(小鱼、黄面)：下右上右，下右右上公式五(顶层角块)：上右上，底层转180，下左上，底层转180度，右边转180度公式六(顶层棱块)：下左下右，下右下左，上左，右180度</code></pre><h2 id="认识魔方"><a href="#认识魔方" class="headerlink" title="认识魔方"></a>认识魔方</h2><p>魔方面组成：中心块（6）、棱块（12）、角块（8）<br>国际标准魔方配色： 白底黄顶,左到右红蓝橙绿</p><p>使用方法: 层先法（即一层一层还原）<br>本次以白底黄顶作为作为坐标系</p><h2 id="拼底层十字（小花-白十字）"><a href="#拼底层十字（小花-白十字）" class="headerlink" title="拼底层十字（小花/白十字）"></a>拼底层十字（小花/白十字）</h2><ol><li>顶层黄心白十字(小花)</li><li>每个白色棱块另一面与每一面的中心块颜色保持一致,并转到底层(白面)去</li><li>底层纯白十字，并且白面棱块的颜色和每个面的中心色保持一致</li></ol><h2 id="还原第一层"><a href="#还原第一层" class="headerlink" title="还原第一层"></a>还原第一层</h2><pre><code>公式一（右手）：上左下右</code></pre><p>还原四个底部角块：<br>1.找到顶层有白色面的角块,转到另外两个颜色面中间（另外两个颜色均不是黄色）<br>2.重复做公式一<br>3.直到白色面朝下,另外两个面的颜色和中心块对上</p><p>异常情况：<br>1.遇到顶层没有白色角块，白色角块面一定错位在底部，做公式一，将白色转上去，然后继续按步骤还原</p><h2 id="还原第二层"><a href="#还原第二层" class="headerlink" title="还原第二层"></a>还原第二层</h2><pre><code>公式二（左手）：上右下左</code></pre><p>还原中间层：<br>1.找到顶层棱块（没有黄色面的棱块），将其中一色(正面)对准中心块,另一面色（顶面色）一定在魔方的左面或者右面<br>2.顶面色远离相同色的面，顶面层转动一面<br>    2.1 顶面层向右转，做左手公式二一次,再将整体向右转一面，做右手公式一一次<br>    2.2 定面层向左转，做右手公式一一次,再将整体向左转一面，做左手公式二一次</p><p>异常情况：<br>顶面棱块出现都有黄色面,但是第二层没有还原的情况，将中间层没有还原的棱块放在右手边，右手做一次公式一，向左转一面，左手<br>做一次公式二</p><h2 id="拼顶面十字（黄十字）"><a href="#拼顶面十字（黄十字）" class="headerlink" title="拼顶面十字（黄十字）"></a>拼顶面十字（黄十字）</h2><pre><code>公式三（右手）：正面顺时针转90度，公式一（上左下右），逆时针转90度回去</code></pre><p>情况一：单独的一个黄色中心点<br>情况二：中心点+右下棱块是黄色<br>情况三：一条黄色的直线<br>情况四：黄色十字</p><p>情况一、二、三需要转换成情况四</p><p>情况一：做公式三一次<br>情况二：小拐弯放在右手边（黄顶朝上），做公式三一次<br>情况三：黄色直线平行于我们放（黄顶朝上），做公式三一次</p><h2 id="还原顶面颜色（小鱼）"><a href="#还原顶面颜色（小鱼）" class="headerlink" title="还原顶面颜色（小鱼）"></a>还原顶面颜色（小鱼）</h2><pre><code>公式四（右手）： 下右上右，下右右上</code></pre><p>情况一：顶面少两个黄色点<br>情况二：顶面少四个黄色点<br>情况三：顶面少三个黄色点（小鱼）</p><p>情况一、二需要转换层三</p><p>情况一：将左后方顶层放黄色，黄顶朝上，做公式四<br>情况二: 将后方顶层不要有黄色，黄顶朝上，做公式四</p><p>情况三：鱼头放在左上方,黄顶朝上，做公式四</p><h2 id="对好顶层角块颜色"><a href="#对好顶层角块颜色" class="headerlink" title="对好顶层角块颜色"></a>对好顶层角块颜色</h2><pre><code>公式五（右手）：上右上，底层转180，下左上，底层转180，右边转180</code></pre><p>黄顶朝上时候，顶层找到两个角块面是一样的颜色（如果没有，则任意朝下），朝下，黄面朝前，做公式五</p><h2 id="调整顶层棱块"><a href="#调整顶层棱块" class="headerlink" title="调整顶层棱块"></a>调整顶层棱块</h2><pre><code>公式六（右手）：下左下右，下右下左，上左，右180度</code></pre><p>黄顶朝上，找到侧面已经还原好的一个面（没有则任意面），对着正面，然后做公式六</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 三阶 </tag>
            
            <tag> 魔方 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>听者记2021</title>
      <link href="/2021/02/19/tingzheji2021/"/>
      <url>/2021/02/19/tingzheji2021/</url>
      
        <content type="html"><![CDATA[<blockquote><p>涉猎阅未闻,蹔使心魂澄<br><a id="more"></a></p></blockquote><h2 id="《卓有成效的管理者》"><a href="#《卓有成效的管理者》" class="headerlink" title="《卓有成效的管理者》"></a>《卓有成效的管理者》</h2><p><strong><font color="red">[2021-2-19] 真正重要的不是趋势本身,而是趋势改变。</font></strong><br><img src="/2021/02/19/tingzheji2021/卓有成效的管理者.jpg" alt=""></p><h2 id="《高情商是练出来的》"><a href="#《高情商是练出来的》" class="headerlink" title="《高情商是练出来的》"></a>《高情商是练出来的》</h2><p><strong><font color="red">[2021-2-20] 强调理性与感性，接收与改变之间的辩证平衡与协调</font></strong><br><img src="/2021/02/19/tingzheji2021/高情商是练出来的.jpg" alt=""></p><h2 id="《微精通》"><a href="#《微精通》" class="headerlink" title="《微精通》"></a>《微精通》</h2><p><strong><font color="red">[2021-2-21] 给人生创建一个抽奖系统</font></strong><br><img src="/2021/02/19/tingzheji2021/微精通.jpg" alt=""></p><h2 id="《魔鬼经济学1》"><a href="#《魔鬼经济学1》" class="headerlink" title="《魔鬼经济学1》"></a>《魔鬼经济学1》</h2><p><strong><font color="red">[2021-2-22] 抛弃常规思维，从“数据分析”的视角,来找事情的真相</font></strong><br><img src="/2021/02/19/tingzheji2021/魔鬼经济学1.jpg" alt=""></p><h2 id="《魔鬼经济学2》"><a href="#《魔鬼经济学2》" class="headerlink" title="《魔鬼经济学2》"></a>《魔鬼经济学2》</h2><p><strong><font color="red">[2021-2-23] 从客观事实和数据出发，考察具体情境里人们道德选择</font></strong><br><img src="/2021/02/19/tingzheji2021/魔鬼经济学2.jpg" alt=""></p><h2 id="《魔鬼经济学3》"><a href="#《魔鬼经济学3》" class="headerlink" title="《魔鬼经济学3》"></a>《魔鬼经济学3》</h2><p><strong><font color="red">[2021-2-24] 人号称是理性动物，但现实中的行为却常常是非理性的</font></strong><br><img src="/2021/02/19/tingzheji2021/魔鬼经济学3.jpg" alt=""></p><h2 id="《魔鬼经济学4》"><a href="#《魔鬼经济学4》" class="headerlink" title="《魔鬼经济学4》"></a>《魔鬼经济学4》</h2><p><strong><font color="red">[2021-2-25] 用数据为线索采用魔鬼式思考</font></strong><br><img src="/2021/02/19/tingzheji2021/魔鬼经济学4.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 视野 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视野 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计划2021</title>
      <link href="/2021/02/19/plan2021/"/>
      <url>/2021/02/19/plan2021/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以教为学,有输入有输出<br><a id="more"></a></p></blockquote><h1 id="上半年"><a href="#上半年" class="headerlink" title="上半年"></a>上半年</h1><h2 id="主线"><a href="#主线" class="headerlink" title="主线"></a>主线</h2><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><p>阶段一：2021.01.17 ~ 2021.01.23<br>《MySQL组合拳》</p><h4 id="JVM-2021-01-25"><a href="#JVM-2021-01-25" class="headerlink" title="JVM(2021.01.25 ~ )"></a>JVM(2021.01.25 ~ )</h4><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><h4 id="软件设计师-2021-02-20-2021-05-x"><a href="#软件设计师-2021-02-20-2021-05-x" class="headerlink" title="软件设计师(2021.02.20 ~ 2021.05.x)"></a>软件设计师(2021.02.20 ~ 2021.05.x)</h4><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><h4 id="健身-2021-02-20-2021-05-x"><a href="#健身-2021-02-20-2021-05-x" class="headerlink" title="健身(2021.02.20 ~ 2021.05.x)"></a>健身(2021.02.20 ~ 2021.05.x)</h4><h2 id="支线"><a href="#支线" class="headerlink" title="支线"></a>支线</h2><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>阶段一：2021.01.05<br>《Java设计模式》</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h3 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h3><h3 id="Java基础强化"><a href="#Java基础强化" class="headerlink" title="Java基础强化"></a>Java基础强化</h3><h3 id="听者记"><a href="#听者记" class="headerlink" title="听者记"></a>听者记</h3><p>《听者记2021》</p><hr><h1 id="下半年"><a href="#下半年" class="headerlink" title="下半年"></a>下半年</h1><h2 id="主线-1"><a href="#主线-1" class="headerlink" title="主线"></a>主线</h2><h3 id="工作-1"><a href="#工作-1" class="headerlink" title="工作"></a>工作</h3><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><h3 id="学习-1"><a href="#学习-1" class="headerlink" title="学习"></a>学习</h3><h4 id="软件架构师"><a href="#软件架构师" class="headerlink" title="软件架构师"></a>软件架构师</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库优化之组合拳(四)</title>
      <link href="/2021/01/23/mysql-advanced-4/"/>
      <url>/2021/01/23/mysql-advanced-4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>非原创图文,图文来源于黑马官网,此处仅作为备份学习</p></blockquote><a id="more"></a><h2 id="MySQL数据库优化总概"><a href="#MySQL数据库优化总概" class="headerlink" title="MySQL数据库优化总概"></a>MySQL数据库优化总概</h2><table><thead><tr><th>组合拳（一）</th><th>组合拳（二）</th><th>组合拳（三）</th><th>🚩组合拳（四）</th></tr></thead><tbody><tr><td>索引</td><td>体系结构</td><td>应用优化</td><td>MySQL 常用工具</td></tr><tr><td>视图</td><td>存储引擎</td><td>查询缓存优化</td><td>MySQL 日志</td></tr><tr><td>存储过程和函数</td><td>优化SQL步骤</td><td>内存管理及优化</td><td>MySQL 主从复制</td></tr><tr><td>触发器</td><td>索引使用</td><td>MySQL锁问题</td><td></td></tr><tr><td></td><td>SQL优化</td><td>常用SQL技巧</td></tr></tbody></table><h3 id="1-MySql中常用工具"><a href="#1-MySql中常用工具" class="headerlink" title="1. MySql中常用工具"></a>1. MySql中常用工具</h3><h4 id="1-1-mysql"><a href="#1-1-mysql" class="headerlink" title="1.1 mysql"></a>1.1 mysql</h4><p>该mysql不是指mysql服务，而是指mysql的客户端工具。</p><p>语法 ：</p><pre><code>mysql [options] [database]</code></pre><h5 id="1-1-1-连接选项"><a href="#1-1-1-连接选项" class="headerlink" title="1.1.1 连接选项"></a>1.1.1 连接选项</h5><pre><code>参数 ：     -u, --user=name            指定用户名    -p, --password[=name]    指定密码    -h, --host=name            指定服务器IP或域名    -P, --port=#            指定连接端口示例 ：    mysql -h 127.0.0.1 -P 3306 -u root -p    mysql -h127.0.0.1 -P3306 -uroot -p2143</code></pre><h5 id="1-1-2-执行选项"><a href="#1-1-2-执行选项" class="headerlink" title="1.1.2 执行选项"></a>1.1.2 执行选项</h5><pre><code>-e, --execute=name        执行SQL语句并退出</code></pre><p>此选项可以在Mysql客户端执行SQL语句，而不用连接到MySQL数据库再执行，对于一些批处理脚本，这种方式尤其方便。</p><pre><code>示例：    mysql -uroot -p2143 db01 -e "select * from tb_book";</code></pre><p><img src="/2021/01/23/mysql-advanced-4/1555325632715.png" alt="1555325632715"> </p><h4 id="1-2-mysqladmin"><a href="#1-2-mysqladmin" class="headerlink" title="1.2 mysqladmin"></a>1.2 mysqladmin</h4><p>mysqladmin 是一个执行管理操作的客户端程序。可以用它来检查服务器的配置和当前状态、创建并删除数据库等。</p><p>可以通过 ： mysqladmin –help  指令查看帮助文档</p><p><img src="/2021/01/23/mysql-advanced-4/1555326108697.png" alt="1555326108697"> </p><pre><code>示例 ：    mysqladmin -uroot -p2143 create 'test01';      mysqladmin -uroot -p2143 drop 'test01';    mysqladmin -uroot -p2143 version;</code></pre><h4 id="1-3-mysqlbinlog"><a href="#1-3-mysqlbinlog" class="headerlink" title="1.3 mysqlbinlog"></a>1.3 mysqlbinlog</h4><p>由于服务器生成的二进制日志文件以二进制格式保存，所以如果想要检查这些文本的文本格式，就会使用到mysqlbinlog 日志管理工具。</p><p>语法 ：</p><pre><code>mysqlbinlog [options]  log-files1 log-files2 ...选项：    -d, --database=name : 指定数据库名称，只列出指定的数据库相关操作。    -o, --offset=# : 忽略掉日志中的前n行命令。    -r,--result-file=name : 将输出的文本格式日志输出到指定文件。    -s, --short-form : 显示简单格式， 省略掉一些信息。    --start-datatime=date1  --stop-datetime=date2 : 指定日期间隔内的所有日志。    --start-position=pos1 --stop-position=pos2 : 指定位置间隔内的所有日志。</code></pre><h4 id="1-4-mysqldump"><a href="#1-4-mysqldump" class="headerlink" title="1.4 mysqldump"></a>1.4 mysqldump</h4><p>mysqldump 客户端工具用来备份数据库或在不同数据库之间进行数据迁移。备份内容包含创建表，及插入表的SQL语句。</p><p>语法 ：</p><pre><code>mysqldump [options] db_name [tables]mysqldump [options] --database/-B db1 [db2 db3...]mysqldump [options] --all-databases/-A</code></pre><h5 id="1-4-1-连接选项"><a href="#1-4-1-连接选项" class="headerlink" title="1.4.1 连接选项"></a>1.4.1 连接选项</h5><pre><code>参数 ：     -u, --user=name            指定用户名    -p, --password[=name]    指定密码    -h, --host=name            指定服务器IP或域名    -P, --port=#            指定连接端口</code></pre><h5 id="1-4-2-输出内容选项"><a href="#1-4-2-输出内容选项" class="headerlink" title="1.4.2 输出内容选项"></a>1.4.2 输出内容选项</h5><pre><code>参数：    --add-drop-database        在每个数据库创建语句前加上 Drop database 语句    --add-drop-table        在每个表创建语句前加上 Drop table 语句 , 默认开启 ; 不开启 (--skip-add-drop-table)    -n, --no-create-db        不包含数据库的创建语句    -t, --no-create-info    不包含数据表的创建语句    -d --no-data            不包含数据     -T, --tab=name            自动生成两个文件：一个.sql文件，创建表结构的语句；                             一个.txt文件，数据文件，相当于select into outfile  </code></pre><pre><code>示例 ：     mysqldump -uroot -p2143 db01 tb_book --add-drop-database --add-drop-table &gt; a    mysqldump -uroot -p2143 -T /tmp test city</code></pre><p><img src="/2021/01/23/mysql-advanced-4/1555501806693.png" alt="1555501806693"> </p><h4 id="1-5-mysqlimport-source"><a href="#1-5-mysqlimport-source" class="headerlink" title="1.5 mysqlimport/source"></a>1.5 mysqlimport/source</h4><p>mysqlimport 是客户端数据导入工具，用来导入mysqldump 加 -T 参数后导出的文本文件。</p><p>语法：</p><pre><code>mysqlimport [options]  db_name  textfile1  [textfile2...]</code></pre><p>示例：</p><pre><code>mysqlimport -uroot -p2143 test /tmp/city.txt</code></pre><p>如果需要导入sql文件,可以使用mysql中的source 指令 : </p><pre><code>source /root/tb_book.sql</code></pre><h4 id="1-6-mysqlshow"><a href="#1-6-mysqlshow" class="headerlink" title="1.6 mysqlshow"></a>1.6 mysqlshow</h4><p>mysqlshow 客户端对象查找工具，用来很快地查找存在哪些数据库、数据库中的表、表中的列或者索引。</p><p>语法：</p><pre><code>mysqlshow [options] [db_name [table_name [col_name]]]</code></pre><p>参数：</p><pre><code>--count        显示数据库及表的统计信息（数据库，表 均可以不指定）-i            显示指定数据库或者指定表的状态信息</code></pre><p>示例：</p><pre><code>#查询每个数据库的表的数量及表中记录的数量mysqlshow -uroot -p2143 --count#查询test库中每个表中的字段书，及行数mysqlshow -uroot -p2143 test --count#查询test库中book表的详细情况mysqlshow -uroot -p2143 test book --count</code></pre><h3 id="2-Mysql-日志"><a href="#2-Mysql-日志" class="headerlink" title="2. Mysql 日志"></a>2. Mysql 日志</h3><p>在任何一种数据库中，都会有各种各样的日志，记录着数据库工作的方方面面，以帮助数据库管理员追踪数据库曾经发生过的各种事件。MySQL 也不例外，在 MySQL 中，有 4 种不同的日志，分别是错误日志、二进制日志（BINLOG 日志）、查询日志和慢查询日志，这些日志记录着数据库在不同方面的踪迹。</p><h4 id="2-1-错误日志"><a href="#2-1-错误日志" class="headerlink" title="2.1 错误日志"></a>2.1 错误日志</h4><p>错误日志是 MySQL 中最重要的日志之一，它记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，可以首先查看此日志。</p><p>该日志是默认开启的 ， 默认存放目录为 mysql 的数据目录（var/lib/mysql）, 默认的日志文件名为  hostname.err（hostname是主机名）。</p><p>查看日志位置指令 ： </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'log_error%'</span><span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-4/1553993244446.png" alt="1553993244446"> </p><p>查看日志内容 ： </p><pre class=" language-shell"><code class="language-shell">tail -f /var/lib/mysql/xaxh-server.err</code></pre><p><img src="/2021/01/23/mysql-advanced-4/1553993537874.png" alt="1553993537874"> </p><h4 id="2-2-二进制日志"><a href="#2-2-二进制日志" class="headerlink" title="2.2 二进制日志"></a>2.2 二进制日志</h4><h5 id="2-2-1概述"><a href="#2-2-1概述" class="headerlink" title="2.2.1概述"></a>2.2.1概述</h5><p>二进制日志（BINLOG）记录了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句，但是不包括数据查询语句。此日志对于灾难时的数据恢复起着极其重要的作用，MySQL的主从复制， 就是通过该binlog实现的。</p><p>二进制日志，默认情况下是没有开启的，需要到MySQL的配置文件中开启，并配置MySQL日志的格式。 </p><p>配置文件位置 : /usr/my.cnf</p><p>日志存放位置 : 配置时，给定了文件名但是没有指定路径，日志默认写入Mysql的数据目录。</p><pre><code>#配置开启binlog日志， 日志的文件前缀为 mysqlbin -----&gt; 生成的文件名如 : mysqlbin.000001,mysqlbin.000002log_bin=mysqlbin#配置二进制日志的格式binlog_format=STATEMENT</code></pre><h5 id="2-2-2-日志格式"><a href="#2-2-2-日志格式" class="headerlink" title="2.2.2 日志格式"></a>2.2.2 日志格式</h5><p><strong>STATEMENT</strong></p><p>该日志格式在日志文件中记录的都是SQL语句（statement），每一条对数据进行修改的SQL都会记录在日志文件中，通过Mysql提供的mysqlbinlog工具，可以清晰的查看到每条语句的文本。主从复制的时候，从库（slave）会将日志解析为原文本，并在从库重新执行一次。</p><p><strong>ROW</strong></p><p>该日志格式在日志文件中记录的是每一行的数据变更，而不是记录SQL语句。比如，执行SQL语句 ： update tb_book set status=’1’ , 如果是STATEMENT 日志格式，在日志中会记录一行SQL文件； 如果是ROW，由于是对全表进行更新，也就是每一行记录都会发生变更，ROW 格式的日志中会记录每一行的数据变更。</p><p><strong>MIXED</strong></p><p>这是目前MySQL默认的日志格式，即混合了STATEMENT 和 ROW两种格式。默认情况下采用STATEMENT，但是在一些特殊情况下采用ROW来进行记录。MIXED 格式能尽量利用两种模式的优点，而避开他们的缺点。</p><h5 id="2-2-3-日志读取"><a href="#2-2-3-日志读取" class="headerlink" title="2.2.3 日志读取"></a>2.2.3 日志读取</h5><p>由于日志以二进制方式存储，不能直接读取，需要用mysqlbinlog工具来查看，语法如下 ：</p><pre><code>mysqlbinlog log-file；</code></pre><p><strong>查看STATEMENT格式日志</strong> </p><p>执行插入语句 ：</p><pre class=" language-SQL"><code class="language-SQL">insert into tb_book values(null,'Lucene','2088-05-01','0');</code></pre><p> 查看日志文件 ：</p><p><img src="/2021/01/23/mysql-advanced-4/1554079717375.png" alt="1554079717375"> </p><p>mysqlbin.index : 该文件是日志索引文件 ， 记录日志的文件名；</p><p>mysqlbing.000001 ：日志文件</p><p>查看日志内容 ：</p><pre><code>mysqlbinlog mysqlbing.000001；</code></pre><p><img src="/2021/01/23/mysql-advanced-4/1554080016778.png" alt="1554080016778"> </p><p><strong>查看ROW格式日志</strong></p><p>配置 :</p><pre><code>#配置开启binlog日志， 日志的文件前缀为 mysqlbin -----&gt; 生成的文件名如 : mysqlbin.000001,mysqlbin.000002log_bin=mysqlbin#配置二进制日志的格式binlog_format=ROW</code></pre><p>插入数据 :</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_book <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'SpringCloud实战'</span><span class="token punctuation">,</span><span class="token string">'2088-05-05'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果日志格式是 ROW , 直接查看数据 , 是查看不懂的 ; 可以在mysqlbinlog 后面加上参数 -vv  </p><pre class=" language-SQL"><code class="language-SQL">mysqlbinlog -vv mysqlbin.000002 </code></pre><p><img src="/2021/01/23/mysql-advanced-4/1554095452022.png" alt="1554095452022"> </p><h5 id="2-2-4-日志删除"><a href="#2-2-4-日志删除" class="headerlink" title="2.2.4 日志删除"></a>2.2.4 日志删除</h5><p>对于比较繁忙的系统，由于每天生成日志量大 ，这些日志如果长时间不清楚，将会占用大量的磁盘空间。下面我们将会讲解几种删除日志的常见方法 ：</p><p><strong>方式一</strong> </p><p>通过 Reset Master 指令删除全部 binlog 日志，删除之后，日志编号，将从 xxxx.000001重新开始 。</p><p>查询之前 ，先查询下日志文件 ： </p><p><img src="/2021/01/23/mysql-advanced-4/1554118609489.png" alt="1554118609489">   </p><p>执行删除日志指令： </p><pre><code>Reset Master</code></pre><p>执行之后， 查看日志文件 ：</p><p><img src="/2021/01/23/mysql-advanced-4/1554118675264.png" alt="1554118675264"> </p><p><strong>方式二</strong></p><p>执行指令 <code>purge  master logs to 'mysqlbin.******'</code> ，该命令将删除  <code>******</code> 编号之前的所有日志。 </p><p><strong>方式三</strong></p><p>执行指令 <code>purge master logs before 'yyyy-mm-dd hh24:mi:ss'</code> ，该命令将删除日志为 “yyyy-mm-dd hh24:mi:ss” 之前产生的所有日志 。</p><p><strong>方式四</strong></p><p>设置参数 –expire_logs_days=# ，此参数的含义是设置日志的过期天数， 过了指定的天数后日志将会被自动删除，这样将有利于减少DBA 管理日志的工作量。</p><p>配置如下 ： </p><p><img src="/2021/01/23/mysql-advanced-4/1554125506938.png" alt="1554125506938"> </p><h4 id="2-3-查询日志"><a href="#2-3-查询日志" class="headerlink" title="2.3 查询日志"></a>2.3 查询日志</h4><p>查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的SQL语句。</p><p>默认情况下， 查询日志是未开启的。如果需要开启查询日志，可以设置以下配置 ：</p><pre><code>#该选项用来开启查询日志 ， 可选值 ： 0 或者 1 ； 0 代表关闭， 1 代表开启 general_log=1#设置日志的文件名 ， 如果没有指定， 默认的文件名为 host_name.log general_log_file=file_name</code></pre><p>在 mysql 的配置文件 /usr/my.cnf 中配置如下内容 ： </p><p><img src="/2021/01/23/mysql-advanced-4/1554128184632.png" alt="1554128184632"> </p><p>配置完毕之后，在数据库执行以下操作 ：</p><pre><code>select * from tb_book;select * from tb_book where id = 1;update tb_book set name = 'lucene入门指南' where id = 5;select * from tb_book where id &lt; 8;</code></pre><p>执行完毕之后， 再次来查询日志文件 ： </p><p><img src="/2021/01/23/mysql-advanced-4/1554128089851.png" alt="1554128089851"> </p><h4 id="2-4-慢查询日志"><a href="#2-4-慢查询日志" class="headerlink" title="2.4 慢查询日志"></a>2.4 慢查询日志</h4><p>慢查询日志记录了所有执行时间超过参数 long_query_time 设置值并且扫描记录数不小于 min_examined_row_limit 的所有的SQL语句的日志。long_query_time 默认为 10 秒，最小为 0， 精度可以到微秒。</p><h5 id="2-4-1-文件位置和格式"><a href="#2-4-1-文件位置和格式" class="headerlink" title="2.4.1 文件位置和格式"></a>2.4.1 文件位置和格式</h5><p>慢查询日志默认是关闭的 。可以通过两个参数来控制慢查询日志 ：</p><pre><code># 该参数用来控制慢查询日志是否开启， 可取值： 1 和 0 ， 1 代表开启， 0 代表关闭slow_query_log=1 # 该参数用来指定慢查询日志的文件名slow_query_log_file=slow_query.log# 该选项用来配置查询的时间限制， 超过这个时间将认为值慢查询， 将需要进行日志记录， 默认10slong_query_time=10</code></pre><h5 id="2-4-2-日志的读取"><a href="#2-4-2-日志的读取" class="headerlink" title="2.4.2 日志的读取"></a>2.4.2 日志的读取</h5><p>和错误日志、查询日志一样，慢查询日志记录的格式也是纯文本，可以被直接读取。</p><p>1） 查询long_query_time 的值。</p><p><img src="/2021/01/23/mysql-advanced-4/1554130333472.png" alt="1554130333472"> </p><p>2） 执行查询操作</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span>price<span class="token punctuation">,</span>num <span class="token punctuation">,</span><span class="token keyword">status</span> <span class="token keyword">from</span> tb_item <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-4/1554130448709.png" alt="1554130448709"></p><p>由于该语句执行时间很短，为0s ， 所以不会记录在慢查询日志中。</p><pre><code>select * from tb_item where title like '%阿尔卡特 (OT-927) 炭黑 联通3G手机 双卡双待165454%' ;</code></pre><p><img src="/2021/01/23/mysql-advanced-4/1554130532577.png" alt="1554130532577"> </p><p>该SQL语句 ， 执行时长为 26.77s ，超过10s ， 所以会记录在慢查询日志文件中。</p><p>3） 查看慢查询日志文件</p><p>直接通过cat 指令查询该日志文件 ： </p><p><img src="/2021/01/23/mysql-advanced-4/1554130669360.png" alt="1554130669360"> </p><p>如果慢查询日志内容很多， 直接查看文件，比较麻烦， 这个时候可以借助于mysql自带的 mysqldumpslow 工具， 来对慢查询日志进行分类汇总。 </p><p><img src="/2021/01/23/mysql-advanced-4/1554130856485.png" alt="1554130856485"> </p><h3 id="3-Mysql复制"><a href="#3-Mysql复制" class="headerlink" title="3. Mysql复制"></a>3. Mysql复制</h3><h4 id="3-1-复制概述"><a href="#3-1-复制概述" class="headerlink" title="3.1 复制概述"></a>3.1 复制概述</h4><p>复制是指将主数据库的DDL 和 DML 操作通过二进制日志传到从库服务器中，然后在从库上对这些日志重新执行（也叫重做），从而使得从库和主库的数据保持同步。</p><p>MySQL支持一台主库同时向多台从库进行复制， 从库同时也可以作为其他从服务器的主库，实现链状复制。</p><h4 id="3-2-复制原理"><a href="#3-2-复制原理" class="headerlink" title="3.2 复制原理"></a>3.2 复制原理</h4><p>MySQL 的主从复制原理如下。</p><p><img src="/2021/01/23/mysql-advanced-4/1.jpg" alt="1554423698190"> </p><p>从上层来看，复制分成三步：</p><ul><li>Master 主库在事务提交时，会把数据变更作为时间 Events 记录在二进制日志文件 Binlog 中。</li><li><p>主库推送二进制日志文件 Binlog 中的日志事件到从库的中继日志 Relay Log 。</p></li><li><p>slave重做中继日志中的事件，将改变反映它自己的数据。</p></li></ul><h4 id="3-3-复制优势"><a href="#3-3-复制优势" class="headerlink" title="3.3 复制优势"></a>3.3 复制优势</h4><p>MySQL 复制的有点主要包含以下三个方面：</p><ul><li><p>主库出现问题，可以快速切换到从库提供服务。</p></li><li><p>可以在从库上执行查询操作，从主库中更新，实现读写分离，降低主库的访问压力。</p></li><li><p>可以在从库中执行备份，以避免备份期间影响主库的服务。</p></li></ul><h4 id="3-4-搭建步骤"><a href="#3-4-搭建步骤" class="headerlink" title="3.4 搭建步骤"></a>3.4 搭建步骤</h4><h5 id="3-4-1-master"><a href="#3-4-1-master" class="headerlink" title="3.4.1 master"></a>3.4.1 master</h5><p>1） 在master 的配置文件（/usr/my.cnf）中，配置如下内容：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#mysql 服务ID,保证整个集群环境中唯一</span><span class="token attr-name">server-id</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment" spellcheck="true">#mysql binlog 日志的存储路径和文件名</span><span class="token attr-name">log-bin</span><span class="token punctuation">=</span><span class="token attr-value">/var/lib/mysql/mysqlbin</span><span class="token comment" spellcheck="true">#错误日志,默认已经开启</span><span class="token comment" spellcheck="true">#log-err</span><span class="token comment" spellcheck="true">#mysql的安装目录</span><span class="token comment" spellcheck="true">#basedir</span><span class="token comment" spellcheck="true">#mysql的临时目录</span><span class="token comment" spellcheck="true">#tmpdir</span><span class="token comment" spellcheck="true">#mysql的数据存放目录</span><span class="token comment" spellcheck="true">#datadir</span><span class="token comment" spellcheck="true">#是否只读,1 代表只读, 0 代表读写</span><span class="token attr-name">read-only</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment" spellcheck="true">#忽略的数据, 指不需要同步的数据库</span><span class="token attr-name">binlog-ignore-db</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span><span class="token comment" spellcheck="true">#指定同步的数据库</span><span class="token comment" spellcheck="true">#binlog-do-db=db01</span></code></pre><p>2） 执行完毕之后，需要重启Mysql：</p><pre class=" language-sql"><code class="language-sql">service mysql restart ；</code></pre><p>3） 创建同步数据的账户，并且进行授权操作：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">replication</span> slave <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'itcast'</span>@'<span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">192.131</span><span class="token string">' identified by '</span>itcast'<span class="token punctuation">;</span>    flush <span class="token keyword">privileges</span><span class="token punctuation">;</span></code></pre><p>4） 查看master状态：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-4/1554477759735.png" alt="1554477759735"> </p><p>字段含义：</p><pre><code>File : 从哪个日志文件开始推送日志文件 Position ： 从哪个位置开始推送日志Binlog_Ignore_DB : 指定不需要同步的数据库</code></pre><h5 id="3-4-2-slave"><a href="#3-4-2-slave" class="headerlink" title="3.4.2 slave"></a>3.4.2 slave</h5><p>1） 在 slave 端配置文件中，配置如下内容：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#mysql服务端ID,唯一</span><span class="token attr-name">server-id</span><span class="token punctuation">=</span><span class="token attr-value">2</span><span class="token comment" spellcheck="true">#指定binlog日志</span><span class="token attr-name">log-bin</span><span class="token punctuation">=</span><span class="token attr-value">/var/lib/mysql/mysqlbin</span></code></pre><p>2）  执行完毕之后，需要重启Mysql：</p><pre><code>service mysql restart；</code></pre><p>3） 执行如下指令 ：</p><pre class=" language-sql"><code class="language-sql">change master <span class="token keyword">to</span> master_host<span class="token operator">=</span> <span class="token string">'192.168.192.130'</span><span class="token punctuation">,</span> master_user<span class="token operator">=</span><span class="token string">'itcast'</span><span class="token punctuation">,</span> master_password<span class="token operator">=</span><span class="token string">'itcast'</span><span class="token punctuation">,</span> master_log_file<span class="token operator">=</span><span class="token string">'mysqlbin.000001'</span><span class="token punctuation">,</span> master_log_pos<span class="token operator">=</span><span class="token number">413</span><span class="token punctuation">;</span></code></pre><p>指定当前从库对应的主库的IP地址，用户名，密码，从哪个日志文件开始的那个位置开始同步推送日志。</p><p>4） 开启同步操作</p><pre><code>start slave;show slave status;</code></pre><p><img src="/2021/01/23/mysql-advanced-4/1554479387365.png" alt="1554479387365"> </p><p>5） 停止同步操作</p><pre><code>stop slave;</code></pre><h5 id="3-4-3-验证同步操作"><a href="#3-4-3-验证同步操作" class="headerlink" title="3.4.3 验证同步操作"></a>3.4.3 验证同步操作</h5><p>1） 在主库中创建数据库，创建表，并插入数据 ：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token number">db01</span><span class="token punctuation">;</span><span class="token keyword">user</span> <span class="token number">db01</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'Trigger'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'Dawn'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2） 在从库中查询数据，进行验证 ：</p><p>在从库中，可以查看到刚才创建的数据库：</p><p><img src="/2021/01/23/mysql-advanced-4/1554544658640.png" alt="1554544658640"> </p><p>在该数据库中，查询user表中的数据：</p><p><img src="/2021/01/23/mysql-advanced-4/1554544679538.png" alt="1554544679538"> </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库优化之组合拳(四) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库优化之组合拳(三)</title>
      <link href="/2021/01/23/mysql-advanced-3/"/>
      <url>/2021/01/23/mysql-advanced-3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>非原创图文,图文来源于黑马官网,此处仅作为备份学习</p></blockquote><a id="more"></a><h2 id="MySQL数据库优化总概"><a href="#MySQL数据库优化总概" class="headerlink" title="MySQL数据库优化总概"></a>MySQL数据库优化总概</h2><table><thead><tr><th>组合拳（一）</th><th>组合拳（二）</th><th>🚩组合拳（三）</th><th>组合拳（四）</th></tr></thead><tbody><tr><td>索引</td><td>体系结构</td><td>应用优化</td><td>MySQL 常用工具</td></tr><tr><td>视图</td><td>存储引擎</td><td>查询缓存优化</td><td>MySQL 日志</td></tr><tr><td>存储过程和函数</td><td>优化SQL步骤</td><td>内存管理及优化</td><td>MySQL 主从复制</td></tr><tr><td>触发器</td><td>索引使用</td><td>MySQL锁问题</td><td></td></tr><tr><td></td><td>SQL优化</td><td>常用SQL技巧</td></tr></tbody></table><h3 id="1-应用优化"><a href="#1-应用优化" class="headerlink" title="1. 应用优化"></a>1. 应用优化</h3><p>前面章节，我们介绍了很多数据库的优化措施。但是在实际生产环境中，由于数据库本身的性能局限，就必须要对前台的应用进行一些优化，来降低数据库的访问压力。</p><h4 id="1-1-使用连接池"><a href="#1-1-使用连接池" class="headerlink" title="1.1 使用连接池"></a>1.1 使用连接池</h4><p>对于访问数据库来说，建立连接的代价是比较昂贵的，因为我们频繁的创建关闭连接，是比较耗费资源的，我们有必要建立 数据库连接池，以提高访问的性能。</p><h4 id="1-2-减少对MySQL的访问"><a href="#1-2-减少对MySQL的访问" class="headerlink" title="1.2 减少对MySQL的访问"></a>1.2 减少对MySQL的访问</h4><h5 id="1-2-1-避免对数据进行重复检索"><a href="#1-2-1-避免对数据进行重复检索" class="headerlink" title="1.2.1 避免对数据进行重复检索"></a>1.2.1 避免对数据进行重复检索</h5><p>在编写应用代码时，需要能够理清对数据库的访问逻辑。能够一次连接就获取到结果的，就不用两次连接，这样可以大大减少对数据库无用的重复请求。</p><p>比如 ，需要获取书籍的id 和name字段 ， 则查询如下： </p><pre><code> select id , name from tb_book;</code></pre><p>之后，在业务逻辑中有需要获取到书籍状态信息， 则查询如下：</p><pre><code>select id , status from tb_book;</code></pre><p>这样，就需要向数据库提交两次请求，数据库就要做两次查询操作。其实完全可以用一条SQL语句得到想要的结果。</p><pre><code>select id, name , status from tb_book;</code></pre><h5 id="1-2-2-增加cache层"><a href="#1-2-2-增加cache层" class="headerlink" title="1.2.2 增加cache层"></a>1.2.2 增加cache层</h5><p>在应用中，我们可以在应用中增加 缓存 层来达到减轻数据库负担的目的。缓存层有很多种，也有很多实现方式，只要能达到降低数据库的负担又能满足应用需求就可以。</p><p>因此可以部分数据从数据库中抽取出来放到应用端以文本方式存储， 或者使用框架(Mybatis, Hibernate)提供的一级缓存/二级缓存，或者使用redis数据库来缓存数据 。</p><h4 id="1-3-负载均衡"><a href="#1-3-负载均衡" class="headerlink" title="1.3 负载均衡"></a>1.3 负载均衡</h4><p>负载均衡是应用中使用非常普遍的一种优化方法，它的机制就是利用某种均衡算法，将固定的负载量分布到不同的服务器上， 以此来降低单台服务器的负载，达到优化的效果。</p><h5 id="1-3-1-利用MySQL复制分流查询"><a href="#1-3-1-利用MySQL复制分流查询" class="headerlink" title="1.3.1 利用MySQL复制分流查询"></a>1.3.1 利用MySQL复制分流查询</h5><p>通过MySQL的主从复制，实现读写分离，使增删改操作走主节点，查询操作走从节点，从而可以降低单台服务器的读写压力。</p><p><img src="/2021/01/23/mysql-advanced-3/1.jpg" alt="1"> </p><h5 id="1-3-2-采用分布式数据库架构"><a href="#1-3-2-采用分布式数据库架构" class="headerlink" title="1.3.2 采用分布式数据库架构"></a>1.3.2 采用分布式数据库架构</h5><p>分布式数据库架构适合大数据量、负载高的情况，它有良好的拓展性和高可用性。通过在多台服务器之间分布数据，可以实现在多台服务器之间的负载均衡，提高访问效率。</p><h3 id="2-Mysql中查询缓存优化"><a href="#2-Mysql中查询缓存优化" class="headerlink" title="2. Mysql中查询缓存优化"></a>2. Mysql中查询缓存优化</h3><h4 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h4><p>开启Mysql的查询缓存，当执行完全相同的SQL语句的时候，服务器就会直接从缓存中读取结果，当数据被修改，之前的缓存会失效，修改比较频繁的表不适合做查询缓存。</p><h4 id="2-2-操作流程"><a href="#2-2-操作流程" class="headerlink" title="2.2 操作流程"></a>2.2 操作流程</h4><p> <img src="/2021/01/23/mysql-advanced-3/20180919131632347.png" alt="20180919131632347"> </p><ol><li>客户端发送一条查询给服务器；</li><li>服务器先会检查查询缓存，如果命中了缓存，则立即返回存储在缓存中的结果。否则进入下一阶段；</li><li>服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划；</li><li>MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询；</li><li>将结果返回给客户端。</li></ol><h4 id="2-3-查询缓存配置"><a href="#2-3-查询缓存配置" class="headerlink" title="2.3 查询缓存配置"></a>2.3 查询缓存配置</h4><ol><li><p>查看当前的MySQL数据库是否支持查询缓存：</p><pre class=" language-SQL"><code class="language-SQL">SHOW VARIABLES LIKE 'have_query_cache';    </code></pre><p><img src="/2021/01/23/mysql-advanced-3/1555249929012.png" alt="1555249929012"> </p></li><li><p>查看当前MySQL是否开启了查询缓存 ：</p><pre class=" language-SQL"><code class="language-SQL">SHOW VARIABLES LIKE 'query_cache_type';</code></pre><p><img src="/2021/01/23/mysql-advanced-3/1555250015377.png" alt="1555250015377"> </p></li><li><p>查看查询缓存的占用大小 ：</p><pre class=" language-SQL"><code class="language-SQL">SHOW VARIABLES LIKE 'query_cache_size';</code></pre><p><img src="/2021/01/23/mysql-advanced-3/1555250142451.png" alt="1555250142451">      </p></li><li><p>查看查询缓存的状态变量：</p><pre class=" language-SQL"><code class="language-SQL">SHOW STATUS LIKE 'Qcache%';</code></pre><p><img src="/2021/01/23/mysql-advanced-3/1555250443958.png" alt="1555250443958"> </p><p>各个变量的含义如下：</p><p>| 参数                    | 含义                                                         |<br>| ———————– | ———————————————————— |<br>| Qcache_free_blocks      | 查询缓存中的可用内存块数                                     |<br>| Qcache_free_memory      | 查询缓存的可用内存量                                         |<br>| Qcache_hits             | 查询缓存命中数                                               |<br>| Qcache_inserts          | 添加到查询缓存的查询数                                       |<br>| Qcache_lowmen_prunes    | 由于内存不足而从查询缓存中删除的查询数                       |<br>| Qcache_not_cached       | 非缓存查询的数量（由于 query_cache_type 设置而无法缓存或未缓存） |<br>| Qcache_queries_in_cache | 查询缓存中注册的查询数                                       |<br>| Qcache_total_blocks     | 查询缓存中的块总数                                           |</p></li></ol><h4 id="2-4-开启查询缓存"><a href="#2-4-开启查询缓存" class="headerlink" title="2.4 开启查询缓存"></a>2.4 开启查询缓存</h4><p>MySQL的查询缓存默认是关闭的，需要手动配置参数 query_cache_type ， 来开启查询缓存。query_cache_type 该参数的可取值有三个 ：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>OFF 或 0</td><td>查询缓存功能关闭</td></tr><tr><td>ON 或 1</td><td>查询缓存功能打开，SELECT的结果符合缓存条件即会缓存，否则，不予缓存，显式指定 SQL_NO_CACHE，不予缓存</td></tr><tr><td>DEMAND 或 2</td><td>查询缓存功能按需进行，显式指定 SQL_CACHE 的SELECT语句才会缓存；其它均不予缓存</td></tr></tbody></table><p>在 /usr/my.cnf 配置中，增加以下配置 ： </p><p><img src="/2021/01/23/mysql-advanced-3/1555251383805.png" alt="1555251383805">         </p><p>配置完毕之后，重启服务既可生效 ；</p><p>然后就可以在命令行执行SQL语句进行验证 ，执行一条比较耗时的SQL语句，然后再多执行几次，查看后面几次的执行时间；获取通过查看查询缓存的缓存命中数，来判定是否走查询缓存。</p><h4 id="2-5-查询缓存SELECT选项"><a href="#2-5-查询缓存SELECT选项" class="headerlink" title="2.5 查询缓存SELECT选项"></a>2.5 查询缓存SELECT选项</h4><p>可以在SELECT语句中指定两个与查询缓存相关的选项 ：</p><p>SQL_CACHE : 如果查询结果是可缓存的，并且 query_cache_type 系统变量的值为ON或 DEMAND ，则缓存查询结果 。</p><p>SQL_NO_CACHE : 服务器不使用查询缓存。它既不检查查询缓存，也不检查结果是否已缓存，也不缓存查询结果。</p><p>例子：</p><pre class=" language-SQL"><code class="language-SQL">SELECT SQL_CACHE id, name FROM customer;SELECT SQL_NO_CACHE id, name FROM customer;</code></pre><p>​    </p><h4 id="2-6-查询缓存失效的情况"><a href="#2-6-查询缓存失效的情况" class="headerlink" title="2.6 查询缓存失效的情况"></a>2.6 查询缓存失效的情况</h4><p>1） SQL 语句不一致的情况， 要想命中查询缓存，查询的SQL语句必须一致。</p><pre class=" language-SQL"><code class="language-SQL">SQL1 : select count(*) from tb_item;SQL2 : Select count(*) from tb_item;</code></pre><p>2） 当查询语句中有一些不确定的时，则不会缓存。如 ： now() , current_date() , curdate() , curtime() , rand() , uuid() , user() , database() 。</p><pre class=" language-SQL"><code class="language-SQL">SQL1 : select * from tb_item where updatetime < now() limit 1;SQL2 : select user();SQL3 : select database();</code></pre><p>3） 不使用任何表查询语句。</p><pre class=" language-SQL"><code class="language-SQL">select 'A';</code></pre><p>4）  查询 mysql， information_schema或  performance_schema 数据库中的表时，不会走查询缓存。</p><pre class=" language-SQL"><code class="language-SQL">select * from information_schema.engines;</code></pre><p>5） 在存储的函数，触发器或事件的主体内执行的查询。</p><p>6） 如果表更改，则使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除。这包括使用<code>MERGE</code>映射到已更改表的表的查询。一个表可以被许多类型的语句，如被改变 INSERT， UPDATE， DELETE， TRUNCATE TABLE， ALTER TABLE， DROP TABLE，或 DROP DATABASE 。</p><h3 id="3-Mysql内存管理及优化"><a href="#3-Mysql内存管理及优化" class="headerlink" title="3. Mysql内存管理及优化"></a>3. Mysql内存管理及优化</h3><h4 id="3-1-内存优化原则"><a href="#3-1-内存优化原则" class="headerlink" title="3.1 内存优化原则"></a>3.1 内存优化原则</h4><p>1） 将尽量多的内存分配给MySQL做缓存，但要给操作系统和其他程序预留足够内存。</p><p>2） MyISAM 存储引擎的数据文件读取依赖于操作系统自身的IO缓存，因此，如果有MyISAM表，就要预留更多的内存给操作系统做IO缓存。</p><p>3） 排序区、连接区等缓存是分配给每个数据库会话（session）专用的，其默认值的设置要根据最大连接数合理分配，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽。</p><h4 id="3-2-MyISAM-内存优化"><a href="#3-2-MyISAM-内存优化" class="headerlink" title="3.2 MyISAM 内存优化"></a>3.2 MyISAM 内存优化</h4><p>myisam存储引擎使用 key_buffer 缓存索引块，加速myisam索引的读写速度。对于myisam表的数据块，mysql没有特别的缓存机制，完全依赖于操作系统的IO缓存。</p><h5 id="key-buffer-size"><a href="#key-buffer-size" class="headerlink" title="key_buffer_size"></a>key_buffer_size</h5><p>key_buffer_size决定MyISAM索引块缓存区的大小，直接影响到MyISAM表的存取效率。可以在MySQL参数文件中设置key_buffer_size的值，对于一般MyISAM数据库，建议至少将1/4可用内存分配给key_buffer_size。</p><p>在/usr/my.cnf 中做如下配置：</p><pre><code>key_buffer_size=512M</code></pre><h5 id="read-buffer-size"><a href="#read-buffer-size" class="headerlink" title="read_buffer_size"></a>read_buffer_size</h5><p>如果需要经常顺序扫描myisam表，可以通过增大read_buffer_size的值来改善性能。但需要注意的是read_buffer_size是每个session独占的，如果默认值设置太大，就会造成内存浪费。</p><h5 id="read-rnd-buffer-size"><a href="#read-rnd-buffer-size" class="headerlink" title="read_rnd_buffer_size"></a>read_rnd_buffer_size</h5><p>对于需要做排序的myisam表的查询，如带有order by子句的sql，适当增加 read_rnd_buffer_size 的值，可以改善此类的sql性能。但需要注意的是 read_rnd_buffer_size 是每个session独占的，如果默认值设置太大，就会造成内存浪费。</p><h4 id="3-3-InnoDB-内存优化"><a href="#3-3-InnoDB-内存优化" class="headerlink" title="3.3 InnoDB 内存优化"></a>3.3 InnoDB 内存优化</h4><p>innodb用一块内存区做IO缓存池，该缓存池不仅用来缓存innodb的索引块，而且也用来缓存innodb的数据块。</p><h5 id="innodb-buffer-pool-size"><a href="#innodb-buffer-pool-size" class="headerlink" title="innodb_buffer_pool_size"></a>innodb_buffer_pool_size</h5><p>该变量决定了 innodb 存储引擎表数据和索引数据的最大缓存区大小。在保证操作系统及其他程序有足够内存可用的情况下，innodb_buffer_pool_size 的值越大，缓存命中率越高，访问InnoDB表需要的磁盘I/O 就越少，性能也就越高。</p><pre><code>innodb_buffer_pool_size=512M</code></pre><h5 id="innodb-log-buffer-size"><a href="#innodb-log-buffer-size" class="headerlink" title="innodb_log_buffer_size"></a>innodb_log_buffer_size</h5><p>决定了innodb重做日志缓存的大小，对于可能产生大量更新记录的大事务，增加innodb_log_buffer_size的大小，可以避免innodb在事务提交前就执行不必要的日志写入磁盘操作。</p><pre><code>innodb_log_buffer_size=10M</code></pre><h3 id="4-Mysql并发参数调整"><a href="#4-Mysql并发参数调整" class="headerlink" title="4. Mysql并发参数调整"></a>4. Mysql并发参数调整</h3><p>从实现上来说，MySQL Server 是多线程结构，包括后台线程和客户服务线程。多线程可以有效利用服务器资源，提高数据库的并发性能。在Mysql中，控制并发连接和线程的主要参数包括 max_connections、back_log、thread_cache_size、table_open_cahce。</p><h4 id="4-1-max-connections"><a href="#4-1-max-connections" class="headerlink" title="4.1 max_connections"></a>4.1 max_connections</h4><p>采用max_connections 控制允许连接到MySQL数据库的最大数量，默认值是 151。如果状态变量 connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败，这是可以考虑增大max_connections 的值。</p><p>Mysql 最大可支持的连接数，取决于很多因素，包括给定操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度，期望的响应时间等。在Linux 平台下，性能好的服务器，支持 500-1000 个连接不是难事，需要根据服务器性能进行评估设定。</p><h4 id="4-2-back-log"><a href="#4-2-back-log" class="headerlink" title="4.2 back_log"></a>4.2 back_log</h4><p>back_log 参数控制MySQL监听TCP端口时设置的积压请求栈大小。如果MySql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。5.6.6 版本之前默认值为 50 ， 之后的版本默认为 50 + （max_connections / 5）， 但最大不超过900。</p><p>如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大back_log 的值。</p><h4 id="4-3-table-open-cache"><a href="#4-3-table-open-cache" class="headerlink" title="4.3 table_open_cache"></a>4.3 table_open_cache</h4><p>该参数用来控制所有SQL语句执行线程可打开表缓存的数量， 而在执行SQL语句时，每一个SQL执行线程至少要打开 1 个表缓存。该参数的值应该根据设置的最大连接数 max_connections 以及每个连接执行关联查询中涉及的表的最大数量来设定 ：</p><p>​    max_connections x N ；</p><h4 id="4-4-thread-cache-size"><a href="#4-4-thread-cache-size" class="headerlink" title="4.4 thread_cache_size"></a>4.4 thread_cache_size</h4><p>为了加快连接数据库的速度，MySQL 会缓存一定数量的客户服务线程以备重用，通过参数 thread_cache_size 可控制 MySQL 缓存客户服务线程的数量。</p><h4 id="4-5-innodb-lock-wait-timeout"><a href="#4-5-innodb-lock-wait-timeout" class="headerlink" title="4.5 innodb_lock_wait_timeout"></a>4.5 innodb_lock_wait_timeout</h4><p>该参数是用来设置InnoDB 事务等待行锁的时间，默认值是50ms ， 可以根据需要进行动态设置。对于需要快速反馈的业务系统来说，可以将行锁的等待时间调小，以避免事务长时间挂起； 对于后台运行的批量处理程序来说， 可以将行锁的等待时间调大， 以避免发生大的回滚操作。</p><h3 id="5-Mysql锁问题"><a href="#5-Mysql锁问题" class="headerlink" title="5. Mysql锁问题"></a>5. Mysql锁问题</h3><h4 id="5-1-锁概述"><a href="#5-1-锁概述" class="headerlink" title="5.1 锁概述"></a>5.1 锁概述</h4><p>锁是计算机协调多个进程或线程并发访问某一资源的机制（避免争抢）。</p><p>在数据库中，除传统的计算资源（如 CPU、RAM、I/O 等）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><h4 id="5-2-锁分类"><a href="#5-2-锁分类" class="headerlink" title="5.2 锁分类"></a>5.2 锁分类</h4><p>从对数据操作的粒度分 ： </p><p>1） 表锁：操作时，会锁定整个表。</p><p>2） 行锁：操作时，会锁定当前操作行。</p><p>从对数据操作的类型分：</p><p>1） 读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。</p><p>2） 写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。</p><h4 id="5-3-Mysql-锁"><a href="#5-3-Mysql-锁" class="headerlink" title="5.3 Mysql 锁"></a>5.3 Mysql 锁</h4><p>相对其他数据库而言，MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。下表中罗列出了各存储引擎对锁的支持情况：<br>| 存储引擎 | 表级锁 | 行级锁 | 页面锁 |<br>| ——– | —— | —— | —— |<br>| MyISAM   | 支持   | 不支持 | 不支持 |<br>| InnoDB   | 支持   | 支持   | 不支持 |<br>| MEMORY   | 支持   | 不支持 | 不支持 |<br>| BDB      | 支持   | 不支持 | 支持   |</p><p>MySQL这3种锁的特性可大致归纳如下 ：</p><table><thead><tr><th>锁类型</th><th>特点</th></tr></thead><tbody><tr><td>表级锁</td><td>偏向MyISAM 存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。</td></tr><tr><td>行级锁</td><td>偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</td></tr><tr><td>页面锁</td><td>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</td></tr></tbody></table><p>从上述特点可见，很难笼统地说哪种锁更好，只能就具体应用的特点来说哪种锁更合适！仅从锁的角度来说：表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web 应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并查询的应用，如一些在线事务处理（OLTP）系统。</p><h4 id="5-2-MyISAM-表锁"><a href="#5-2-MyISAM-表锁" class="headerlink" title="5.2 MyISAM 表锁"></a>5.2 MyISAM 表锁</h4><p>MyISAM 存储引擎只支持表锁，这也是MySQL开始几个版本中唯一支持的锁类型。</p><h5 id="5-2-1-如何加表锁"><a href="#5-2-1-如何加表锁" class="headerlink" title="5.2.1 如何加表锁"></a>5.2.1 如何加表锁</h5><p>MyISAM 在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT 等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此，用户一般不需要直接用 LOCK TABLE 命令给 MyISAM 表显式加锁。</p><p>显示加表锁语法：</p><pre class=" language-SQL"><code class="language-SQL">加读锁 ： lock table table_name read;加写锁 ： lock table table_name write；</code></pre><h5 id="5-2-2-读锁案例"><a href="#5-2-2-读锁案例" class="headerlink" title="5.2.2 读锁案例"></a>5.2.2 读锁案例</h5><p>准备环境</p><pre class=" language-SQL"><code class="language-SQL">create database demo_03 default charset=utf8mb4;use demo_03;CREATE TABLE `tb_book` (  `id` INT(11) auto_increment,  `name` VARCHAR(50) DEFAULT NULL,  `publish_time` DATE DEFAULT NULL,  `status` CHAR(1) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=myisam DEFAULT CHARSET=utf8 ;INSERT INTO tb_book (id, name, publish_time, status) VALUES(NULL,'java编程思想','2088-08-01','1');INSERT INTO tb_book (id, name, publish_time, status) VALUES(NULL,'solr编程思想','2088-08-08','0');CREATE TABLE `tb_user` (  `id` INT(11) auto_increment,  `name` VARCHAR(50) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=myisam DEFAULT CHARSET=utf8 ;INSERT INTO tb_user (id, name) VALUES(NULL,'令狐冲');INSERT INTO tb_user (id, name) VALUES(NULL,'田伯光');</code></pre><p>客户端 一 ：</p><p>1）获得tb_book 表的读锁 </p><pre><code>lock table tb_book read;</code></pre><p>2） 执行查询操作</p><pre><code>select * from tb_book;</code></pre><p><img src="/2021/01/23/mysql-advanced-3/1553906896564.png" alt="1553906896564"> </p><p>可以正常执行 ， 查询出数据。</p><p>客户端 二 ：</p><p>3） 执行查询操作</p><pre><code>select * from tb_book;</code></pre><p><img src="/2021/01/23/mysql-advanced-3/1553907044500.png" alt="1553907044500"> </p><p>客户端 一 ：</p><p>4）查询未锁定的表</p><pre><code>select name from tb_seller;</code></pre><p><img src="/2021/01/23/mysql-advanced-3/1553908913515.png" alt="1553908913515"> </p><p>客户端 二 ：</p><p>5）查询未锁定的表</p><pre><code>select name from tb_seller;</code></pre><p><img src="/2021/01/23/mysql-advanced-3/1553908973840.png" alt="1553908973840"> </p><p>可以正常查询出未锁定的表；</p><p>客户端 一 ：</p><p>6） 执行插入操作 </p><pre><code>insert into tb_book values(null,'Mysql高级','2088-01-01','1');</code></pre><p><img src="/2021/01/23/mysql-advanced-3/1553907198462.png" alt="1553907198462"> </p><p>执行插入， 直接报错 ， 由于当前tb_book 获得的是 读锁， 不能执行更新操作。</p><p>客户端 二 ：</p><p>7） 执行插入操作 </p><pre><code>insert into tb_book values(null,'Mysql高级','2088-01-01','1');</code></pre><p><img src="/2021/01/23/mysql-advanced-3/1553907403957.png" alt="1553907403957"> </p><p>当在客户端一中释放锁指令 unlock tables  后 ， 客户端二中的 inesrt 语句 ， 立即执行 ；</p><h5 id="5-2-3-写锁案例"><a href="#5-2-3-写锁案例" class="headerlink" title="5.2.3 写锁案例"></a>5.2.3 写锁案例</h5><p>客户端 一 :</p><p>1）获得tb_book 表的写锁 </p><pre><code>lock table tb_book write ;</code></pre><p>2）执行查询操作</p><pre><code>select * from tb_book ;</code></pre><p><img src="/2021/01/23/mysql-advanced-3/1553907849829.png" alt="1553907849829"> </p><p>查询操作执行成功；</p><p>3）执行更新操作</p><pre><code>update tb_book set name = 'java编程思想（第二版）' where id = 1;</code></pre><p><img src="/2021/01/23/mysql-advanced-3/1553907875221.png" alt="1553907875221"> </p><p>更新操作执行成功 ；</p><p>客户端 二 :</p><p>4）执行查询操作</p><pre><code>select * from tb_book ;</code></pre><p><img src="/2021/01/23/mysql-advanced-3/1553908019755.png" alt="1553908019755"> </p><p>当在客户端一中释放锁指令 unlock tables  后 ， 客户端二中的 select 语句 ， 立即执行 ；</p><p><img src="/2021/01/23/mysql-advanced-3/1553908131373.png" alt="1553908131373"> </p><h5 id="5-2-4-结论"><a href="#5-2-4-结论" class="headerlink" title="5.2.4 结论"></a>5.2.4 结论</h5><p>锁模式的相互兼容性如表中所示：</p><p><img src="/2021/01/23/mysql-advanced-3/1553905621992.png" alt="1553905621992"> </p><p>由上表可见： </p><p>​    1） 对MyISAM 表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；</p><p>​    2） 对MyISAM 表的写操作，则会阻塞其他用户对同一表的读和写操作；</p><p>​    简而言之，就是读锁会阻塞写，但是不会阻塞读。而写锁，则既会阻塞读，又会阻塞写。</p><p>此外，MyISAM 的读写锁调度是写优先，这也是MyISAM不适合做写为主的表的存储引擎的原因。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</p><h5 id="5-2-5-查看锁的争用情况"><a href="#5-2-5-查看锁的争用情况" class="headerlink" title="5.2.5 查看锁的争用情况"></a>5.2.5 查看锁的争用情况</h5><pre><code>show open tables；</code></pre><p><img src="/2021/01/23/mysql-advanced-3/1556443073322.png" alt="1556443073322"> </p><p>In_user : 表当前被查询使用的次数。如果该数为零，则表是打开的，但是当前没有被使用。</p><p>Name_locked：表名称是否被锁定。名称锁定用于取消表或对表进行重命名等操作。</p><pre><code>show status like 'Table_locks%';</code></pre><p><img src="/2021/01/23/mysql-advanced-3/1556443170082.png" alt="1556443170082"> </p><p>Table_locks_immediate ： 指的是能够立即获得表级锁的次数，每立即获取锁，值加1。</p><p>Table_locks_waited ： 指的是不能立即获取表级锁而需要等待的次数，每等待一次，该值加1，此值高说明存在着较为严重的表级锁争用情况。</p><h4 id="5-3-InnoDB-行锁"><a href="#5-3-InnoDB-行锁" class="headerlink" title="5.3 InnoDB 行锁"></a>5.3 InnoDB 行锁</h4><h5 id="5-3-1-行锁介绍"><a href="#5-3-1-行锁介绍" class="headerlink" title="5.3.1 行锁介绍"></a>5.3.1 行锁介绍</h5><p>行锁特点 ：偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</p><p>InnoDB 与 MyISAM 的最大不同有两点：一是支持事务；二是 采用了行级锁。</p><h5 id="5-3-2-背景知识"><a href="#5-3-2-背景知识" class="headerlink" title="5.3.2 背景知识"></a>5.3.2 背景知识</h5><p><strong>事务及其ACID属性</strong></p><p>事务是由一组SQL语句组成的逻辑处理单元。</p><p>事务具有以下4个特性，简称为事务ACID属性。</p><table><thead><tr><th>ACID属性</th><th>含义</th></tr></thead><tbody><tr><td>原子性（Atomicity）</td><td>事务是一个原子操作单元，其对数据的修改，要么全部成功，要么全部失败。</td></tr><tr><td>一致性（Consistent）</td><td>在事务开始和完成时，数据都必须保持一致状态。</td></tr><tr><td>隔离性（Isolation）</td><td>数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的 “独立” 环境下运行。</td></tr><tr><td>持久性（Durable）</td><td>事务完成之后，对于数据的修改是永久的。</td></tr></tbody></table><p><strong>并发事务处理带来的问题</strong></p><table><thead><tr><th>问题</th><th>含义</th></tr></thead><tbody><tr><td>丢失更新（Lost Update）</td><td>当两个或多个事务选择同一行，最初的事务修改的值，会被后面的事务修改的值覆盖。</td></tr><tr><td>脏读（Dirty Reads）</td><td>当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</td></tr><tr><td>不可重复读（Non-Repeatable Reads）</td><td>一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现和以前读出的数据不一致。</td></tr><tr><td>幻读（Phantom Reads）</td><td>一个事务按照相同的查询条件重新读取以前查询过的数据，却发现其他事务插入了满足其查询条件的新数据。</td></tr></tbody></table><p><strong>事务隔离级别</strong></p><p>为了解决上述提到的事务并发问题，数据库提供一定的事务隔离机制来解决这个问题。数据库的事务隔离越严格，并发副作用越小，但付出的代价也就越大，因为事务隔离实质上就是使用事务在一定程度上“串行化” 进行，这显然与“并发” 是矛盾的。 </p><p>数据库的隔离级别有4个，由低到高依次为Read uncommitted、Read committed、Repeatable read、Serializable，这四个级别可以逐个解决脏写、脏读、不可重复读、幻读这几类问题。</p><table><thead><tr><th>隔离级别</th><th>丢失更新</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable read（默认）</td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>备注 ： √  代表可能出现 ， × 代表不会出现 。</p><p>Mysql 的数据库的默认隔离级别为 Repeatable read ， 查看方式：</p><pre><code>show variables like 'tx_isolation';</code></pre><p><img src="/2021/01/23/mysql-advanced-3/1554331600009.png" alt="1554331600009">  </p><h5 id="5-3-3-InnoDB-的行锁模式"><a href="#5-3-3-InnoDB-的行锁模式" class="headerlink" title="5.3.3 InnoDB 的行锁模式"></a>5.3.3 InnoDB 的行锁模式</h5><p>InnoDB  实现了以下两种类型的行锁。</p><ul><li>共享锁（S）：又称为读锁，简称S锁，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。</li><li>排他锁（X）：又称为写锁，简称X锁，排他锁就是不能与其他锁并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行读取和修改。</li></ul><p>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁（X)；</p><p>对于普通SELECT语句，InnoDB不会加任何锁；</p><p>可以通过以下语句显示给记录集加共享锁或排他锁 。</p><pre><code>共享锁（S）：SELECT * FROM table_name WHERE ... LOCK IN SHARE MODE排他锁（X) ：SELECT * FROM table_name WHERE ... FOR UPDATE</code></pre><h5 id="5-3-4-案例准备工作"><a href="#5-3-4-案例准备工作" class="headerlink" title="5.3.4 案例准备工作"></a>5.3.4 案例准备工作</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> test_innodb_lock<span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    sex <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span> <span class="token operator">=</span> <span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> test_innodb_lock <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'100'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> test_innodb_lock <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> test_innodb_lock <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'400'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> test_innodb_lock <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'500'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> test_innodb_lock <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'600'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> test_innodb_lock <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'700'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> test_innodb_lock <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'800'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> test_innodb_lock <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'900'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> test_innodb_lock <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'200'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_test_innodb_lock_id <span class="token keyword">on</span> test_innodb_lock<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_test_innodb_lock_name <span class="token keyword">on</span> test_innodb_lock<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="5-3-5-行锁基本演示"><a href="#5-3-5-行锁基本演示" class="headerlink" title="5.3.5 行锁基本演示"></a>5.3.5 行锁基本演示</h5><table><thead><tr><th>Session-1</th><th>Session-2</th></tr></thead><tbody><tr><td><img src="/2021/01/23/mysql-advanced-3/1554354615030.png" alt="1554354615030">      关闭自动提交功能</td><td><img src="/2021/01/23/mysql-advanced-3/1554354601867.png" alt="1554354601867">  关闭自动提交功能</td></tr><tr><td><img src="/2021/01/23/mysql-advanced-3/1554354713628.png" alt="1554354713628"> 可以正常的查询出全部的数据</td><td><img src="/2021/01/23/mysql-advanced-3/1554354717336.png" alt="1554354717336"> 可以正常的查询出全部的数据</td></tr><tr><td><img src="/2021/01/23/mysql-advanced-3/1554354830589.png" alt="1554354830589">查询id 为3的数据 ；</td><td><img src="/2021/01/23/mysql-advanced-3/1554354832708.png" alt="1554354832708">获取id为3的数据 ；</td></tr><tr><td><img src="/2021/01/23/mysql-advanced-3/1554382789984.png" alt="1554382789984"> 更新id为3的数据，但是不提交；</td><td><img src="/2021/01/23/mysql-advanced-3/1554382905352.png" alt="1554382905352"> 更新id为3 的数据， 出于等待状态</td></tr><tr><td><img src="/2021/01/23/mysql-advanced-3/1554382977653.png" alt="1554382977653"> 通过commit， 提交事务</td><td><img src="/2021/01/23/mysql-advanced-3/1554383044542.png" alt="1554383044542"> 解除阻塞，更新正常进行</td></tr><tr><td>以上， 操作的都是同一行的数据，接下来，演示不同行的数据 ：</td><td></td></tr><tr><td><img src="/2021/01/23/mysql-advanced-3/1554385220580.png" alt="1554385220580"> 更新id为3数据，正常的获取到行锁 ， 执行更新 ；</td><td><img src="/2021/01/23/mysql-advanced-3/1554385236768.png" alt="1554385236768"> 由于与Session-1 操作不是同一行，获取当前行锁，执行更新；</td></tr></tbody></table><h5 id="5-3-6-无索引行锁升级为表锁"><a href="#5-3-6-无索引行锁升级为表锁" class="headerlink" title="5.3.6 无索引行锁升级为表锁"></a>5.3.6 无索引行锁升级为表锁</h5><p>如果不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，实际效果跟表锁一样。</p><p>查看当前表的索引 ： show  index  from test_innodb_lock ;</p><p><img src="/2021/01/23/mysql-advanced-3/1554385956215.png" alt="1554385956215"> </p><table><thead><tr><th>Session-1</th><th>Session-2</th></tr></thead><tbody><tr><td>关闭事务的自动提交<img src="/2021/01/23/mysql-advanced-3/1554386287454.png" alt="1554386287454"></td><td>关闭事务的自动提交<img src="/2021/01/23/mysql-advanced-3/1554386312524.png" alt="1554386312524"></td></tr><tr><td>执行更新语句 ：<img src="/2021/01/23/mysql-advanced-3/1554386654793.png" alt="1554386654793"></td><td>执行更新语句， 但处于阻塞状态：<img src="/2021/01/23/mysql-advanced-3/1554386685610.png" alt="1554386685610"></td></tr><tr><td>提交事务：<img src="/2021/01/23/mysql-advanced-3/1554386721653.png" alt="1554386721653"></td><td>解除阻塞，执行更新成功 ：<img src="/2021/01/23/mysql-advanced-3/1554386750004.png" alt="1554386750004"></td></tr><tr><td></td><td>执行提交操作 ：<img src="/2021/01/23/mysql-advanced-3/1554386804807.png" alt="1554386804807"></td></tr></tbody></table><p>由于 执行更新时 ， name字段本来为varchar类型， 我们是作为数组类型使用，存在类型转换，索引失效，最终行锁变为表锁 ；</p><h5 id="5-3-7-间隙锁危害"><a href="#5-3-7-间隙锁危害" class="headerlink" title="5.3.7 间隙锁危害"></a>5.3.7 间隙锁危害</h5><p>当我们用范围条件，而不是使用相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据进行加锁； 对于键值在条件范围内但并不存在的记录，叫做 “间隙（GAP）” ， InnoDB也会对这个 “间隙” 加锁，这种锁机制就是所谓的 间隙锁（Next-Key锁） 。</p><p>示例 ： </p><table><thead><tr><th>Session-1</th><th>Session-2</th></tr></thead><tbody><tr><td>关闭事务自动提交 <img src="/2021/01/23/mysql-advanced-3/1554387987130.png" alt="1554387987130"></td><td>关闭事务自动提交<img src="/2021/01/23/mysql-advanced-3/1554387994533.png" alt="1554387994533"></td></tr><tr><td>根据id范围更新数据<img src="/2021/01/23/mysql-advanced-3/1554388492478.png" alt="1554388492478"></td><td></td></tr><tr><td></td><td>插入id为2的记录， 出于阻塞状态<img src="/2021/01/23/mysql-advanced-3/1554388515936.png" alt="1554388515936"></td></tr><tr><td>提交事务 ；<img src="/2021/01/23/mysql-advanced-3/1554388149305.png" alt="1554388149305"></td><td></td></tr><tr><td></td><td>解除阻塞 ， 执行插入操作 ：<img src="/2021/01/23/mysql-advanced-3/1554388548562.png" alt="1554388548562"></td></tr><tr><td></td><td>提交事务 ：</td></tr></tbody></table><h5 id="5-3-8-InnoDB-行锁争用情况"><a href="#5-3-8-InnoDB-行锁争用情况" class="headerlink" title="5.3.8 InnoDB 行锁争用情况"></a>5.3.8 InnoDB 行锁争用情况</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span>  <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'innodb_row_lock%'</span><span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-3/1556455943670.png" alt="1556455943670"></p><pre><code>Innodb_row_lock_current_waits: 当前正在等待锁定的数量Innodb_row_lock_time: 从系统启动到现在锁定总时间长度Innodb_row_lock_time_avg:每次等待所花平均时长Innodb_row_lock_time_max:从系统启动到现在等待最长的一次所花的时间Innodb_row_lock_waits: 系统启动后到现在总共等待的次数当等待的次数很高，而且每次等待的时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手制定优化计划。</code></pre><h5 id="5-3-9-总结"><a href="#5-3-9-总结" class="headerlink" title="5.3.9 总结"></a>5.3.9 总结</h5><p>InnoDB存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面带来了性能损耗可能比表锁会更高一些，但是在整体并发处理能力方面要远远由于MyISAM的表锁的。当系统并发量较高的时候，InnoDB的整体性能和MyISAM相比就会有比较明显的优势。</p><p>但是，InnoDB的行级锁同样也有其脆弱的一面，当我们使用不当的时候，可能会让InnoDB的整体性能表现不仅不能比MyISAM高，甚至可能会更差。</p><p>优化建议：</p><ul><li>尽可能让所有数据检索都能通过索引来完成，避免无索引行锁升级为表锁。</li><li>合理设计索引，尽量缩小锁的范围</li><li>尽可能减少索引条件，及索引范围，避免间隙锁</li><li>尽量控制事务大小，减少锁定资源量和时间长度</li><li>尽可使用低级别事务隔离（但是需要业务层面满足需求）</li></ul><h3 id="6-常用SQL技巧"><a href="#6-常用SQL技巧" class="headerlink" title="6. 常用SQL技巧"></a>6. 常用SQL技巧</h3><h4 id="6-1-SQL执行顺序"><a href="#6-1-SQL执行顺序" class="headerlink" title="6.1 SQL执行顺序"></a>6.1 SQL执行顺序</h4><p>编写顺序</p><pre class=" language-SQL"><code class="language-SQL">SELECT DISTINCT    <select list="">FROM    <left_table> <join_type>JOIN    <right_table> ON <join_condition>WHERE    <where_condition>GROUP BY    <group_by_list>HAVING    <having_condition>ORDER BY    <order_by_condition>LIMIT    <limit_params></limit_params></order_by_condition></having_condition></group_by_list></where_condition></join_condition></right_table></join_type></left_table></select></code></pre><p>执行顺序</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">FROM</span>    <span class="token operator">&lt;</span>left_table<span class="token operator">></span><span class="token keyword">ON</span>         <span class="token operator">&lt;</span>join_condition<span class="token operator">></span><span class="token operator">&lt;</span>join_type<span class="token operator">></span>        <span class="token keyword">JOIN</span>    <span class="token operator">&lt;</span>right_table<span class="token operator">></span><span class="token keyword">WHERE</span>        <span class="token operator">&lt;</span>where_condition<span class="token operator">></span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span>     <span class="token operator">&lt;</span>group_by_list<span class="token operator">></span><span class="token keyword">HAVING</span>        <span class="token operator">&lt;</span>having_condition<span class="token operator">></span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span>        <span class="token operator">&lt;</span><span class="token keyword">select</span> list<span class="token operator">></span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span>    <span class="token operator">&lt;</span>order_by_condition<span class="token operator">></span><span class="token keyword">LIMIT</span>        <span class="token operator">&lt;</span>limit_params<span class="token operator">></span></code></pre><h4 id="6-2-正则表达式使用"><a href="#6-2-正则表达式使用" class="headerlink" title="6.2 正则表达式使用"></a>6.2 正则表达式使用</h4><p>正则表达式（Regular Expression）是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>在字符串开始处进行匹配</td></tr><tr><td>$</td><td>在字符串末尾处进行匹配</td></tr><tr><td>.</td><td>匹配任意单个字符, 包括换行符</td></tr><tr><td>[…]</td><td>匹配出括号内的任意字符</td></tr><tr><td>[^…]</td><td>匹配不出括号内的任意字符</td></tr><tr><td>a*</td><td>匹配零个或者多个a(包括空串)</td></tr><tr><td>a+</td><td>匹配一个或者多个a(不包括空串)</td></tr><tr><td>a?</td><td>匹配零个或者一个a</td></tr><tr><td>a1\</td><td>a2</td><td>匹配a1或a2</td></tr><tr><td>a(m)</td><td>匹配m个a</td></tr><tr><td>a(m,)</td><td>至少匹配m个a</td></tr><tr><td>a(m,n)</td><td>匹配m个a 到 n个a</td></tr><tr><td>a(,n)</td><td>匹配0到n个a</td></tr><tr><td>(…)</td><td>将模式元素组成单一元素</td></tr></tbody></table><pre><code>select * from emp where name regexp '^T';select * from emp where name regexp '2$';select * from emp where name regexp '[uvw]';</code></pre><h4 id="6-3-MySQL-常用函数"><a href="#6-3-MySQL-常用函数" class="headerlink" title="6.3 MySQL 常用函数"></a>6.3 MySQL 常用函数</h4><p>数字函数</p><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td>ABS</td><td>求绝对值</td></tr><tr><td>SQRT</td><td>求二次方根</td></tr><tr><td>MOD</td><td>求余数</td></tr><tr><td>CEIL 和 CEILING</td><td>两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</td></tr><tr><td>FLOOR</td><td>向下取整，返回值转化为一个BIGINT</td></tr><tr><td>RAND</td><td>生成一个0~1之间的随机数，传入整数参数是，用来产生重复序列</td></tr><tr><td>ROUND</td><td>对所传参数进行四舍五入</td></tr><tr><td>SIGN</td><td>返回参数的符号</td></tr><tr><td>POW 和 POWER</td><td>两个函数的功能相同，都是所传参数的次方的结果值</td></tr><tr><td>SIN</td><td>求正弦值</td></tr><tr><td>ASIN</td><td>求反正弦值，与函数 SIN 互为反函数</td></tr><tr><td>COS</td><td>求余弦值</td></tr><tr><td>ACOS</td><td>求反余弦值，与函数 COS 互为反函数</td></tr><tr><td>TAN</td><td>求正切值</td></tr><tr><td>ATAN</td><td>求反正切值，与函数 TAN 互为反函数</td></tr><tr><td>COT</td><td>求余切值</td></tr></tbody></table><p>字符串函数</p><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td>LENGTH</td><td>计算字符串长度函数，返回字符串的字节长度</td></tr><tr><td>CONCAT</td><td>合并字符串函数，返回结果为连接参数产生的字符串，参数可以使一个或多个</td></tr><tr><td>INSERT</td><td>替换字符串函数</td></tr><tr><td>LOWER</td><td>将字符串中的字母转换为小写</td></tr><tr><td>UPPER</td><td>将字符串中的字母转换为大写</td></tr><tr><td>LEFT</td><td>从左侧字截取符串，返回字符串左边的若干个字符</td></tr><tr><td>RIGHT</td><td>从右侧字截取符串，返回字符串右边的若干个字符</td></tr><tr><td>TRIM</td><td>删除字符串左右两侧的空格</td></tr><tr><td>REPLACE</td><td>字符串替换函数，返回替换后的新字符串</td></tr><tr><td>SUBSTRING</td><td>截取字符串，返回从指定位置开始的指定长度的字符换</td></tr><tr><td>REVERSE</td><td>字符串反转（逆序）函数，返回与原始字符串顺序相反的字符串</td></tr></tbody></table><p>日期函数</p><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td>CURDATE 和 CURRENT_DATE</td><td>两个函数作用相同，返回当前系统的日期值</td></tr><tr><td>CURTIME 和 CURRENT_TIME</td><td>两个函数作用相同，返回当前系统的时间值</td></tr><tr><td>NOW 和  SYSDATE</td><td>两个函数作用相同，返回当前系统的日期和时间值</td></tr><tr><td>MONTH</td><td>获取指定日期中的月份</td></tr><tr><td>MONTHNAME</td><td>获取指定日期中的月份英文名称</td></tr><tr><td>DAYNAME</td><td>获取指定曰期对应的星期几的英文名称</td></tr><tr><td>DAYOFWEEK</td><td>获取指定日期对应的一周的索引位置值</td></tr><tr><td>WEEK</td><td>获取指定日期是一年中的第几周，返回值的范围是否为 0〜52 或 1〜53</td></tr><tr><td>DAYOFYEAR</td><td>获取指定曰期是一年中的第几天，返回值范围是1~366</td></tr><tr><td>DAYOFMONTH</td><td>获取指定日期是一个月中是第几天，返回值范围是1~31</td></tr><tr><td>YEAR</td><td>获取年份，返回值范围是 1970〜2069</td></tr><tr><td>TIME_TO_SEC</td><td>将时间参数转换为秒数</td></tr><tr><td>SEC_TO_TIME</td><td>将秒数转换为时间，与TIME_TO_SEC 互为反函数</td></tr><tr><td>DATE_ADD 和 ADDDATE</td><td>两个函数功能相同，都是向日期添加指定的时间间隔</td></tr><tr><td>DATE_SUB 和 SUBDATE</td><td>两个函数功能相同，都是向日期减去指定的时间间隔</td></tr><tr><td>ADDTIME</td><td>时间加法运算，在原始时间上添加指定的时间</td></tr><tr><td>SUBTIME</td><td>时间减法运算，在原始时间上减去指定的时间</td></tr><tr><td>DATEDIFF</td><td>获取两个日期之间间隔，返回参数 1 减去参数 2 的值</td></tr><tr><td>DATE_FORMAT</td><td>格式化指定的日期，根据参数返回指定格式的值</td></tr><tr><td>WEEKDAY</td><td>获取指定日期在一周内的对应的工作日索引</td></tr></tbody></table><p>聚合函数</p><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td>MAX</td><td>查询指定列的最大值</td></tr><tr><td>MIN</td><td>查询指定列的最小值</td></tr><tr><td>COUNT</td><td>统计查询结果的行数</td></tr><tr><td>SUM</td><td>求和，返回指定列的总和</td></tr><tr><td>AVG</td><td>求平均值，返回指定列数据的平均值</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库优化之组合拳(三) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库优化之组合拳(二)</title>
      <link href="/2021/01/23/mysql-advanced-2/"/>
      <url>/2021/01/23/mysql-advanced-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>非原创图文,图文来源于黑马官网,此处仅作为备份学习</p></blockquote><a id="more"></a><h2 id="MySQL数据库优化总概"><a href="#MySQL数据库优化总概" class="headerlink" title="MySQL数据库优化总概"></a>MySQL数据库优化总概</h2><table><thead><tr><th>组合拳（一）</th><th>🚩组合拳（二）</th><th>组合拳（三）</th><th>组合拳（四）</th></tr></thead><tbody><tr><td>索引</td><td>体系结构</td><td>应用优化</td><td>MySQL 常用工具</td></tr><tr><td>视图</td><td>存储引擎</td><td>查询缓存优化</td><td>MySQL 日志</td></tr><tr><td>存储过程和函数</td><td>优化SQL步骤</td><td>内存管理及优化</td><td>MySQL 主从复制</td></tr><tr><td>触发器</td><td>索引使用</td><td>MySQL锁问题</td><td></td></tr><tr><td></td><td>SQL优化</td><td>常用SQL技巧</td></tr></tbody></table><h3 id="1-Mysql的体系结构概览"><a href="#1-Mysql的体系结构概览" class="headerlink" title="1. Mysql的体系结构概览"></a>1. Mysql的体系结构概览</h3><p><img src="/2021/01/23/mysql-advanced-2/000001.jpg" alt="171214401286615"> </p><p>整个MySQL Server由以下组成</p><ul><li>Connection Pool : 连接池组件</li><li>Management Services &amp; Utilities : 管理服务和工具组件</li><li>SQL Interface : SQL接口组件</li><li>Parser : 查询分析器组件</li><li>Optimizer : 优化器组件</li><li>Caches &amp; Buffers : 缓冲池组件</li><li>Pluggable Storage Engines : 存储引擎</li><li>File System : 文件系统</li></ul><p>1） 连接层</p><p>最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端/服务端工具实现的类似于 TCP/IP的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p><p>2） 服务层</p><p>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如 过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等， 最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p><p>3） 引擎层</p><p>存储引擎层， 存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。</p><p>4）存储层</p><p>数据存储层， 主要是将数据存储在文件系统之上，并完成与存储引擎的交互。</p><p>和其他数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎上，插件式的存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p><h3 id="2-存储引擎"><a href="#2-存储引擎" class="headerlink" title="2. 存储引擎"></a>2. 存储引擎</h3><h4 id="2-1-存储引擎概述"><a href="#2-1-存储引擎概述" class="headerlink" title="2.1 存储引擎概述"></a>2.1 存储引擎概述</h4><p>​    和大多数的数据库不同, MySQL中有一个存储引擎的概念, 针对不同的存储需求可以选择最优的存储引擎。</p><p>​    存储引擎就是存储数据，建立索引，更新查询数据等等技术的实现方式 。存储引擎是基于表的，而不是基于库的。所以存储引擎也可被称为表类型。</p><p>​    Oracle，SqlServer等数据库只有一种存储引擎。MySQL提供了插件式的存储引擎架构。所以MySQL存在多种存储引擎，可以根据需要使用相应引擎，或者编写存储引擎。</p><p>​    MySQL5.0支持的存储引擎包含 ： InnoDB 、MyISAM 、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED等，其中InnoDB和BDB提供事务安全表，其他存储引擎是非事务安全表。</p><p>可以通过指定 show engines ， 来查询当前数据库支持的存储引擎 ： </p><p><img src="/2021/01/23/mysql-advanced-2/1551186043529.png" alt="1551186043529"> </p><p>创建新表时如果不指定存储引擎，那么系统就会使用默认的存储引擎，MySQL5.5之前的默认存储引擎是MyISAM，5.5之后就改为了InnoDB。</p><p>查看Mysql数据库默认的存储引擎 ， 指令 ：</p><pre><code> show variables like '%storage_engine%' ； </code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556086372754.png" alt="1556086372754">       </p><h4 id="2-2-各种存储引擎特性"><a href="#2-2-各种存储引擎特性" class="headerlink" title="2.2 各种存储引擎特性"></a>2.2 各种存储引擎特性</h4><p>下面重点介绍几种常用的存储引擎， 并对比各个存储引擎之间的区别， 如下表所示 ： </p><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>MEMORY</th><th>MERGE</th><th>NDB</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td><td>没有</td><td>有</td></tr><tr><td>事务安全</td><td>==支持==</td><td></td><td></td><td></td><td></td></tr><tr><td>锁机制</td><td>==行锁(适合高并发)==</td><td>==表锁==</td><td>表锁</td><td>表锁</td><td>行锁</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td></td><td></td><td>支持</td><td></td><td></td></tr><tr><td>全文索引</td><td>支持(5.6版本之后)</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>集群索引</td><td>支持</td><td></td><td></td><td></td><td></td></tr><tr><td>数据索引</td><td>支持</td><td></td><td>支持</td><td></td><td>支持</td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>数据可压缩</td><td></td><td>支持</td><td></td><td></td><td></td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td><td>低</td><td>低</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td><td>低</td><td>高</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>==支持==</td><td></td><td></td><td></td></tr></tbody></table><p>下面我们将重点介绍最长使用的两种存储引擎： InnoDB、MyISAM ， 另外两种 MEMORY、MERGE ， 了解即可。</p><h5 id="2-2-1-InnoDB"><a href="#2-2-1-InnoDB" class="headerlink" title="2.2.1 InnoDB"></a>2.2.1 InnoDB</h5><p>​    InnoDB存储引擎是Mysql的默认存储引擎。InnoDB存储引擎提供了具有提交、回滚、崩溃恢复能力的事务安全。但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些，并且会占用更多的磁盘空间以保留数据和索引。</p><p>InnoDB存储引擎不同于其他存储引擎的特点 ： </p><p><strong>事务控制</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> goods_innodb<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> goods_innodb<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'Meta20'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556075130115.png" alt="1556075130115"> </p><p>测试，发现在InnoDB中是存在事务的 ；</p><p><strong>外键约束</strong></p><p>​    MySQL支持外键的存储引擎只有InnoDB ， 在创建外键的时候， 要求父表必须有对应的索引 ， 子表在创建外键的时候， 也会自动的创建对应的索引。</p><p>​    下面两张表中 ， country_innodb是父表 ， country_id为主键索引，city_innodb表是子表，country_id字段为外键，对应于country_innodb表的主键country_id 。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> country_innodb<span class="token punctuation">(</span>    country_id <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    country_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>country_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> city_innodb<span class="token punctuation">(</span>    city_id <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    city_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    country_id <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>city_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">key</span> idx_fk_country_id<span class="token punctuation">(</span>country_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>fk_city_country<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>country_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> country_innodb<span class="token punctuation">(</span>country_id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">RESTRICT</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> country_innodb <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'China'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'America'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'Japan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> city_innodb <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'Xian'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'NewYork'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'BeiJing'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在创建索引时， 可以指定在删除、更新父表时，对子表进行的相应操作，包括 RESTRICT、CASCADE、SET NULL 和 NO ACTION。</p><p>RESTRICT和NO ACTION相同， 是指限制在子表有关联记录的情况下， 父表不能更新；</p><p>CASCADE表示父表在更新或者删除时，更新或者删除子表对应的记录；</p><p>SET NULL 则表示父表在更新或者删除的时候，子表的对应字段被SET NULL 。</p><p>针对上面创建的两个表， 子表的外键指定是ON DELETE RESTRICT ON UPDATE CASCADE 方式的， 那么在主表删除记录的时候， 如果子表有对应记录， 则不允许删除， 主表在更新记录的时候， 如果子表有对应记录， 则子表对应更新 。</p><p>表中数据如下图所示 ： </p><p><img src="/2021/01/23/mysql-advanced-2/1556087540767.png" alt="1556087540767"> </p><p>外键信息可以使用如下两种方式查看 ： </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> city_innodb <span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556087611295.png" alt="1556087611295">     </p><p>删除country_id为1 的country数据： </p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">delete</span> <span class="token keyword">from</span> country_innodb <span class="token keyword">where</span> country_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556087719145.png" alt="1556087719145"> </p><p>更新主表country表的字段 country_id : </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> country_innodb <span class="token keyword">set</span> country_id <span class="token operator">=</span> <span class="token number">100</span> <span class="token keyword">where</span> country_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556087759615.png" alt="1556087759615">  </p><p>更新后， 子表的数据信息为 ： </p><p><img src="/2021/01/23/mysql-advanced-2/1556087793738.png" alt="1556087793738">  </p><p><strong>存储方式</strong>    </p><p>InnoDB 存储表和索引有以下两种方式 ： </p><p>①. 使用共享表空间存储， 这种方式创建的表的表结构保存在.frm文件中， 数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path定义的表空间中，可以是多个文件。</p><p>②. 使用多表空间存储， 这种方式创建的表的表结构仍然存在 .frm 文件中，但是每个表的数据和索引单独保存在 .ibd 中。</p><p><img src="/2021/01/23/mysql-advanced-2/1556075336630.png" alt="1556075336630"> </p><h5 id="2-2-2-MyISAM"><a href="#2-2-2-MyISAM" class="headerlink" title="2.2.2 MyISAM"></a>2.2.2 MyISAM</h5><p>​    MyISAM 不支持事务、也不支持外键，其优势是访问的速度快，对事务的完整性没有要求或者以SELECT、INSERT为主的应用基本上都可以使用这个引擎来创建表 。有以下两个比较重要的特点： </p><p><strong>不支持事务</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> goods_myisam<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>myisam <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-2/1551347590309.png" alt="1551347590309"> </p><p>通过测试，我们发现，在MyISAM存储引擎中，是没有事务控制的 ；</p><p><strong>文件存储方式</strong></p><p>每个MyISAM在磁盘上存储成3个文件，其文件名都和表名相同，但拓展名分别是 ： </p><p>.frm (存储表定义)；</p><p>.MYD(MYData , 存储数据)；</p><p>.MYI(MYIndex , 存储索引)；</p><p><img src="/2021/01/23/mysql-advanced-2/1556075073836.png" alt="1556075073836"> </p><h5 id="2-2-3-MEMORY"><a href="#2-2-3-MEMORY" class="headerlink" title="2.2.3 MEMORY"></a>2.2.3 MEMORY</h5><p>​    Memory存储引擎将表的数据存放在内存中。每个MEMORY表实际对应一个磁盘文件，格式是.frm ，该文件中只存储表的结构，而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。MEMORY 类型的表访问非常地快，因为他的数据是存放在内存中的，并且默认使用HASH索引 ， 但是服务一旦关闭，表中的数据就会丢失。</p><h5 id="2-2-4-MERGE"><a href="#2-2-4-MERGE" class="headerlink" title="2.2.4 MERGE"></a>2.2.4 MERGE</h5><p>​    MERGE存储引擎是一组MyISAM表的组合，这些MyISAM表必须结构完全相同，MERGE表本身并没有存储数据，对MERGE类型的表可以进行查询、更新、删除操作，这些操作实际上是对内部的MyISAM表进行的。</p><p>​    对于MERGE类型表的插入操作，是通过INSERT_METHOD子句定义插入的表，可以有3个不同的值，使用FIRST 或 LAST 值使得插入操作被相应地作用在第一或者最后一个表上，不定义这个子句或者定义为NO，表示不能对这个MERGE表执行插入操作。</p><p>​    可以对MERGE表进行DROP操作，但是这个操作只是删除MERGE表的定义，对内部的表是没有任何影响的。</p><p><img src="/2021/01/23/mysql-advanced-2/1556076359503.png" alt="1556076359503"> </p><p>下面是一个创建和使用MERGE表的示例 ： </p><p>1）. 创建3个测试表 order_1990, order_1991, order_all , 其中order_all是前两个表的MERGE表 ： </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> order_1990<span class="token punctuation">(</span>    order_id <span class="token keyword">int</span> <span class="token punctuation">,</span>    order_money <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    order_address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>order_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span> <span class="token operator">=</span> myisam <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> order_1991<span class="token punctuation">(</span>    order_id <span class="token keyword">int</span> <span class="token punctuation">,</span>    order_money <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    order_address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>order_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span> <span class="token operator">=</span> myisam <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> order_all<span class="token punctuation">(</span>    order_id <span class="token keyword">int</span> <span class="token punctuation">,</span>    order_money <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    order_address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>order_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span> <span class="token operator">=</span> <span class="token keyword">merge</span> <span class="token keyword">union</span> <span class="token operator">=</span> <span class="token punctuation">(</span>order_1990<span class="token punctuation">,</span>order_1991<span class="token punctuation">)</span> INSERT_METHOD<span class="token operator">=</span><span class="token keyword">LAST</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><p>2）. 分别向两张表中插入记录 </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> order_1990 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100.0</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> order_1990 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100.0</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> order_1991 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">200.0</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> order_1991 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">200.0</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3）. 查询3张表中的数据。</p><p>order_1990中的数据 ： </p><p><img src="/2021/01/23/mysql-advanced-2/1551408083254.png" alt="1551408083254"> </p><p>order_1991中的数据 ： </p><p><img src="/2021/01/23/mysql-advanced-2/1551408133323.png" alt="1551408133323">  </p><p>order_all中的数据 ：</p><p><img src="/2021/01/23/mysql-advanced-2/1551408216185.png" alt="1551408216185"> </p><p>​     </p><p>4）. 往order_all中插入一条记录 ，由于在MERGE表定义时，INSERT_METHOD 选择的是LAST，那么插入的数据会想最后一张表中插入。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> order_all <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10000.0</span><span class="token punctuation">,</span><span class="token string">'西安'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-2/1551408519889.png" alt="1551408519889">          </p><h4 id="2-3-存储引擎的选择"><a href="#2-3-存储引擎的选择" class="headerlink" title="2.3 存储引擎的选择"></a>2.3 存储引擎的选择</h4><p>​    在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。以下是几种常用的存储引擎的使用环境。</p><ul><li>InnoDB : 是Mysql的默认存储引擎，用于事务处理应用程序，支持外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询意外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。InnoDB存储引擎除了有效的降低由于删除和更新导致的锁定， 还可以确保事务的完整提交和回滚，对于类似于计费系统或者财务系统等对数据准确性要求比较高的系统，InnoDB是最合适的选择。</li><li>MyISAM ： 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。</li><li>MEMORY：将所有数据保存在RAM中，在需要快速定位记录和其他类似数据环境下，可以提供几块的访问。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。MEMORY表通常用于更新不太频繁的小表，用以快速得到访问结果。</li><li>MERGE：用于将一系列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用他们。MERGE表的优点在于可以突破对单个MyISAM表的大小限制，并且通过将不同的表分布在多个磁盘上，可以有效的改善MERGE表的访问效率。这对于存储诸如数据仓储等VLDB环境十分合适。</li></ul><h3 id="3-优化SQL步骤"><a href="#3-优化SQL步骤" class="headerlink" title="3. 优化SQL步骤"></a>3. 优化SQL步骤</h3><p>在应用的的开发过程中，由于初期数据量小，开发人员写 SQL 语句时更重视功能上的实现，但是当应用系统正式上线后，随着生产数据量的急剧增长，很多 SQL 语句开始逐渐显露出性能问题，对生产的影响也越来越大，此时这些有问题的 SQL 语句就成为整个系统性能的瓶颈，因此我们必须要对它们进行优化，本章将详细介绍在 MySQL 中优化 SQL 语句的方法。</p><p>当面对一个有 SQL 性能问题的数据库时，我们应该从何处入手来进行系统的分析，使得能够尽快定位问题 SQL 并尽快解决问题。</p><h4 id="3-1-查看SQL执行频率"><a href="#3-1-查看SQL执行频率" class="headerlink" title="3.1 查看SQL执行频率"></a>3.1 查看SQL执行频率</h4><p>MySQL 客户端连接成功后，通过 show [session|global] status 命令可以提供服务器状态信息。show [session|global] status 可以根据需要加上参数“session”或者“global”来显示 session 级（当前连接）的计结果和 global 级（自数据库上次启动至今）的统计结果。如果不写，默认使用参数是“session”。</p><p>下面的命令显示了当前 session 中所有统计参数的值：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Com_______'</span><span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-2/1552487172501.png" alt="1552487172501">  </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Innodb_rows_%'</span><span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-2/1552487245859.png" alt="1552487245859"></p><p>Com_xxx 表示每个 xxx 语句执行的次数，我们通常比较关心的是以下几个统计参数。</p><table><thead><tr><th style="text-align:left">参数</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left">Com_select</td><td>执行 select 操作的次数，一次查询只累加 1。</td></tr><tr><td style="text-align:left">Com_insert</td><td>执行 INSERT 操作的次数，对于批量插入的 INSERT 操作，只累加一次。</td></tr><tr><td style="text-align:left">Com_update</td><td>执行 UPDATE 操作的次数。</td></tr><tr><td style="text-align:left">Com_delete</td><td>执行 DELETE 操作的次数。</td></tr><tr><td style="text-align:left">Innodb_rows_read</td><td>select 查询返回的行数。</td></tr><tr><td style="text-align:left">Innodb_rows_inserted</td><td>执行 INSERT 操作插入的行数。</td></tr><tr><td style="text-align:left">Innodb_rows_updated</td><td>执行 UPDATE 操作更新的行数。</td></tr><tr><td style="text-align:left">Innodb_rows_deleted</td><td>执行 DELETE 操作删除的行数。</td></tr><tr><td style="text-align:left">Connections</td><td>试图连接 MySQL 服务器的次数。</td></tr><tr><td style="text-align:left">Uptime</td><td>服务器工作时间。</td></tr><tr><td style="text-align:left">Slow_queries</td><td>慢查询的次数。</td></tr></tbody></table><p>Com_***      :  这些参数对于所有存储引擎的表操作都会进行累计。</p><p>Innodb_*** :  这几个参数只是针对InnoDB 存储引擎的，累加的算法也略有不同。</p><h4 id="3-2-定位低效率执行SQL"><a href="#3-2-定位低效率执行SQL" class="headerlink" title="3.2 定位低效率执行SQL"></a>3.2 定位低效率执行SQL</h4><p>可以通过以下两种方式定位执行效率较低的 SQL 语句。</p><ul><li>慢查询日志 : 通过慢查询日志定位那些执行效率较低的 SQL 语句，用–log-slow-queries[=file_name]选项启动时，mysqld 写一个包含所有执行时间超过 long_query_time 秒的 SQL 语句的日志文件。具体可以查看本书第 26 章中日志管理的相关部分。</li><li>show processlist  : 慢查询日志在查询结束以后才纪录，所以在应用反映执行效率出现问题的时候查询慢查询日志并不能定位问题，可以使用show processlist命令查看当前MySQL在进行的线程，包括线程的状态、是否锁表等，可以实时地查看 SQL 的执行情况，同时对一些锁表操作进行优化。</li></ul><p><img src="/2021/01/23/mysql-advanced-2/1556098544349.png" alt="1556098544349"> </p><pre><code>1） id列，用户登录mysql时，系统分配的"connection_id"，可以使用函数connection_id()查看2） user列，显示当前用户。如果不是root，这个命令就只显示用户权限范围的sql语句3） host列，显示这个语句是从哪个ip的哪个端口上发的，可以用来跟踪出现问题语句的用户4） db列，显示这个进程目前连接的是哪个数据库5） command列，显示当前连接的执行的命令，一般取值为休眠（sleep），查询（query），连接（connect）等6） time列，显示这个状态持续的时间，单位是秒7） state列，显示使用当前连接的sql语句的状态，很重要的列。state描述的是语句执行中的某一个状态。一个sql语句，以查询为例，可能需要经过copying to tmp table、sorting result、sending data等状态才可以完成8） info列，显示这个sql语句，是判断问题语句的一个重要依据</code></pre><h4 id="3-3-explain分析执行计划"><a href="#3-3-explain分析执行计划" class="headerlink" title="3.3 explain分析执行计划"></a>3.3 explain分析执行计划</h4><p>通过以上步骤查询到效率低的 SQL 语句后，可以通过 EXPLAIN或者 DESC命令获取 MySQL如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。</p><p>查询SQL语句的执行计划 ： </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_item <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-2/1552487489859.png" alt="1552487489859"></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_item <span class="token keyword">where</span> title <span class="token operator">=</span> <span class="token string">'阿尔卡特 (OT-979) 冰川白 联通3G手机3'</span><span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-2/1552487526919.png" alt="1552487526919">  </p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。</td></tr><tr><td>select_type</td><td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个 SELECT）等</td></tr><tr><td>table</td><td>输出结果集的表</td></tr><tr><td>type</td><td>表示表的连接类型，性能由好到差的连接类型为( system  —&gt;  const  —–&gt;  eq_ref  ——&gt;  ref  ——-&gt;  ref_or_null—-&gt;  index_merge  —&gt;  index_subquery  —–&gt;  range  —–&gt;  index  ——&gt; all )</td></tr><tr><td>possible_keys</td><td>表示查询时，可能使用的索引</td></tr><tr><td>key</td><td>表示实际使用的索引</td></tr><tr><td>key_len</td><td>索引字段的长度</td></tr><tr><td>rows</td><td>扫描行的数量</td></tr><tr><td>extra</td><td>执行情况的说明和描述</td></tr></tbody></table><h5 id="3-3-1-环境准备"><a href="#3-3-1-环境准备" class="headerlink" title="3.3.1 环境准备"></a>3.3.1 环境准备</h5><p><img src="/2021/01/23/mysql-advanced-2/1556122799330.png" alt="1556122799330"> </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_role<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>role_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>role_code<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>description<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>unique_role_name<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>role_name<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_user<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>unique_user_username<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>user_role<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">auto_increment</span> <span class="token punctuation">,</span>  <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>role_id<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>fk_ur_user_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token punctuation">`</span>fk_ur_role_id<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>fk_ur_role_id<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>t_role<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">NO</span> <span class="token keyword">ACTION</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">NO</span> <span class="token keyword">ACTION</span><span class="token punctuation">,</span>  <span class="token keyword">CONSTRAINT</span> <span class="token punctuation">`</span>fk_ur_user_id<span class="token punctuation">`</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token punctuation">`</span>t_user<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">NO</span> <span class="token keyword">ACTION</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">NO</span> <span class="token keyword">ACTION</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>t_user<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'super'</span><span class="token punctuation">,</span><span class="token string">'$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe'</span><span class="token punctuation">,</span><span class="token string">'超级管理员'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>t_user<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe'</span><span class="token punctuation">,</span><span class="token string">'系统管理员'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>t_user<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'itcast'</span><span class="token punctuation">,</span><span class="token string">'$2a$10$8qmaHgUFUAmPR5pOuWhYWOr291WJYjHelUlYn07k5ELF8ZCrW0Cui'</span><span class="token punctuation">,</span><span class="token string">'test02'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>t_user<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'stu1'</span><span class="token punctuation">,</span><span class="token string">'$2a$10$pLtt2KDAFpwTWLjNsmTEi.oU1yOZyIn9XkziK/y/spH5rftCpUMZa'</span><span class="token punctuation">,</span><span class="token string">'学生1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>t_user<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'stu2'</span><span class="token punctuation">,</span><span class="token string">'$2a$10$nxPKkYSez7uz2YQYUnwhR.z57km3yqKn3Hr/p1FR6ZKgc18u.Tvqm'</span><span class="token punctuation">,</span><span class="token string">'学生2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>t_user<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'t1'</span><span class="token punctuation">,</span><span class="token string">'$2a$10$TJ4TmCdK.X4wv/tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe'</span><span class="token punctuation">,</span><span class="token string">'老师1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>t_role<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>role_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>role_code<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>description<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'学生'</span><span class="token punctuation">,</span><span class="token string">'student'</span><span class="token punctuation">,</span><span class="token string">'学生'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>t_role<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>role_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>role_code<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>description<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'老师'</span><span class="token punctuation">,</span><span class="token string">'teacher'</span><span class="token punctuation">,</span><span class="token string">'老师'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>t_role<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>role_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>role_code<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>description<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'教学管理员'</span><span class="token punctuation">,</span><span class="token string">'teachmanager'</span><span class="token punctuation">,</span><span class="token string">'教学管理员'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>t_role<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>role_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>role_code<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>description<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token string">'管理员'</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'管理员'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>t_role<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>role_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>role_code<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>description<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'10'</span><span class="token punctuation">,</span><span class="token string">'超级管理员'</span><span class="token punctuation">,</span><span class="token string">'super'</span><span class="token punctuation">,</span><span class="token string">'超级管理员'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user_role<span class="token punctuation">(</span>id<span class="token punctuation">,</span>user_id<span class="token punctuation">,</span>role_id<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'10'</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></code></pre><h5 id="3-3-2-explain-之-id"><a href="#3-3-2-explain-之-id" class="headerlink" title="3.3.2 explain 之 id"></a>3.3.2 explain 之 id</h5><p>id 字段是 select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。id 情况有三种 ： </p><p>1） id 相同表示加载表的顺序是从上到下。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_role r<span class="token punctuation">,</span> t_user u<span class="token punctuation">,</span> user_role ur <span class="token keyword">where</span> r<span class="token punctuation">.</span>id <span class="token operator">=</span> ur<span class="token punctuation">.</span>role_id <span class="token operator">and</span> u<span class="token punctuation">.</span>id <span class="token operator">=</span> ur<span class="token punctuation">.</span>user_id <span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556102471304.png" alt="1556102471304"></p><p>2） id 不同id值越大，优先级越高，越先被执行。 </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_role <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> role_id <span class="token keyword">FROM</span> user_role <span class="token keyword">WHERE</span> user_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'stu1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556103009534.png" alt="1556103009534"> </p><p>3） id 有相同，也有不同，同时存在。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_role r <span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_role ur <span class="token keyword">WHERE</span> ur<span class="token punctuation">.</span><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token number">a</span> <span class="token keyword">WHERE</span> r<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">a</span><span class="token punctuation">.</span>role_id <span class="token punctuation">;</span> </code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556103294182.png" alt="1556103294182"> </p><h5 id="3-3-3-explain-之-select-type"><a href="#3-3-3-explain-之-select-type" class="headerlink" title="3.3.3 explain 之 select_type"></a>3.3.3 explain 之 select_type</h5><p> 表示 SELECT 的类型，常见的取值，如下表所示：</p><table><thead><tr><th>select_type</th><th>含义</th></tr></thead><tbody><tr><td>SIMPLE</td><td>简单的select查询，查询中不包含子查询或者UNION</td></tr><tr><td>PRIMARY</td><td>查询中若包含任何复杂的子查询，最外层查询标记为该标识</td></tr><tr><td>SUBQUERY</td><td>在SELECT 或 WHERE 列表中包含了子查询</td></tr><tr><td>DERIVED</td><td>在FROM 列表中包含的子查询，被标记为 DERIVED（衍生） MYSQL会递归执行这些子查询，把结果放在临时表中</td></tr><tr><td>UNION</td><td>若第二个SELECT出现在UNION之后，则标记为UNION ； 若UNION包含在FROM子句的子查询中，外层SELECT将被标记为 ： DERIVED</td></tr><tr><td>UNION RESULT</td><td>从UNION表获取结果的SELECT</td></tr></tbody></table><h5 id="3-3-4-explain-之-table"><a href="#3-3-4-explain-之-table" class="headerlink" title="3.3.4 explain 之 table"></a>3.3.4 explain 之 table</h5><p>展示这一行的数据是关于哪一张表的 </p><h5 id="3-3-5-explain-之-type"><a href="#3-3-5-explain-之-type" class="headerlink" title="3.3.5 explain 之 type"></a>3.3.5 explain 之 type</h5><p>type 显示的是访问类型，是较为重要的一个指标，可取值为： </p><table><thead><tr><th>type</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>MySQL不访问任何表，索引，直接返回结果</td></tr><tr><td>system</td><td>表只有一行记录(等于系统表)，这是const类型的特例，一般不会出现</td></tr><tr><td>const</td><td>表示通过索引一次就找到了，const 用于比较primary key 或者 unique 索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL 就能将该查询转换为一个常亮。const于将 “主键” 或 “唯一” 索引的所有部分与常量值进行比较</td></tr><tr><td>eq_ref</td><td>类似ref，区别在于使用的是唯一索引，使用主键的关联查询，关联查询出的记录只有一条。常见于主键或唯一索引扫描</td></tr><tr><td>ref</td><td>非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，返回所有匹配某个单独值的所有行（多个）</td></tr><tr><td>range</td><td>只检索给定返回的行，使用一个索引来选择行。 where 之后出现 between ， &lt; , &gt; , in 等操作。</td></tr><tr><td>index</td><td>index 与 ALL的区别为  index 类型只是遍历了索引树， 通常比ALL 快， ALL 是遍历数据文件。</td></tr><tr><td>all</td><td>将遍历全表以找到匹配的行</td></tr></tbody></table><p>结果值从最好到最坏以此是：</p><pre><code>NULL &gt; system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALLsystem &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</code></pre><p>==一般来说， 我们需要保证查询至少达到 range 级别， 最好达到ref 。==</p><h5 id="3-3-6-explain-之-key"><a href="#3-3-6-explain-之-key" class="headerlink" title="3.3.6 explain 之  key"></a>3.3.6 explain 之  key</h5><pre><code>possible_keys : 显示可能应用在这张表的索引， 一个或多个。 key ： 实际使用的索引， 如果为NULL， 则没有使用索引。key_len : 表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下， 长度越短越好 。</code></pre><h5 id="3-3-7-explain-之-rows"><a href="#3-3-7-explain-之-rows" class="headerlink" title="3.3.7 explain 之 rows"></a>3.3.7 explain 之 rows</h5><p>扫描行的数量。</p><h5 id="3-3-8-explain-之-extra"><a href="#3-3-8-explain-之-extra" class="headerlink" title="3.3.8 explain 之 extra"></a>3.3.8 explain 之 extra</h5><p>其他的额外的执行计划信息，在该列展示 。</p><table><thead><tr><th>extra</th><th>含义</th></tr></thead><tbody><tr><td>using  filesort</td><td>说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取， 称为 “文件排序”, 效率低。</td></tr><tr><td>using  temporary</td><td>使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于 order by 和 group by； 效率低</td></tr><tr><td>using  index</td><td>表示相应的select操作使用了覆盖索引， 避免访问表的数据行， 效率不错。</td></tr></tbody></table><h4 id="3-4-show-profile分析SQL"><a href="#3-4-show-profile分析SQL" class="headerlink" title="3.4 show profile分析SQL"></a>3.4 show profile分析SQL</h4><p>Mysql从5.0.37版本开始增加了对 show profiles 和 show profile 语句的支持。show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。</p><p>通过 have_profiling 参数，能够看到当前MySQL是否支持profile：</p><p><img src="/2021/01/23/mysql-advanced-2/1552488401999.png" alt="1552488401999"> </p><p>默认profiling是关闭的，可以通过set语句在Session级别开启profiling：</p><p><img src="/2021/01/23/mysql-advanced-2/1552488372405.png" alt="1552488372405"> </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> profiling<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开启profiling 开关;</span></code></pre><p>通过profile，我们能够更清楚地了解SQL执行的过程。</p><p>首先，我们可以执行一系列的操作，如下图所示：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token number">db01</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_item <span class="token keyword">where</span> id <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tb_item<span class="token punctuation">;</span></code></pre><p>执行完上述命令之后，再执行show profiles 指令， 来查看SQL语句执行的耗时：</p><p><img src="/2021/01/23/mysql-advanced-2/1552489017940.png" alt="1552489017940">  </p><p>通过show  profile for  query  query_id 语句可以查看到该SQL执行过程中每个线程的状态和消耗的时间：</p><p><img src="/2021/01/23/mysql-advanced-2/1552489053763.png" alt="1552489053763"> </p><pre class=" language-tex"><code class="language-tex">TIP ：    Sending data 状态表示MySQL线程开始访问数据行并把结果返回给客户端，而不仅仅是返回个客户端。由于在Sending data状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整各查询中耗时最长的状态。</code></pre><p>在获取到最消耗时间的线程状态后，MySQL支持进一步选择all、cpu、block io 、context switch、page faults等明细类型类查看MySQL在使用什么资源上耗费了过高的时间。例如，选择查看CPU的耗费时间  ：</p><p><img src="/2021/01/23/mysql-advanced-2/1552489671119.png" alt="1552489671119"> </p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>Status</td><td>sql 语句执行的状态</td></tr><tr><td>Duration</td><td>sql 执行过程中每一个步骤的耗时</td></tr><tr><td>CPU_user</td><td>当前用户占有的cpu</td></tr><tr><td>CPU_system</td><td>系统占有的cpu</td></tr></tbody></table><h4 id="3-5-trace分析优化器执行计划"><a href="#3-5-trace分析优化器执行计划" class="headerlink" title="3.5 trace分析优化器执行计划"></a>3.5 trace分析优化器执行计划</h4><p>MySQL5.6提供了对SQL的跟踪trace, 通过trace文件能够进一步了解为什么优化器选择A计划, 而不是选择B计划。</p><p>打开trace ， 设置格式为 JSON，并设置trace最大能够使用的内存大小，避免解析过程中因为默认内存过小而不能够完整展示。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> optimizer_trace<span class="token operator">=</span><span class="token string">"enabled=on"</span><span class="token punctuation">,</span>end_markers_in_json<span class="token operator">=</span><span class="token keyword">on</span><span class="token punctuation">;</span><span class="token keyword">set</span> optimizer_trace_max_mem_size<span class="token operator">=</span><span class="token number">1000000</span><span class="token punctuation">;</span></code></pre><p>执行SQL语句 ：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_item <span class="token keyword">where</span> id <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span></code></pre><p>最后， 检查information_schema.optimizer_trace就可以知道MySQL是如何执行SQL的 ：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>optimizer_trace\G<span class="token punctuation">;</span></code></pre><pre class=" language-json"><code class="language-json">*************************** <span class="token number">1</span>. row ***************************QUERY<span class="token operator">:</span> select * from tb_item where id &lt; <span class="token number">4</span>TRACE<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"join_preparation"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"select#"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token property">"expanded_query"</span><span class="token operator">:</span> <span class="token string">"/* select#1 */ select `tb_item`.`id` AS `id`,`tb_item`.`title` AS `title`,`tb_item`.`price` AS `price`,`tb_item`.`num` AS `num`,`tb_item`.`categoryid` AS `categoryid`,`tb_item`.`status` AS `status`,`tb_item`.`sellerid` AS `sellerid`,`tb_item`.`createtime` AS `createtime`,`tb_item`.`updatetime` AS `updatetime` from `tb_item` where (`tb_item`.`id` &lt; 4)"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span> /* steps */      <span class="token punctuation">}</span> /* join_preparation */    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"join_optimization"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"select#"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token property">"condition_processing"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"condition"</span><span class="token operator">:</span> <span class="token string">"WHERE"</span><span class="token punctuation">,</span>              <span class="token property">"original_condition"</span><span class="token operator">:</span> <span class="token string">"(`tb_item`.`id` &lt; 4)"</span><span class="token punctuation">,</span>              <span class="token property">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                  <span class="token property">"transformation"</span><span class="token operator">:</span> <span class="token string">"equality_propagation"</span><span class="token punctuation">,</span>                  <span class="token property">"resulting_condition"</span><span class="token operator">:</span> <span class="token string">"(`tb_item`.`id` &lt; 4)"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                  <span class="token property">"transformation"</span><span class="token operator">:</span> <span class="token string">"constant_propagation"</span><span class="token punctuation">,</span>                  <span class="token property">"resulting_condition"</span><span class="token operator">:</span> <span class="token string">"(`tb_item`.`id` &lt; 4)"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                  <span class="token property">"transformation"</span><span class="token operator">:</span> <span class="token string">"trivial_condition_removal"</span><span class="token punctuation">,</span>                  <span class="token property">"resulting_condition"</span><span class="token operator">:</span> <span class="token string">"(`tb_item`.`id` &lt; 4)"</span>                <span class="token punctuation">}</span>              <span class="token punctuation">]</span> /* steps */            <span class="token punctuation">}</span> /* condition_processing */          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token property">"table_dependencies"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token property">"table"</span><span class="token operator">:</span> <span class="token string">"`tb_item`"</span><span class="token punctuation">,</span>                <span class="token property">"row_may_be_null"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token property">"map_bit"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token property">"depends_on_map_bits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">]</span> /* depends_on_map_bits */              <span class="token punctuation">}</span>            <span class="token punctuation">]</span> /* table_dependencies */          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token property">"ref_optimizer_key_uses"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">]</span> /* ref_optimizer_key_uses */          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token property">"rows_estimation"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token property">"table"</span><span class="token operator">:</span> <span class="token string">"`tb_item`"</span><span class="token punctuation">,</span>                <span class="token property">"range_analysis"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                  <span class="token property">"table_scan"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"rows"</span><span class="token operator">:</span> <span class="token number">9816098</span><span class="token punctuation">,</span>                    <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">2.04e6</span>                  <span class="token punctuation">}</span> /* table_scan */<span class="token punctuation">,</span>                  <span class="token property">"potential_range_indices"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                      <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"PRIMARY"</span><span class="token punctuation">,</span>                      <span class="token property">"usable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                      <span class="token property">"key_parts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"id"</span>                      <span class="token punctuation">]</span> /* key_parts */                    <span class="token punctuation">}</span>                  <span class="token punctuation">]</span> /* potential_range_indices */<span class="token punctuation">,</span>                  <span class="token property">"setup_range_conditions"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                  <span class="token punctuation">]</span> /* setup_range_conditions */<span class="token punctuation">,</span>                  <span class="token property">"group_index_range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"chosen"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                    <span class="token property">"cause"</span><span class="token operator">:</span> <span class="token string">"not_group_by_or_distinct"</span>                  <span class="token punctuation">}</span> /* group_index_range */<span class="token punctuation">,</span>                  <span class="token property">"analyzing_range_alternatives"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"range_scan_alternatives"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                      <span class="token punctuation">{</span>                        <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"PRIMARY"</span><span class="token punctuation">,</span>                        <span class="token property">"ranges"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                          <span class="token string">"id &lt; 4"</span>                        <span class="token punctuation">]</span> /* ranges */<span class="token punctuation">,</span>                        <span class="token property">"index_dives_for_eq_ranges"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token property">"rowid_ordered"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token property">"using_mrr"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                        <span class="token property">"index_only"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                        <span class="token property">"rows"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                        <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">1.6154</span><span class="token punctuation">,</span>                        <span class="token property">"chosen"</span><span class="token operator">:</span> <span class="token boolean">true</span>                      <span class="token punctuation">}</span>                    <span class="token punctuation">]</span> /* range_scan_alternatives */<span class="token punctuation">,</span>                    <span class="token property">"analyzing_roworder_intersect"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                      <span class="token property">"usable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                      <span class="token property">"cause"</span><span class="token operator">:</span> <span class="token string">"too_few_roworder_scans"</span>                    <span class="token punctuation">}</span> /* analyzing_roworder_intersect */                  <span class="token punctuation">}</span> /* analyzing_range_alternatives */<span class="token punctuation">,</span>                  <span class="token property">"chosen_range_access_summary"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"range_access_plan"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"range_scan"</span><span class="token punctuation">,</span>                      <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"PRIMARY"</span><span class="token punctuation">,</span>                      <span class="token property">"rows"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                      <span class="token property">"ranges"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"id &lt; 4"</span>                      <span class="token punctuation">]</span> /* ranges */                    <span class="token punctuation">}</span> /* range_access_plan */<span class="token punctuation">,</span>                    <span class="token property">"rows_for_plan"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                    <span class="token property">"cost_for_plan"</span><span class="token operator">:</span> <span class="token number">1.6154</span><span class="token punctuation">,</span>                    <span class="token property">"chosen"</span><span class="token operator">:</span> <span class="token boolean">true</span>                  <span class="token punctuation">}</span> /* chosen_range_access_summary */                <span class="token punctuation">}</span> /* range_analysis */              <span class="token punctuation">}</span>            <span class="token punctuation">]</span> /* rows_estimation */          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token property">"considered_execution_plans"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token property">"plan_prefix"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">]</span> /* plan_prefix */<span class="token punctuation">,</span>                <span class="token property">"table"</span><span class="token operator">:</span> <span class="token string">"`tb_item`"</span><span class="token punctuation">,</span>                <span class="token property">"best_access_path"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                  <span class="token property">"considered_access_paths"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                      <span class="token property">"access_type"</span><span class="token operator">:</span> <span class="token string">"range"</span><span class="token punctuation">,</span>                      <span class="token property">"rows"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                      <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">2.2154</span><span class="token punctuation">,</span>                      <span class="token property">"chosen"</span><span class="token operator">:</span> <span class="token boolean">true</span>                    <span class="token punctuation">}</span>                  <span class="token punctuation">]</span> /* considered_access_paths */                <span class="token punctuation">}</span> /* best_access_path */<span class="token punctuation">,</span>                <span class="token property">"cost_for_plan"</span><span class="token operator">:</span> <span class="token number">2.2154</span><span class="token punctuation">,</span>                <span class="token property">"rows_for_plan"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                <span class="token property">"chosen"</span><span class="token operator">:</span> <span class="token boolean">true</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span> /* considered_execution_plans */          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token property">"attaching_conditions_to_tables"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"original_condition"</span><span class="token operator">:</span> <span class="token string">"(`tb_item`.`id` &lt; 4)"</span><span class="token punctuation">,</span>              <span class="token property">"attached_conditions_computation"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">]</span> /* attached_conditions_computation */<span class="token punctuation">,</span>              <span class="token property">"attached_conditions_summary"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                  <span class="token property">"table"</span><span class="token operator">:</span> <span class="token string">"`tb_item`"</span><span class="token punctuation">,</span>                  <span class="token property">"attached"</span><span class="token operator">:</span> <span class="token string">"(`tb_item`.`id` &lt; 4)"</span>                <span class="token punctuation">}</span>              <span class="token punctuation">]</span> /* attached_conditions_summary */            <span class="token punctuation">}</span> /* attaching_conditions_to_tables */          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token property">"refine_plan"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token property">"table"</span><span class="token operator">:</span> <span class="token string">"`tb_item`"</span><span class="token punctuation">,</span>                <span class="token property">"access_type"</span><span class="token operator">:</span> <span class="token string">"range"</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span> /* refine_plan */          <span class="token punctuation">}</span>        <span class="token punctuation">]</span> /* steps */      <span class="token punctuation">}</span> /* join_optimization */    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"join_execution"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"select#"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">]</span> /* steps */      <span class="token punctuation">}</span> /* join_execution */    <span class="token punctuation">}</span>  <span class="token punctuation">]</span> /* steps */<span class="token punctuation">}</span></code></pre><h3 id="4-索引的使用"><a href="#4-索引的使用" class="headerlink" title="4. 索引的使用"></a>4. 索引的使用</h3><p>索引是数据库优化最常用也是最重要的手段之一, 通过索引通常可以帮助用户解决大多数的MySQL的性能优化问题。</p><h4 id="4-1-验证索引提升查询效率"><a href="#4-1-验证索引提升查询效率" class="headerlink" title="4.1 验证索引提升查询效率"></a>4.1 验证索引提升查询效率</h4><p>在我们准备的表结构tb_item 中， 一共存储了 300 万记录；</p><p>A. 根据ID查询 </p><pre><code>select * from tb_item where id = 1999\G;</code></pre><p><img src="/2021/01/23/mysql-advanced-2/1553261992653.png" alt="1553261992653"> </p><p>查询速度很快， 接近0s ， 主要的原因是因为id为主键， 有索引；</p><p><img src="/2021/01/23/mysql-advanced-2/1553262044466.png" alt="1553262044466"> </p><p>2). 根据 title 进行精确查询</p><pre class=" language-SQL"><code class="language-SQL">select * from tb_item where title = 'iphoneX 移动3G 32G941'\G; </code></pre><p><img src="/2021/01/23/mysql-advanced-2/1553262215900.png" alt="1553262215900"> </p><p>查看SQL语句的执行计划 ： </p><p><img src="/2021/01/23/mysql-advanced-2/1553262469785.png" alt="1553262469785"> </p><p>处理方案 ， 针对title字段， 创建索引 ： </p><pre class=" language-SQL"><code class="language-SQL">create index idx_item_title on tb_item(title);</code></pre><p><img src="/2021/01/23/mysql-advanced-2/1553263229523.png" alt="1553263229523"> </p><p>索引创建完成之后，再次进行查询 ： </p><p><img src="/2021/01/23/mysql-advanced-2/1553263302706.png" alt="1553263302706"> </p><p>通过explain ， 查看执行计划，执行SQL时使用了刚才创建的索引 </p><p><img src="/2021/01/23/mysql-advanced-2/1553263355262.png" alt="1553263355262"> </p><h4 id="4-2-索引的使用"><a href="#4-2-索引的使用" class="headerlink" title="4.2 索引的使用"></a>4.2 索引的使用</h4><h5 id="4-2-1-准备环境"><a href="#4-2-1-准备环境" class="headerlink" title="4.2.1 准备环境"></a>4.2.1 准备环境</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span> <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span> <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>address<span class="token punctuation">`</span> <span class="token keyword">varchar</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span> <span class="token keyword">datetime</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'alibaba'</span><span class="token punctuation">,</span><span class="token string">'阿里巴巴'</span><span class="token punctuation">,</span><span class="token string">'阿里小店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'baidu'</span><span class="token punctuation">,</span><span class="token string">'百度科技有限公司'</span><span class="token punctuation">,</span><span class="token string">'百度小店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'huawei'</span><span class="token punctuation">,</span><span class="token string">'华为科技有限公司'</span><span class="token punctuation">,</span><span class="token string">'华为小店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'itcast'</span><span class="token punctuation">,</span><span class="token string">'传智播客教育科技有限公司'</span><span class="token punctuation">,</span><span class="token string">'传智播客'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'itheima'</span><span class="token punctuation">,</span><span class="token string">'黑马程序员'</span><span class="token punctuation">,</span><span class="token string">'黑马程序员'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'luoji'</span><span class="token punctuation">,</span><span class="token string">'罗技科技有限公司'</span><span class="token punctuation">,</span><span class="token string">'罗技小店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'oppo'</span><span class="token punctuation">,</span><span class="token string">'OPPO科技有限公司'</span><span class="token punctuation">,</span><span class="token string">'OPPO官方旗舰店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'ourpalm'</span><span class="token punctuation">,</span><span class="token string">'掌趣科技股份有限公司'</span><span class="token punctuation">,</span><span class="token string">'掌趣小店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'qiandu'</span><span class="token punctuation">,</span><span class="token string">'千度科技'</span><span class="token punctuation">,</span><span class="token string">'千度小店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'sina'</span><span class="token punctuation">,</span><span class="token string">'新浪科技有限公司'</span><span class="token punctuation">,</span><span class="token string">'新浪官方旗舰店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'xiaomi'</span><span class="token punctuation">,</span><span class="token string">'小米科技'</span><span class="token punctuation">,</span><span class="token string">'小米官方旗舰店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'西安市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>tb_seller<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>sellerid<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>nickname<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>createtime<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'yijia'</span><span class="token punctuation">,</span><span class="token string">'宜家家居'</span><span class="token punctuation">,</span><span class="token string">'宜家家居旗舰店'</span><span class="token punctuation">,</span><span class="token string">'e10adc3949ba59abbe56e057f20f883e'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'北京市'</span><span class="token punctuation">,</span><span class="token string">'2088-01-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">index</span> idx_seller_name_sta_addr <span class="token keyword">on</span> tb_seller<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token keyword">status</span><span class="token punctuation">,</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="4-2-2-避免索引失效"><a href="#4-2-2-避免索引失效" class="headerlink" title="4.2.2 避免索引失效"></a>4.2.2 避免索引失效</h5><p>1).  全值匹配 ，对索引中所有列都指定具体值。</p><p>改情况下，索引生效，执行效率高。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_seller <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'小米科技'</span> <span class="token operator">and</span> <span class="token keyword">status</span><span class="token operator">=</span><span class="token string">'1'</span> <span class="token operator">and</span> address<span class="token operator">=</span><span class="token string">'北京市'</span>\G<span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556170997921.png" alt="1556170997921"> </p><p>2). 最左前缀法则</p><p>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。</p><p>匹配最左前缀法则，走索引：</p><p><img src="/2021/01/23/mysql-advanced-2/1556171348995.png" alt="1556171348995">  </p><p>违法最左前缀法则 ， 索引失效：</p><p><img src="/2021/01/23/mysql-advanced-2/1556171428140.png" alt="1556171428140"> </p><p>如果符合最左法则，但是出现跳跃某一列，只有最左列索引生效：</p><p><img src="/2021/01/23/mysql-advanced-2/1556171662203.png" alt="1556171662203"> </p><p>3). 范围查询右边的列，不能使用索引 。</p><p><img src="/2021/01/23/mysql-advanced-2/1556172256791.png" alt="1556172256791"> </p><p>根据前面的两个字段name ， status 查询是走索引的， 但是最后一个条件address 没有用到索引。</p><p>4). 不要在索引列上进行运算操作， 索引将失效。</p><p><img src="/2021/01/23/mysql-advanced-2/1556172813715.png" alt="1556172813715"> </p><p>5). 字符串不加单引号，造成索引失效。</p><p><img src="/2021/01/23/mysql-advanced-2/1556172967493.png" alt="1556172967493"> </p><p>由于，在查询是，没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。</p><p>6). 尽量使用覆盖索引，避免select *</p><p>尽量使用覆盖索引（只访问索引的查询（索引列完全包含查询列）），减少select * 。</p><p><img src="/2021/01/23/mysql-advanced-2/1556173928299.png" alt="1556173928299"> </p><p>如果查询列，超出索引列，也会降低性能。</p><p><img src="/2021/01/23/mysql-advanced-2/1556173986068.png" alt="1556173986068"> </p><pre><code>TIP :     using index ：使用覆盖索引的时候就会出现    using where：在查找使用索引的情况下，需要回表去查询所需的数据    using index condition：查找使用了索引，但是需要回表查询数据    using index ; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</code></pre><p>7). 用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</p><p>示例，name字段是索引列 ， 而createtime不是索引列，中间是or进行连接是不走索引的 ： </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_seller <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'黑马程序员'</span> <span class="token operator">or</span> createtime <span class="token operator">=</span> <span class="token string">'2088-01-01 12:00:00'</span>\G<span class="token punctuation">;</span>    </code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556174994440.png" alt="1556174994440"> </p><p>8).  以%开头的Like模糊查询，索引失效。</p><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p><p><img src="/2021/01/23/mysql-advanced-2/1556175114369.png" alt="1556175114369"> </p><p>解决方案 ： </p><p>通过覆盖索引来解决 </p><p><img src="/2021/01/23/mysql-advanced-2/1556247686483.png" alt="1556247686483"> </p><p>9). 如果MySQL评估使用索引比全表更慢，则不使用索引。</p><p><img src="/2021/01/23/mysql-advanced-2/1556175445210.png" alt="1556175445210"> </p><p>10). is  NULL ， is NOT NULL  <font color="red">有时</font>索引失效。</p><p><img src="/2021/01/23/mysql-advanced-2/1556180634889.png" alt="1556180634889">  </p><p>11). in 走索引， not in 索引失效。</p><p><img src="/2021/01/23/mysql-advanced-2/1556249602732.png" alt="1556249602732">  </p><p>12). 单列索引和复合索引。</p><p>尽量使用复合索引，而少使用单列索引 。</p><p>创建复合索引 </p><pre><code>create index idx_name_sta_address on tb_seller(name, status, address);就相当于创建了三个索引 ：     name    name + status    name + status + address</code></pre><p>创建单列索引 </p><pre><code>create index idx_seller_name on tb_seller(name);create index idx_seller_status on tb_seller(status);create index idx_seller_address on tb_seller(address);</code></pre><p>数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部索引 。</p><h4 id="4-3-查看索引使用情况"><a href="#4-3-查看索引使用情况" class="headerlink" title="4.3 查看索引使用情况"></a>4.3 查看索引使用情况</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Handler_read%'</span><span class="token punctuation">;</span>    <span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Handler_read%'</span><span class="token punctuation">;</span>    </code></pre><p><img src="/2021/01/23/mysql-advanced-2/1552885364563.png" alt="1552885364563"> </p><pre><code>Handler_read_first：索引中第一条被读的次数。如果较高，表示服务器正执行大量全索引扫描（这个值越低越好）。Handler_read_key：如果索引正在工作，这个值代表一个行被索引值读的次数，如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）。Handler_read_next ：按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。Handler_read_prev：按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY ... DESC。Handler_read_rnd ：根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救。Handler_read_rnd_next：在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。</code></pre><h3 id="5-SQL优化"><a href="#5-SQL优化" class="headerlink" title="5. SQL优化"></a>5. SQL优化</h3><h4 id="5-1-大批量插入数据"><a href="#5-1-大批量插入数据" class="headerlink" title="5.1 大批量插入数据"></a>5.1 大批量插入数据</h4><p>环境准备 ： </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>tb_user_2<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>birthday<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>phone<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>qq<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户状态'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>unique_user_username<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token punctuation">;</span></code></pre><p>当使用load 命令导入数据的时候，适当的设置可以提高导入的效率。</p><p><img src="/2021/01/23/mysql-advanced-2/1556269346488.png" alt="1556269346488"> </p><p>对于 InnoDB 类型的表，有以下几种方式可以提高导入的效率：</p><p>1） 主键顺序插入</p><p>因为InnoDB类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率。</p><pre><code>脚本文件介绍 :    sql1.log  ----&gt; 主键有序    sql2.log  ----&gt; 主键无序</code></pre><p>插入ID顺序排列数据：</p><p><img src="/2021/01/23/mysql-advanced-2/1555771750567.png" alt="1555771750567"></p><p>插入ID无序排列数据：</p><p><img src="/2021/01/23/mysql-advanced-2/1555771959734.png" alt="1555771959734"> </p><p>2） 关闭唯一性校验</p><p>在导入数据前执行 SET UNIQUE_CHECKS=0，关闭唯一性校验，在导入结束后执行SET UNIQUE_CHECKS=1，恢复唯一性校验，可以提高导入的效率。</p><p><img src="/2021/01/23/mysql-advanced-2/1555772132736.png" alt="1555772132736"> </p><p>3） 手动提交事务</p><p>如果应用使用自动提交的方式，建议在导入前执行 SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行 SET AUTOCOMMIT=1，打开自动提交，也可以提高导入的效率。</p><p><img src="/2021/01/23/mysql-advanced-2/1555772351208.png" alt="1555772351208"></p><h4 id="5-2-优化insert语句"><a href="#5-2-优化insert语句" class="headerlink" title="5.2 优化insert语句"></a>5.2 优化insert语句</h4><p>当进行数据的insert操作的时候，可以考虑采用以下几种优化方案。</p><ul><li><p>如果需要同时对一张表插入很多行数据时，应该尽量使用多个值表的insert语句，这种方式将大大的缩减客户端与数据库之间的连接、关闭等消耗。使得效率比分开执行的单个insert语句快。</p><p>示例， 原始方式为：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>优化后的方案为 ： </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span>，<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>在事务中进行数据插入。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span></code></pre></li><li><p>数据有序插入</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'Tim'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'Rose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>优化后</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'Tim'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'Rose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="5-3-优化order-by语句"><a href="#5-3-优化order-by语句" class="headerlink" title="5.3 优化order by语句"></a>5.3 优化order by语句</h4><h5 id="5-3-1-环境准备"><a href="#5-3-1-环境准备" class="headerlink" title="5.3.1 环境准备"></a>5.3.1 环境准备</h5><pre class=" language-SQL"><code class="language-SQL">CREATE TABLE `emp` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `name` varchar(100) NOT NULL,  `age` int(3) NOT NULL,  `salary` int(11) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB  DEFAULT CHARSET=utf8mb4;insert into `emp` (`id`, `name`, `age`, `salary`) values('1','Tom','25','2300');insert into `emp` (`id`, `name`, `age`, `salary`) values('2','Jerry','30','3500');insert into `emp` (`id`, `name`, `age`, `salary`) values('3','Luci','25','2800');insert into `emp` (`id`, `name`, `age`, `salary`) values('4','Jay','36','3500');insert into `emp` (`id`, `name`, `age`, `salary`) values('5','Tom2','21','2200');insert into `emp` (`id`, `name`, `age`, `salary`) values('6','Jerry2','31','3300');insert into `emp` (`id`, `name`, `age`, `salary`) values('7','Luci2','26','2700');insert into `emp` (`id`, `name`, `age`, `salary`) values('8','Jay2','33','3500');insert into `emp` (`id`, `name`, `age`, `salary`) values('9','Tom3','23','2400');insert into `emp` (`id`, `name`, `age`, `salary`) values('10','Jerry3','32','3100');insert into `emp` (`id`, `name`, `age`, `salary`) values('11','Luci3','26','2900');insert into `emp` (`id`, `name`, `age`, `salary`) values('12','Jay3','37','4500');create index idx_emp_age_salary on emp(age,salary);</code></pre><h5 id="5-3-2-两种排序方式"><a href="#5-3-2-两种排序方式" class="headerlink" title="5.3.2 两种排序方式"></a>5.3.2 两种排序方式</h5><p>1). 第一种是通过对返回数据进行排序，也就是通常说的 filesort 排序，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</p><p><img src="/2021/01/23/mysql-advanced-2/1556335817763.png" alt="1556335817763"> </p><p>2). 第二种通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。</p><p><img src="/2021/01/23/mysql-advanced-2/1556335866539.png" alt="1556335866539"> </p><p>多字段排序</p><p><img src="/2021/01/23/mysql-advanced-2/1556336352061.png" alt="1556336352061"> </p><p>了解了MySQL的排序方式，优化目标就清晰了：尽量减少额外的排序，通过索引直接返回有序数据。where 条件和Order by 使用相同的索引，并且Order By 的顺序和索引顺序相同， 并且Order  by 的字段都是升序，或者都是降序。否则肯定需要额外的操作，这样就会出现FileSort。</p><h5 id="5-3-3-Filesort-的优化"><a href="#5-3-3-Filesort-的优化" class="headerlink" title="5.3.3 Filesort 的优化"></a>5.3.3 Filesort 的优化</h5><p>通过创建合适的索引，能够减少 Filesort 的出现，但是在某些情况下，条件限制不能让Filesort消失，那就需要加快 Filesort的排序操作。对于Filesort ， MySQL 有两种排序算法：</p><p>1） 两次扫描算法 ：MySQL4.1 之前，使用该方式排序。首先根据条件取出排序字段和行指针信息，然后在排序区 sort buffer 中排序，如果sort buffer不够，则在临时表 temporary table 中存储排序结果。完成排序之后，再根据行指针回表读取记录，该操作可能会导致大量随机I/O操作。</p><p>2）一次扫描算法：一次性取出满足条件的所有字段，然后在排序区 sort  buffer 中排序后直接输出结果集。排序时内存开销较大，但是排序效率比两次扫描算法要高。</p><p>MySQL 通过比较系统变量 max_length_for_sort_data 的大小和Query语句取出的字段总大小， 来判定是否那种排序算法，如果max_length_for_sort_data 更大，那么使用第二种优化之后的算法；否则使用第一种。</p><p>可以适当提高 sort_buffer_size  和 max_length_for_sort_data  系统变量，来增大排序区的大小，提高排序的效率。</p><p><img src="/2021/01/23/mysql-advanced-2/1556338367593.png" alt="1556338367593"> </p><h4 id="5-4-优化group-by-语句"><a href="#5-4-优化group-by-语句" class="headerlink" title="5.4 优化group by 语句"></a>5.4 优化group by 语句</h4><p>由于GROUP BY 实际上也同样会进行排序操作，而且与ORDER BY 相比，GROUP BY 主要只是多了排序之后的分组操作。当然，如果在分组的时候还使用了其他的一些聚合函数，那么还需要一些聚合函数的计算。所以，在GROUP BY 的实现过程中，与 ORDER BY 一样也可以利用到索引。</p><p>如果查询包含 group by 但是用户想要避免排序结果的消耗， 则可以执行order by null 禁止排序。如下 ：</p><pre class=" language-SQL"><code class="language-SQL">drop index idx_emp_age_salary on emp;explain select age,count(*) from emp group by age;</code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556339573979.png" alt="1556339573979">  </p><p>优化后</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">explain</span> <span class="token keyword">select</span> age<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> age <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556339633161.png" alt="1556339633161">  </p><p>从上面的例子可以看出，第一个SQL语句需要进行”filesort”，而第二个SQL由于order  by  null 不需要进行 “filesort”， 而上文提过Filesort往往非常耗费时间。</p><p>创建索引 ：</p><pre class=" language-SQL"><code class="language-SQL">create index idx_emp_age_salary on emp(age,salary)；</code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556339688158.png" alt="1556339688158"> </p><h4 id="5-5-优化嵌套查询"><a href="#5-5-优化嵌套查询" class="headerlink" title="5.5 优化嵌套查询"></a>5.5 优化嵌套查询</h4><p>Mysql4.1版本之后，开始支持SQL的子查询。这个技术可以使用SELECT语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询是可以被更高效的连接（JOIN）替代。</p><p>示例 ，查找有角色的所有的用户信息 : </p><pre class=" language-SQL"><code class="language-SQL"> explain select * from t_user where id in (select user_id from user_role );</code></pre><p>执行计划为 : </p><p><img src="/2021/01/23/mysql-advanced-2/1556359399199.png" alt="1556359399199">   </p><p>优化后 :</p><pre class=" language-SQL"><code class="language-SQL">explain select * from t_user u , user_role ur where u.id = ur.user_id;</code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556359482142.png" alt="1556359482142">   </p><p>连接(Join)查询之所以更有效率一些 ，是因为MySQL不需要在内存中创建临时表来完成这个逻辑上需要两个步骤的查询工作。</p><h4 id="5-6-优化OR条件"><a href="#5-6-优化OR条件" class="headerlink" title="5.6 优化OR条件"></a>5.6 优化OR条件</h4><p>对于包含OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引 ， 而且不能使用到复合索引； 如果没有索引，则应该考虑增加索引。</p><p>获取 emp 表中的所有的索引 ： </p><p><img src="/2021/01/23/mysql-advanced-2/1556354464657.png" alt="1556354464657">  </p><p>示例 ： </p><pre class=" language-SQL"><code class="language-SQL">explain select * from emp where id = 1 or age = 30;</code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556354887509.png" alt="1556354887509"></p><p><img src="/2021/01/23/mysql-advanced-2/1556354920964.png" alt="1556354920964">  </p><p>建议使用 union 替换 or ： </p><p><img src="/2021/01/23/mysql-advanced-2/1556355027728.png" alt="1556355027728"> </p><p>我们来比较下重要指标，发现主要差别是 type 和 ref 这两项</p><p>type 显示的是访问类型，是较为重要的一个指标，结果值从好到坏依次是：</p><pre><code>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null  &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</code></pre><p>UNION 语句的 type 值为 ref，OR 语句的 type 值为 range，可以看到这是一个很明显的差距</p><p>UNION 语句的 ref 值为 const，OR 语句的 type 值为 null，const 表示是常量值引用，非常快</p><p>这两项的差距就说明了 UNION 要优于 OR 。</p><h4 id="5-7-优化分页查询"><a href="#5-7-优化分页查询" class="headerlink" title="5.7 优化分页查询"></a>5.7 优化分页查询</h4><p>一般分页查询时，通过创建覆盖索引能够比较好地提高性能。一个常见又非常头疼的问题就是 limit 2000000,10  ，此时需要MySQL排序前2000010 记录，仅仅返回2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大 。</p><p><img src="/2021/01/23/mysql-advanced-2/1556361314783.png" alt="1556361314783"> </p><h5 id="5-7-1-优化思路一"><a href="#5-7-1-优化思路一" class="headerlink" title="5.7.1 优化思路一"></a>5.7.1 优化思路一</h5><p>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。</p><p><img src="/2021/01/23/mysql-advanced-2/1556416102800.png" alt="1556416102800"> </p><h5 id="5-7-2-优化思路二"><a href="#5-7-2-优化思路二" class="headerlink" title="5.7.2 优化思路二"></a>5.7.2 优化思路二</h5><p>该方案适用于主键自增的表，可以把Limit 查询转换成某个位置的查询 。</p><p><img src="/2021/01/23/mysql-advanced-2/1556363928151.png" alt="1556363928151"> </p><h4 id="5-8-使用SQL提示"><a href="#5-8-使用SQL提示" class="headerlink" title="5.8 使用SQL提示"></a>5.8 使用SQL提示</h4><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><h5 id="5-8-1-USE-INDEX"><a href="#5-8-1-USE-INDEX" class="headerlink" title="5.8.1 USE INDEX"></a>5.8.1 USE INDEX</h5><p>在查询语句中表名的后面，添加 use index 来提供希望MySQL去参考的索引列表，就可以让MySQL不再考虑其他可用的索引。</p><pre><code>create index idx_seller_name on tb_seller(name);</code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556370971576.png" alt="1556370971576"> </p><h5 id="5-8-2-IGNORE-INDEX"><a href="#5-8-2-IGNORE-INDEX" class="headerlink" title="5.8.2 IGNORE INDEX"></a>5.8.2 IGNORE INDEX</h5><p>如果用户只是单纯的想让MySQL忽略一个或者多个索引，则可以使用 ignore index 作为 hint 。</p><pre><code> explain select * from tb_seller ignore index(idx_seller_name) where name = '小米科技';</code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556371004594.png" alt="1556371004594"> </p><h5 id="5-8-3-FORCE-INDEX"><a href="#5-8-3-FORCE-INDEX" class="headerlink" title="5.8.3 FORCE INDEX"></a>5.8.3 FORCE INDEX</h5><p>为强制MySQL使用一个特定的索引，可在查询中使用 force index 作为hint 。 </p><pre class=" language-SQL"><code class="language-SQL">create index idx_seller_address on tb_seller(address);</code></pre><p><img src="/2021/01/23/mysql-advanced-2/1556371355788.png" alt="1556371355788"> </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库优化之组合拳(二) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库优化之组合拳(一)</title>
      <link href="/2021/01/17/mysql-advanced-1/"/>
      <url>/2021/01/17/mysql-advanced-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>非原创图文,图文来源于黑马官网,此处仅作为备份学习</p></blockquote><a id="more"></a><h2 id="MySQL数据库优化总概"><a href="#MySQL数据库优化总概" class="headerlink" title="MySQL数据库优化总概"></a>MySQL数据库优化总概</h2><table><thead><tr><th>🚩组合拳（一）</th><th>组合拳（二）</th><th>组合拳（三）</th><th>组合拳（四）</th></tr></thead><tbody><tr><td>索引</td><td>体系结构</td><td>应用优化</td><td>MySQL 常用工具</td></tr><tr><td>视图</td><td>存储引擎</td><td>查询缓存优化</td><td>MySQL 日志</td></tr><tr><td>存储过程和函数</td><td>优化SQL步骤</td><td>内存管理及优化</td><td>MySQL 主从复制</td></tr><tr><td>触发器</td><td>索引使用</td><td>MySQL锁问题</td><td></td></tr><tr><td></td><td>SQL优化</td><td>常用SQL技巧</td></tr></tbody></table><h3 id="1-索引"><a href="#1-索引" class="headerlink" title="1. 索引"></a>1. 索引</h3><h4 id="1-1-索引概述"><a href="#1-1-索引概述" class="headerlink" title="1.1 索引概述"></a>1.1 索引概述</h4><p>MySQL官方对索引的定义为：索引（index）是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。如下面示意图所示 :<br><img src="/2021/01/17/mysql-advanced-1/1555902055367.png" alt="1555902055367"> </p><p>左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找快速获取到相应数据。<br>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。索引是数据库中用来提高性能的最常用的工具。</p><h4 id="1-2-索引优势劣势"><a href="#1-2-索引优势劣势" class="headerlink" title="1.2 索引优势劣势"></a>1.2 索引优势劣势</h4><p>优势<br>1） 类似于书籍的目录索引，提高数据检索的效率，降低数据库的IO成本。<br>2） 通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗。</p><p>劣势<br>1） 实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，所以索引列也是要占用空间的。<br>2） 虽然索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</p><h4 id="1-3-索引结构"><a href="#1-3-索引结构" class="headerlink" title="1.3 索引结构"></a>1.3 索引结构</h4><p>索引是在MySQL的存储引擎层中实现的，而不是在服务器层实现的。所以每种存储引擎的索引都不一定完全相同，也不是所有的存储引擎都支持所有的索引类型的。MySQL目前提供了以下4种索引：</p><ul><li>BTREE 索引 ： 最常见的索引类型，大部分索引都支持 B 树索引。</li><li>HASH 索引：只有Memory引擎支持 ， 使用场景简单 。</li><li>R-tree 索引（空间索引）：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少，不做特别介绍。</li><li>Full-text （全文索引） ：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从Mysql5.6版本开始支持全文索引。</li></ul><center><b>MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持</b></center><table><thead><tr><th>索引</th><th>InnoDB引擎</th><th>MyISAM引擎</th><th>Memory引擎</th></tr></thead><tbody><tr><td>BTREE索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>HASH 索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-tree 索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本之后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><p>我们平常所说的索引，如果没有特别指明，都是指B+树（多路搜索树，并不一定是二叉的）结构组织的索引。其中聚集索引、复合索引、前缀索引、唯一索引默认都是使用 B+tree 索引，统称为 索引。</p><h5 id="1-3-1-BTREE-结构"><a href="#1-3-1-BTREE-结构" class="headerlink" title="1.3.1 BTREE 结构"></a>1.3.1 BTREE 结构</h5><p>BTree又叫多路平衡搜索树，一颗m叉的BTree特性如下：</p><ul><li>树中每个节点最多包含m个孩子。</li><li>除根节点与叶子节点外，每个节点至少有[ceil(m/2)]个孩子。</li><li>若根节点不是叶子节点，则至少有两个孩子。</li><li>所有的叶子节点都在同一层。</li><li>每个非叶子节点由n个key与n+1个指针组成，其中[ceil(m/2)-1] &lt;= n &lt;= m-1 </li></ul><p>以5叉BTree为例，key的数量：公式推导[ceil(m/2)-1] &lt;= n &lt;= m-1。所以 2 &lt;= n &lt;=4 。当n&gt;4时，中间节点分裂到父节点，两边节点分裂。<br>插入 C N G A H E K Q M F W L T Z D P R X Y S 数据为例。</p><p>演变过程如下：</p><p>1). 插入前4个字母 C N G A </p><p><img src="/2021/01/17/mysql-advanced-1/1555944126588.png" alt="1555944126588"> </p><p>2). 插入H，n&gt;4，中间元素G字母向上分裂到新的节点</p><p><img src="/2021/01/17/mysql-advanced-1/1555944549825.png" alt="1555944549825"> </p><p>3). 插入E，K，Q不需要分裂</p><p><img src="/2021/01/17/mysql-advanced-1/1555944596893.png" alt="1555944596893"> </p><p>4). 插入M，中间元素M字母向上分裂到父节点G</p><p><img src="/2021/01/17/mysql-advanced-1/1555944652560.png" alt="1555944652560"> </p><p>5). 插入F，W，L，T不需要分裂</p><p><img src="/2021/01/17/mysql-advanced-1/1555944686928.png" alt="1555944686928"> </p><p>6). 插入Z，中间元素T向上分裂到父节点中 </p><p><img src="/2021/01/17/mysql-advanced-1/1555944713486.png" alt="1555944713486"> </p><p>7). 插入D，中间元素D向上分裂到父节点中。然后插入P，R，X，Y不需要分裂</p><p><img src="/2021/01/17/mysql-advanced-1/1555944749984.png" alt="1555944749984"> </p><p>8). 最后插入S，NPQR节点n&gt;5，中间节点Q向上分裂，但分裂后父节点DGMT的n&gt;5，中间节点M向上分裂</p><p><img src="/2021/01/17/mysql-advanced-1/1555944848294.png" alt="1555944848294"> </p><p>到此，该BTREE树就已经构建完成了， BTREE树 和 二叉树 相比， 查询数据的效率更高， 因为对于相同的数据量来说，BTREE的层级结构比二叉树小，因此搜索速度快。</p><h5 id="1-3-3-B-TREE-结构"><a href="#1-3-3-B-TREE-结构" class="headerlink" title="1.3.3 B+TREE 结构"></a>1.3.3 B+TREE 结构</h5><p>B+Tree为BTree的变种，B+Tree与BTree的区别为：</p><p>1). n叉B+Tree最多含有n个key，而BTree最多含有n-1个key。<br>2). B+Tree的叶子节点保存所有的key信息，依key大小顺序排列。<br>3). 所有的非叶子节点都可以看作是key的索引部分。</p><p><img src="/2021/01/17/mysql-advanced-1/00001.jpg" alt="1555906287178"> </p><p>由于B+Tree只有叶子节点保存key信息，查询任何key都要从root走到叶子。所以B+Tree的查询效率更加稳定。</p><h5 id="1-3-3-MySQL中的B-Tree"><a href="#1-3-3-MySQL中的B-Tree" class="headerlink" title="1.3.3 MySQL中的B+Tree"></a>1.3.3 MySQL中的B+Tree</h5><p>MySql索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能。</p><p>MySQL中的 B+Tree 索引结构示意图: </p><p><img src="/2021/01/17/mysql-advanced-1/1555906287178.png" alt="1555906287178">  </p><h4 id="1-4-索引分类"><a href="#1-4-索引分类" class="headerlink" title="1.4 索引分类"></a>1.4 索引分类</h4><p>1） 单值索引 ：即一个索引只包含单个列，一个表可以有多个单列索引<br>2） 唯一索引 ：索引列的值必须唯一，但允许有空值<br>3） 复合索引 ：即一个索引包含多个列</p><h4 id="1-5-索引语法"><a href="#1-5-索引语法" class="headerlink" title="1.5 索引语法"></a>1.5 索引语法</h4><p>索引在创建表的时候，可以同时创建， 也可以随时增加新的索引。</p><p>准备环境:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> demo_01 <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span><span class="token keyword">use</span> demo_01<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>city_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>city_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>country_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>city_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>country<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>country_id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>country_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>country_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>city_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>city_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>country_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'西安'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>city_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>city_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>country_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'NewYork'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>city_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>city_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>country_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>city_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>city_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>country_id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>country<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>country_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>country_name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'China'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>country<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>country_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>country_name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'America'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>country<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>country_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>country_name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Japan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">`</span>country<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>country_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>country_name<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'UK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="1-5-1-创建索引"><a href="#1-5-1-创建索引" class="headerlink" title="1.5.1 创建索引"></a>1.5.1 创建索引</h5><p>语法 ：     </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span>     <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span><span class="token operator">|</span>FULLTEXT<span class="token operator">|</span>SPATIAL<span class="token punctuation">]</span>  <span class="token keyword">INDEX</span> index_name <span class="token punctuation">[</span><span class="token keyword">USING</span>  index_type<span class="token punctuation">]</span><span class="token keyword">ON</span> tbl_name<span class="token punctuation">(</span>index_col_name<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>index_col_name : column_name<span class="token punctuation">[</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span></code></pre><p>示例 ： 为city表中的city_name字段创建索引 ；</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> idx_city_name <span class="token keyword">on</span> city<span class="token punctuation">(</span>city_name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="1-5-2-查看索引"><a href="#1-5-2-查看索引" class="headerlink" title="1.5.2 查看索引"></a>1.5.2 查看索引</h5><p>语法： </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">index</span>  <span class="token keyword">from</span>  table_name<span class="token punctuation">;</span></code></pre><p>示例：查看city表中的索引信息；</p><p><img src="/2021/01/17/mysql-advanced-1/1551440511890.png" alt="1551440511890"> </p><p><img src="/2021/01/17/mysql-advanced-1/1551440544483.png" alt="1551440544483">      </p><h5 id="1-5-3-删除索引"><a href="#1-5-3-删除索引" class="headerlink" title="1.5.3 删除索引"></a>1.5.3 删除索引</h5><p>语法 ：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span>  <span class="token keyword">INDEX</span>  index_name  <span class="token keyword">ON</span>  tbl_name<span class="token punctuation">;</span></code></pre><p>示例 ： 想要删除city表上的索引idx_city_name，可以操作如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">index</span> idx_city_name <span class="token keyword">on</span> city<span class="token punctuation">;</span></code></pre><h5 id="1-5-4-ALTER命令"><a href="#1-5-4-ALTER命令" class="headerlink" title="1.5.4 ALTER命令"></a>1.5.4 ALTER命令</h5><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 添加一个主键,索引值必须唯一,且不能为NULL</span><span class="token keyword">alter</span>  <span class="token keyword">table</span>  tb_name  <span class="token keyword">add</span>  <span class="token keyword">primary</span>  <span class="token keyword">key</span><span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 添加唯一索引,索引的值必须唯一(除了NULL外,NULL可能会出现多次)</span><span class="token keyword">alter</span>  <span class="token keyword">table</span>  tb_name  <span class="token keyword">add</span>  <span class="token keyword">unique</span> index_name<span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 添加普通索引,索引值可以出现多次</span><span class="token keyword">alter</span>  <span class="token keyword">table</span>  tb_name  <span class="token keyword">add</span>  <span class="token keyword">index</span> index_name<span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 指定了索引为FULLTEXT,用于全文索引    </span><span class="token keyword">alter</span>  <span class="token keyword">table</span>  tb_name  <span class="token keyword">add</span>  fulltext  index_name<span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="1-6-索引设计原则"><a href="#1-6-索引设计原则" class="headerlink" title="1.6 索引设计原则"></a>1.6 索引设计原则</h4><p>​    索引的设计可以遵循一些已有的原则，创建索引的时候请尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引。</p><ul><li>对查询频次较高，且数据量比较大的表建立索引。</li><li>索引字段的选择，最佳候选列应当从where子句的条件中提取，如果where子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合。</li><li>使用唯一索引，区分度越高，使用索引的效率越高。</li><li>索引可以有效的提升查询数据的效率，但索引数量不是多多益善，索引越多，维护索引的代价自然也就水涨船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价，降低DML操作的效率，增加相应操作的时间消耗。另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但无疑提高了选择的代价。</li><li>使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I/O效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，相应的可以有效的提升MySQL访问索引的I/O效率。</li><li>利用最左前缀，N个列组合而成的组合索引，那么相当于是创建了N个索引，如果查询时where子句中使用了组成该索引的前几个字段，那么这条查询SQL可以利用组合索引来提升查询效率。</li></ul><pre class=" language-sql"><code class="language-sql">创建复合索引:<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_name_email_status <span class="token keyword">ON</span> tb_seller<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>email<span class="token punctuation">,</span><span class="token keyword">STATUS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>就相当于对name 创建索引 <span class="token punctuation">;</span>对name <span class="token punctuation">,</span> email 创建了索引 <span class="token punctuation">;</span>对name <span class="token punctuation">,</span> email<span class="token punctuation">,</span> <span class="token keyword">status</span> 创建了索引 <span class="token punctuation">;</span></code></pre><h3 id="2-视图"><a href="#2-视图" class="headerlink" title="2. 视图"></a>2. 视图</h3><h4 id="2-1-视图概述"><a href="#2-1-视图概述" class="headerlink" title="2.1 视图概述"></a>2.1 视图概述</h4><p>​    视图（View）是一种虚拟存在的表。视图并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。通俗的讲，视图就是一条SELECT语句执行后返回的结果集。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。<br>视图相对于普通的表的优势主要包括以下几项。</p><ul><li>简单：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集。</li><li>安全：使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行某个列，但是通过视图就可以简单的实现。</li><li>数据独立：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</li></ul><h4 id="2-2-创建或者修改视图"><a href="#2-2-创建或者修改视图" class="headerlink" title="2.2 创建或者修改视图"></a>2.2 创建或者修改视图</h4><p>创建视图的语法为：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token operator">OR</span> REPLACE<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">ALGORITHM</span> <span class="token operator">=</span> {<span class="token keyword">UNDEFINED</span> <span class="token operator">|</span> <span class="token keyword">MERGE</span> <span class="token operator">|</span> <span class="token keyword">TEMPTABLE</span>}<span class="token punctuation">]</span><span class="token keyword">VIEW</span> view_name <span class="token punctuation">[</span><span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">AS</span> select_statement<span class="token punctuation">[</span><span class="token keyword">WITH</span> <span class="token punctuation">[</span><span class="token keyword">CASCADED</span> <span class="token operator">|</span> <span class="token keyword">LOCAL</span><span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">]</span></code></pre><p>修改视图的语法为：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token punctuation">[</span><span class="token keyword">ALGORITHM</span> <span class="token operator">=</span> {<span class="token keyword">UNDEFINED</span> <span class="token operator">|</span> <span class="token keyword">MERGE</span> <span class="token operator">|</span> <span class="token keyword">TEMPTABLE</span>}<span class="token punctuation">]</span><span class="token keyword">VIEW</span> view_name <span class="token punctuation">[</span><span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">AS</span> select_statement<span class="token punctuation">[</span><span class="token keyword">WITH</span> <span class="token punctuation">[</span><span class="token keyword">CASCADED</span> <span class="token operator">|</span> <span class="token keyword">LOCAL</span><span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">]</span></code></pre><pre><code>选项 :     WITH [CASCADED | LOCAL] CHECK OPTION 决定了是否允许更新数据使记录不再满足视图的条件。    LOCAL ： 只要满足本视图的条件就可以更新。    CASCADED ： 必须满足所有针对该视图的所有视图的条件才可以更新。 默认值.</code></pre><p>示例 , 创建city_country_view视图 , 执行如下SQL : </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">view</span> city_country_view <span class="token keyword">as</span> <span class="token keyword">select</span> t<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>country_name <span class="token keyword">from</span> country <span class="token number">c</span> <span class="token punctuation">,</span> city t <span class="token keyword">where</span> <span class="token number">c</span><span class="token punctuation">.</span>country_id <span class="token operator">=</span> t<span class="token punctuation">.</span>country_id<span class="token punctuation">;</span></code></pre><p>查询视图 : </p><p><img src="/2021/01/17/mysql-advanced-1/1551503428635.png" alt="1551503428635">     </p><h4 id="2-3-查看视图"><a href="#2-3-查看视图" class="headerlink" title="2.3 查看视图"></a>2.3 查看视图</h4><p>​    从 MySQL 5.1 版本开始，使用 SHOW TABLES 命令的时候不仅显示表的名字，同时也会显示视图的名字，而不存在单独显示视图的 SHOW VIEWS 命令。</p><p><img src="/2021/01/17/mysql-advanced-1/1551537565159.png" alt="1551537565159">     </p><p>同样，在使用 SHOW TABLE STATUS 命令的时候，不但可以显示表的信息，同时也可以显示视图的信息。    </p><p><img src="/2021/01/17/mysql-advanced-1/1551537646323.png" alt="1551537646323"> </p><p>如果需要查询某个视图的定义，可以使用 SHOW CREATE VIEW 命令进行查看 ： </p><p><img src="/2021/01/17/mysql-advanced-1/1551588962944.png" alt="1551588962944">  </p><h4 id="2-4-删除视图"><a href="#2-4-删除视图" class="headerlink" title="2.4 删除视图"></a>2.4 删除视图</h4><p>语法 : </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> view_name <span class="token punctuation">[</span><span class="token punctuation">,</span> view_name<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">RESTRICT</span> <span class="token operator">|</span> <span class="token keyword">CASCADE</span><span class="token punctuation">]</span>    </code></pre><p>示例 , 删除视图city_country_view :</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> city_country_view <span class="token punctuation">;</span></code></pre><h3 id="3-存储过程和函数"><a href="#3-存储过程和函数" class="headerlink" title="3. 存储过程和函数"></a>3. 存储过程和函数</h3><h4 id="3-1-存储过程和函数概述"><a href="#3-1-存储过程和函数概述" class="headerlink" title="3.1 存储过程和函数概述"></a>3.1 存储过程和函数概述</h4><p>​    存储过程和函数是  事先经过编译并存储在数据库中的一段 SQL 语句的集合，调用存储过程和函数可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。    </p><p>存储过程和函数的区别在于函数必须有返回值，而存储过程没有。<br>​    函数 ： 是一个有返回值的过程 ；<br>​    过程 ： 是一个没有返回值的函数 ；</p><h4 id="3-2-创建存储过程"><a href="#3-2-创建存储过程" class="headerlink" title="3.2 创建存储过程"></a>3.2 创建存储过程</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> procedure_name <span class="token punctuation">(</span><span class="token punctuation">[</span>proc_parameter<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token comment" spellcheck="true">-- SQL语句</span><span class="token keyword">end</span> <span class="token punctuation">;</span></code></pre><p>示例 ：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> <span class="token string">'Hello Mysql'</span> <span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token keyword">delimiter</span> <span class="token punctuation">;</span></code></pre><p><strong><font color="red">知识小贴士</font></strong></p><blockquote><p>DELIMITER</p></blockquote><p>​    该关键字用来声明SQL语句的分隔符 , 告诉 MySQL 解释器，该段命令是否已经结束了，mysql是否可以执行了。默认情况下，delimiter是分号;。在命令行客户端中，如果有一行命令以分号结束，那么回车后，mysql将会执行该命令。</p><h4 id="3-3-调用存储过程"><a href="#3-3-调用存储过程" class="headerlink" title="3.3 调用存储过程"></a>3.3 调用存储过程</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">call</span> procedure_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    </code></pre><h4 id="3-4-查看存储过程"><a href="#3-4-查看存储过程" class="headerlink" title="3.4 查看存储过程"></a>3.4 查看存储过程</h4><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询db_name数据库中的所有的存储过程</span><span class="token keyword">select</span> name <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">proc</span> <span class="token keyword">where</span> <span class="token number">db</span><span class="token operator">=</span><span class="token string">'db_name'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查询存储过程的状态信息</span><span class="token keyword">show</span> <span class="token keyword">procedure</span> <span class="token keyword">status</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查询某个存储过程的定义</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">procedure</span> test<span class="token punctuation">.</span>pro_test1 \G<span class="token punctuation">;</span></code></pre><h4 id="3-5-删除存储过程"><a href="#3-5-删除存储过程" class="headerlink" title="3.5 删除存储过程"></a>3.5 删除存储过程</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span>  <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> sp_name<span class="token punctuation">;</span></code></pre><h4 id="3-6-语法"><a href="#3-6-语法" class="headerlink" title="3.6 语法"></a>3.6 语法</h4><p>存储过程是可以编程的，意味着可以使用变量，表达式，控制结构 ， 来完成比较复杂的功能。</p><h5 id="3-6-1-变量"><a href="#3-6-1-变量" class="headerlink" title="3.6.1 变量"></a>3.6.1 变量</h5><ul><li><p>DECLARE<br> 通过 DECLARE 可以定义一个局部变量，该变量的作用范围只能在 BEGIN…END 块中。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DECLARE</span> var_name<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token keyword">type</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> <span class="token keyword">value</span><span class="token punctuation">]</span></code></pre><p>示例 : </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test2<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>   <span class="token keyword">declare</span> num <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">select</span> num<span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">end</span>$<span class="token keyword">delimiter</span> <span class="token punctuation">;</span> </code></pre></li><li><p>SET<br>  直接赋值使用 SET，可以赋常量或者赋表达式，具体语法如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> var_name <span class="token operator">=</span> expr <span class="token punctuation">[</span><span class="token punctuation">,</span> var_name <span class="token operator">=</span> expr<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>示例 : </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span>  <span class="token keyword">PROCEDURE</span> pro_test3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">DECLARE</span> NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">SET</span> NAME <span class="token operator">=</span> <span class="token string">'MYSQL'</span><span class="token punctuation">;</span>    <span class="token keyword">SELECT</span> NAME <span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><p>也可以通过select … into 方式进行赋值操作 :</p></li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span>  <span class="token keyword">PROCEDURE</span> pro_test5<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>    <span class="token keyword">declare</span>  countnum <span class="token keyword">int</span><span class="token punctuation">;</span>    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> countnum <span class="token keyword">from</span> city<span class="token punctuation">;</span>    <span class="token keyword">select</span> countnum<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><h5 id="3-6-2-if条件判断"><a href="#3-6-2-if条件判断" class="headerlink" title="3.6.2 if条件判断"></a>3.6.2 if条件判断</h5><p>语法结构 : </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> search_condition <span class="token keyword">then</span> statement_list    <span class="token punctuation">[</span>elseif search_condition <span class="token keyword">then</span> statement_list<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">[</span><span class="token keyword">else</span> statement_list<span class="token punctuation">]</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span></code></pre><p>示例 : </p><p>根据定义的身高变量，判定当前身高的所属的身材类型<br>    180 及以上 ———-&gt; 身材高挑<br>    170 - 180  ———&gt; 标准身材<br>    170 以下  ———-&gt; 一般身材</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test6<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span>  height  <span class="token keyword">int</span>  <span class="token keyword">default</span>  <span class="token number">175</span><span class="token punctuation">;</span>   <span class="token keyword">declare</span>  description  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span>  height <span class="token operator">>=</span> <span class="token number">180</span>  <span class="token keyword">then</span>    <span class="token keyword">set</span> description <span class="token operator">=</span> <span class="token string">'身材高挑'</span><span class="token punctuation">;</span>  elseif height <span class="token operator">>=</span> <span class="token number">170</span> <span class="token operator">and</span> height <span class="token operator">&lt;</span> <span class="token number">180</span>  <span class="token keyword">then</span>    <span class="token keyword">set</span> description <span class="token operator">=</span> <span class="token string">'标准身材'</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">set</span> description <span class="token operator">=</span> <span class="token string">'一般身材'</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>  <span class="token keyword">select</span> description <span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token keyword">delimiter</span> <span class="token punctuation">;</span></code></pre><p>调用结果为 :<br><img src="/2021/01/17/mysql-advanced-1/1552057035580.png" alt="1552057035580"> </p><h5 id="3-6-3-传递参数"><a href="#3-6-3-传递参数" class="headerlink" title="3.6.3 传递参数"></a>3.6.3 传递参数</h5><p>语法格式 : </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> procedure_name<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">in</span><span class="token operator">/</span><span class="token keyword">out</span><span class="token operator">/</span><span class="token keyword">inout</span><span class="token punctuation">]</span> 参数名   参数类型<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">IN</span> :   该参数可以作为输入<span class="token punctuation">,</span>也就是需要调用方传入值 <span class="token punctuation">,</span> 默认<span class="token keyword">OUT</span>:   该参数作为输出<span class="token punctuation">,</span>也就是该参数可以作为返回值<span class="token keyword">INOUT</span>: 既可以作为输入参数<span class="token punctuation">,</span>也可以作为输出参数</code></pre><p><strong>1) IN - 输入</strong></p><p>示例  :<br>根据定义的身高变量，判定当前身高的所属的身材类型 </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test5<span class="token punctuation">(</span><span class="token operator">in</span> height <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> description <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> height <span class="token operator">>=</span> <span class="token number">180</span> <span class="token keyword">then</span>    <span class="token keyword">set</span> description<span class="token operator">=</span><span class="token string">'身材高挑'</span><span class="token punctuation">;</span>  elseif height <span class="token operator">>=</span> <span class="token number">170</span> <span class="token operator">and</span> height <span class="token operator">&lt;</span> <span class="token number">180</span> <span class="token keyword">then</span>    <span class="token keyword">set</span> description<span class="token operator">=</span><span class="token string">'标准身材'</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">set</span> description<span class="token operator">=</span><span class="token string">'一般身材'</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>  <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'身高 '</span><span class="token punctuation">,</span> height <span class="token punctuation">,</span> <span class="token string">'对应的身材类型为:'</span><span class="token punctuation">,</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token keyword">delimiter</span> <span class="token punctuation">;</span></code></pre><p><strong>2) OUT-输出</strong></p><p>示例:</p><p>根据传入的身高变量，获取当前身高的所属的身材类型  </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test5<span class="token punctuation">(</span><span class="token operator">in</span> height <span class="token keyword">int</span> <span class="token punctuation">,</span> <span class="token keyword">out</span> description <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">if</span> height <span class="token operator">>=</span> <span class="token number">180</span> <span class="token keyword">then</span>    <span class="token keyword">set</span> description<span class="token operator">=</span><span class="token string">'身材高挑'</span><span class="token punctuation">;</span>  elseif height <span class="token operator">>=</span> <span class="token number">170</span> <span class="token operator">and</span> height <span class="token operator">&lt;</span> <span class="token number">180</span> <span class="token keyword">then</span>    <span class="token keyword">set</span> description<span class="token operator">=</span><span class="token string">'标准身材'</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">set</span> description<span class="token operator">=</span><span class="token string">'一般身材'</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span>$    </code></pre><p>调用:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">call</span> pro_test5<span class="token punctuation">(</span><span class="token number">168</span><span class="token punctuation">,</span> <span class="token variable">@description</span><span class="token punctuation">)</span>$<span class="token keyword">select</span> <span class="token variable">@description$</span></code></pre><font color="red"><strong>小知识</strong> </font><blockquote><p>@description </p></blockquote><p>   这种变量要在变量名称前面加上“@”符号，叫做用户会话变量，代表整个会话过程他都是有作用的，这个类似于全局变量一样。</p><blockquote><p>@@global.sort_buffer_size </p></blockquote><p>   这种在变量前加上 “@@” 符号, 叫做 系统变量 </p><h5 id="3-6-4-case结构"><a href="#3-6-4-case结构" class="headerlink" title="3.6.4 case结构"></a>3.6.4 case结构</h5><p>语法结构 : </p><pre class=" language-sql"><code class="language-sql">方式一 : <span class="token keyword">CASE</span> case_value  <span class="token keyword">WHEN</span> when_value <span class="token keyword">THEN</span> statement_list  <span class="token punctuation">[</span><span class="token keyword">WHEN</span> when_value <span class="token keyword">THEN</span> statement_list<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">[</span><span class="token keyword">ELSE</span> statement_list<span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span>方式二 : <span class="token keyword">CASE</span>  <span class="token keyword">WHEN</span> search_condition <span class="token keyword">THEN</span> statement_list  <span class="token punctuation">[</span><span class="token keyword">WHEN</span> search_condition <span class="token keyword">THEN</span> statement_list<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">[</span><span class="token keyword">ELSE</span> statement_list<span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span></code></pre><p>示例  :<br>给定一个月份, 然后计算出所在的季度</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test9<span class="token punctuation">(</span>month <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> result <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">case</span>     <span class="token keyword">when</span> month <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">and</span> month <span class="token operator">&lt;=</span><span class="token number">3</span> <span class="token keyword">then</span>       <span class="token keyword">set</span> result <span class="token operator">=</span> <span class="token string">'第一季度'</span><span class="token punctuation">;</span>    <span class="token keyword">when</span> month <span class="token operator">>=</span> <span class="token number">4</span> <span class="token operator">and</span> month <span class="token operator">&lt;=</span><span class="token number">6</span> <span class="token keyword">then</span>       <span class="token keyword">set</span> result <span class="token operator">=</span> <span class="token string">'第二季度'</span><span class="token punctuation">;</span>    <span class="token keyword">when</span> month <span class="token operator">>=</span> <span class="token number">7</span> <span class="token operator">and</span> month <span class="token operator">&lt;=</span><span class="token number">9</span> <span class="token keyword">then</span>       <span class="token keyword">set</span> result <span class="token operator">=</span> <span class="token string">'第三季度'</span><span class="token punctuation">;</span>    <span class="token keyword">when</span> month <span class="token operator">>=</span> <span class="token number">10</span> <span class="token operator">and</span> month <span class="token operator">&lt;=</span><span class="token number">12</span> <span class="token keyword">then</span>       <span class="token keyword">set</span> result <span class="token operator">=</span> <span class="token string">'第四季度'</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span>  <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'您输入的月份为 :'</span><span class="token punctuation">,</span> month <span class="token punctuation">,</span> <span class="token string">' , 该月份为 : '</span> <span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token keyword">as</span> content <span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token keyword">delimiter</span> <span class="token punctuation">;</span></code></pre><h5 id="3-6-5-while循环"><a href="#3-6-5-while循环" class="headerlink" title="3.6.5 while循环"></a>3.6.5 while循环</h5><p>语法结构: </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">while</span> search_condition <span class="token keyword">do</span>    statement_list<span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span></code></pre><p>需求:</p><p>示例  :<br>计算从1加到n的值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test8<span class="token punctuation">(</span>n <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> total <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">declare</span> num <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> num<span class="token operator">&lt;=</span>n <span class="token keyword">do</span>    <span class="token keyword">set</span> total <span class="token operator">=</span> total <span class="token operator">+</span> num<span class="token punctuation">;</span>    <span class="token keyword">set</span> num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>  <span class="token keyword">select</span> total<span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token keyword">delimiter</span> <span class="token punctuation">;</span></code></pre><h5 id="3-6-6-repeat结构"><a href="#3-6-6-repeat结构" class="headerlink" title="3.6.6 repeat结构"></a>3.6.6 repeat结构</h5><p>有条件的循环控制语句, 当满足条件的时候退出循环 。while 是满足条件才执行，repeat 是满足条件就退出循环。</p><p>语法结构 : </p><pre class=" language-sql"><code class="language-sql">REPEAT  statement_list  UNTIL search_condition<span class="token keyword">END</span> REPEAT<span class="token punctuation">;</span></code></pre><p>示例  :<br>计算从1加到n的值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test10<span class="token punctuation">(</span>n <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> total <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>  repeat     <span class="token keyword">set</span> total <span class="token operator">=</span> total <span class="token operator">+</span> n<span class="token punctuation">;</span>    <span class="token keyword">set</span> n <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    until n<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">end</span> repeat<span class="token punctuation">;</span>  <span class="token keyword">select</span> total <span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token keyword">delimiter</span> <span class="token punctuation">;</span></code></pre><h5 id="3-6-7-loop语句"><a href="#3-6-7-loop语句" class="headerlink" title="3.6.7 loop语句"></a>3.6.7 loop语句</h5><p>LOOP 实现简单的循环，退出循环的条件需要使用其他的语句定义，通常可以使用 LEAVE 语句实现，具体语法如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token punctuation">[</span>begin_label:<span class="token punctuation">]</span> LOOP  statement_list<span class="token keyword">END</span> LOOP <span class="token punctuation">[</span>end_label<span class="token punctuation">]</span></code></pre><p>如果不在 statement_list 中增加退出循环的语句，那么 LOOP 语句可以用来实现简单的死循环。</p><h5 id="3-6-8-leave语句"><a href="#3-6-8-leave语句" class="headerlink" title="3.6.8 leave语句"></a>3.6.8 leave语句</h5><p>用来从标注的流程构造中退出，通常和 BEGIN … END 或者循环一起使用。下面是一个使用 LOOP 和 LEAVE 的简单例子 , 退出循环：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test11<span class="token punctuation">(</span>n <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>  <span class="token keyword">declare</span> total <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>  ins: LOOP    <span class="token keyword">IF</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">then</span>      leave ins<span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> total <span class="token operator">=</span> total <span class="token operator">+</span> n<span class="token punctuation">;</span>    <span class="token keyword">set</span> n <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">END</span> LOOP ins<span class="token punctuation">;</span>  <span class="token keyword">select</span> total<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">delimiter</span> <span class="token punctuation">;</span></code></pre><h5 id="3-6-9-游标-光标"><a href="#3-6-9-游标-光标" class="headerlink" title="3.6.9 游标/光标"></a>3.6.9 游标/光标</h5><p>游标是用来存储查询结果集的数据类型 , 在存储过程和函数中可以使用光标对结果集进行循环的处理。光标的使用包括光标的声明、OPEN、FETCH 和 CLOSE，其语法分别如下。</p><p>声明光标：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DECLARE</span> cursor_name <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> select_statement <span class="token punctuation">;</span></code></pre><p>OPEN 光标：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">OPEN</span> cursor_name <span class="token punctuation">;</span></code></pre><p>FETCH 光标：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">FETCH</span> cursor_name <span class="token keyword">INTO</span> var_name <span class="token punctuation">[</span><span class="token punctuation">,</span> var_name<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>CLOSE 光标：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CLOSE</span> cursor_name <span class="token punctuation">;</span></code></pre><p>示例 : </p><p>初始化脚本:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>  id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span> <span class="token punctuation">,</span>  name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>  age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>  salary <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'薪水'</span><span class="token punctuation">,</span>  <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8 <span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'金毛狮王'</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">3800</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'白眉鹰王'</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'青翼蝠王'</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">2800</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'紫衫龙王'</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询emp表中数据, 并逐行获取进行展示</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test11<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">declare</span> e_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">declare</span> e_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">declare</span> e_age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">declare</span> e_salary <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">declare</span> emp_result <span class="token keyword">cursor</span> <span class="token keyword">for</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>  <span class="token keyword">open</span> emp_result<span class="token punctuation">;</span>  <span class="token keyword">fetch</span> emp_result <span class="token keyword">into</span> e_id<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_age<span class="token punctuation">,</span>e_salary<span class="token punctuation">;</span>  <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'id='</span><span class="token punctuation">,</span>e_id <span class="token punctuation">,</span> <span class="token string">', name='</span><span class="token punctuation">,</span>e_name<span class="token punctuation">,</span> <span class="token string">', age='</span><span class="token punctuation">,</span> e_age<span class="token punctuation">,</span> <span class="token string">', 薪资为: '</span><span class="token punctuation">,</span>e_salary<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">fetch</span> emp_result <span class="token keyword">into</span> e_id<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_age<span class="token punctuation">,</span>e_salary<span class="token punctuation">;</span>  <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'id='</span><span class="token punctuation">,</span>e_id <span class="token punctuation">,</span> <span class="token string">', name='</span><span class="token punctuation">,</span>e_name<span class="token punctuation">,</span> <span class="token string">', age='</span><span class="token punctuation">,</span> e_age<span class="token punctuation">,</span> <span class="token string">', 薪资为: '</span><span class="token punctuation">,</span>e_salary<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">fetch</span> emp_result <span class="token keyword">into</span> e_id<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_age<span class="token punctuation">,</span>e_salary<span class="token punctuation">;</span>  <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'id='</span><span class="token punctuation">,</span>e_id <span class="token punctuation">,</span> <span class="token string">', name='</span><span class="token punctuation">,</span>e_name<span class="token punctuation">,</span> <span class="token string">', age='</span><span class="token punctuation">,</span> e_age<span class="token punctuation">,</span> <span class="token string">', 薪资为: '</span><span class="token punctuation">,</span>e_salary<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">fetch</span> emp_result <span class="token keyword">into</span> e_id<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_age<span class="token punctuation">,</span>e_salary<span class="token punctuation">;</span>  <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'id='</span><span class="token punctuation">,</span>e_id <span class="token punctuation">,</span> <span class="token string">', name='</span><span class="token punctuation">,</span>e_name<span class="token punctuation">,</span> <span class="token string">', age='</span><span class="token punctuation">,</span> e_age<span class="token punctuation">,</span> <span class="token string">', 薪资为: '</span><span class="token punctuation">,</span>e_salary<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">fetch</span> emp_result <span class="token keyword">into</span> e_id<span class="token punctuation">,</span>e_name<span class="token punctuation">,</span>e_age<span class="token punctuation">,</span>e_salary<span class="token punctuation">;</span>  <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'id='</span><span class="token punctuation">,</span>e_id <span class="token punctuation">,</span> <span class="token string">', name='</span><span class="token punctuation">,</span>e_name<span class="token punctuation">,</span> <span class="token string">', age='</span><span class="token punctuation">,</span> e_age<span class="token punctuation">,</span> <span class="token string">', 薪资为: '</span><span class="token punctuation">,</span>e_salary<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">close</span> emp_result<span class="token punctuation">;</span><span class="token keyword">end</span>$</code></pre><p>通过循环结构 , 获取游标中的数据 : </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test12<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">DECLARE</span> id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span> age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span> salary <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span> has_data <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span> emp_result <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span> <span class="token keyword">EXIT</span> <span class="token keyword">HANDLER</span> <span class="token keyword">FOR</span> <span class="token operator">NOT</span> FOUND <span class="token keyword">set</span> has_data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">open</span> emp_result<span class="token punctuation">;</span>  repeat    <span class="token keyword">fetch</span> emp_result <span class="token keyword">into</span> id <span class="token punctuation">,</span> name <span class="token punctuation">,</span> age <span class="token punctuation">,</span> salary<span class="token punctuation">;</span>    <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'id为'</span><span class="token punctuation">,</span>id<span class="token punctuation">,</span> <span class="token string">', name 为'</span> <span class="token punctuation">,</span>name <span class="token punctuation">,</span> <span class="token string">', age为 '</span> <span class="token punctuation">,</span>age <span class="token punctuation">,</span> <span class="token string">', 薪水为: '</span><span class="token punctuation">,</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    until has_data <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">end</span> repeat<span class="token punctuation">;</span>  <span class="token keyword">close</span> emp_result<span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span> </code></pre><h4 id="3-7-存储函数"><a href="#3-7-存储函数" class="headerlink" title="3.7 存储函数"></a>3.7 存储函数</h4><p>语法结构:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> function_name<span class="token punctuation">(</span><span class="token punctuation">[</span>param <span class="token keyword">type</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">RETURNS</span> <span class="token keyword">type</span> <span class="token keyword">BEGIN</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">END</span><span class="token punctuation">;</span></code></pre><p>示例 : </p><p>定义一个存储过程, 请求满足条件的总记录数 ;</p><pre class=" language-SQL"><code class="language-SQL">delimiter $create function count_city(countryId int)returns intbegin  declare cnum int ;  select count(*) into cnum from city where country_id = countryId;  return cnum;end$delimiter ;</code></pre><p>调用: </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> count_city<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> count_city<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-触发器"><a href="#4-触发器" class="headerlink" title="4. 触发器"></a>4. 触发器</h3><h4 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h4><p>触发器是与表有关的数据库对象，指在 insert/update/delete 之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性 , 日志记录 , 数据校验等操作 。</p><p>使用别名 OLD 和 NEW 来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。</p><table><thead><tr><th>触发器类型</th><th>NEW 和 OLD的使用</th></tr></thead><tbody><tr><td>INSERT 型触发器</td><td>NEW 表示将要或者已经新增的数据</td></tr><tr><td>UPDATE 型触发器</td><td>OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据</td></tr><tr><td>DELETE 型触发器</td><td>OLD 表示将要或者已经删除的数据</td></tr></tbody></table><h4 id="4-2-创建触发器"><a href="#4-2-创建触发器" class="headerlink" title="4.2 创建触发器"></a>4.2 创建触发器</h4><p>语法结构 : </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> trigger_name before<span class="token operator">/</span><span class="token keyword">after</span> <span class="token keyword">insert</span><span class="token operator">/</span><span class="token keyword">update</span><span class="token operator">/</span><span class="token keyword">delete</span><span class="token keyword">on</span> tbl_name <span class="token punctuation">[</span> <span class="token keyword">for each row</span> <span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">-- 行级触发器</span><span class="token keyword">begin</span>    trigger_stmt <span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><p>示例 </p><p>通过触发器记录 emp 表的数据变更日志 , 包含增加, 修改 , 删除 ;</p><p>1) 首先创建一张日志表 : </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp_logs<span class="token punctuation">(</span>  id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>  operation <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'操作类型, insert/update/delete'</span><span class="token punctuation">,</span>  operate_time <span class="token keyword">datetime</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'操作时间'</span><span class="token punctuation">,</span>  operate_id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'操作表的ID'</span><span class="token punctuation">,</span>  operate_params <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'操作参数'</span><span class="token punctuation">,</span>  <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></code></pre><p>2) 创建 insert 型触发器，完成插入数据时的日志记录 : </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $<span class="token keyword">create</span> <span class="token keyword">trigger</span> emp_logs_insert_trigger<span class="token keyword">after</span> <span class="token keyword">insert</span> <span class="token keyword">on</span> emp <span class="token keyword">for each row</span> <span class="token keyword">begin</span>  <span class="token keyword">insert</span> <span class="token keyword">into</span> emp_logs <span class="token punctuation">(</span>id<span class="token punctuation">,</span>operation<span class="token punctuation">,</span>operate_time<span class="token punctuation">,</span>operate_id<span class="token punctuation">,</span>operate_params<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'insert'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>id<span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token string">'插入后(id:'</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token string">', name:'</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">', age:'</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token string">', salary:'</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>salary<span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> $<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><p>3) 创建 update 型触发器，完成更新数据时的日志记录 : </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $<span class="token keyword">create</span> <span class="token keyword">trigger</span> emp_logs_update_trigger<span class="token keyword">after</span> <span class="token keyword">update</span> <span class="token keyword">on</span> emp <span class="token keyword">for each row</span> <span class="token keyword">begin</span>  <span class="token keyword">insert</span> <span class="token keyword">into</span> emp_logs <span class="token punctuation">(</span>id<span class="token punctuation">,</span>operation<span class="token punctuation">,</span>operate_time<span class="token punctuation">,</span>operate_id<span class="token punctuation">,</span>operate_params<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'update'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>id<span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token string">'修改前(id:'</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token string">', name:'</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">', age:'</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token string">', salary:'</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>salary<span class="token punctuation">,</span><span class="token string">') , 修改后(id'</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">'name:'</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">', age:'</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token string">', salary:'</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>salary<span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                      <span class="token keyword">end</span> $<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><p>4) 创建delete 行的触发器 , 完成删除数据时的日志记录 : </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $<span class="token keyword">create</span> <span class="token keyword">trigger</span> emp_logs_delete_trigger<span class="token keyword">after</span> <span class="token keyword">delete</span> <span class="token keyword">on</span> emp <span class="token keyword">for each row</span> <span class="token keyword">begin</span>  <span class="token keyword">insert</span> <span class="token keyword">into</span> emp_logs <span class="token punctuation">(</span>id<span class="token punctuation">,</span>operation<span class="token punctuation">,</span>operate_time<span class="token punctuation">,</span>operate_id<span class="token punctuation">,</span>operate_params<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'delete'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>id<span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token string">'删除前(id:'</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token string">', name:'</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">', age:'</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token string">', salary:'</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>salary<span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                                      <span class="token keyword">end</span> $<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span></code></pre><p>5)测试：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'光明左使'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">3500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'光明右使'</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">3200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">update</span> emp <span class="token keyword">set</span> age <span class="token operator">=</span> <span class="token number">39</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></code></pre><h4 id="4-3-删除触发器"><a href="#4-3-删除触发器" class="headerlink" title="4.3 删除触发器"></a>4.3 删除触发器</h4><p>语法结构 : </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">trigger</span> <span class="token punctuation">[</span>schema_name<span class="token punctuation">.</span><span class="token punctuation">]</span>trigger_name</code></pre><p>如果没有指定 schema_name，默认为当前数据库 。</p><h4 id="4-4-查看触发器"><a href="#4-4-查看触发器" class="headerlink" title="4.4 查看触发器"></a>4.4 查看触发器</h4><p>可以通过执行 SHOW TRIGGERS 命令查看触发器的状态、语法等信息。</p><p>语法结构 ： </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> triggers<span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据库优化之组合拳(一) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习指南</title>
      <link href="/2021/01/12/study-guide/"/>
      <url>/2021/01/12/study-guide/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习本身比学习内容更重要<br><a id="more"></a></p></blockquote><p>任务式学习：<br>1.家庭<br>2.工作<br>3.成长</p><h3 id="一、寻找学习资源"><a href="#一、寻找学习资源" class="headerlink" title="一、寻找学习资源"></a>一、寻找学习资源</h3><h4 id="1-1-搜索"><a href="#1-1-搜索" class="headerlink" title="1.1 搜索"></a>1.1 搜索</h4><pre><code>网站、公众号</code></pre><h4 id="1-2-专业平台工具"><a href="#1-2-专业平台工具" class="headerlink" title="1.2 专业平台工具"></a>1.2 专业平台工具</h4><h4 id="1-3-跟人学"><a href="#1-3-跟人学" class="headerlink" title="1.3 跟人学"></a>1.3 跟人学</h4><p>​三级导师制：入门、进圈、拜佛</p><p>入门：第一级导师-任意干这行的人（询问牛人（关注他们，散射他们的关注）、书）<br>​进圈：机会<br>​拜佛：接触：好问题</p><p>好问题：</p><pre><code>1.请问在像您这样的专家心目中，您这个领域公认的大神是谁？2.我特别遗憾，我一直没有机会系统地去学，您这个领域的知识。我四十多岁了，想从现在开始学起，那在入门阶段，您推荐我读哪本书？3.老师，我想在大学毕业之后从事投资工作。您是做投资的，您觉得从事这一行业基本能力的要求是什么？我应该从哪开始作准备？4.老师，从事这个行业，您觉得最关键的环节有哪些？您都遇到过哪几个重要挑战？您是怎么过来的？5.在您这个领域，您觉得一般人和高手之间最大的区别是什么？6.如果您要带一个徒弟，您会重点教他关注哪几个魔鬼细节？为什么是这几个细节特别重要？7.老师，最近好长时间没见了，最近半年您觉得有什么问题、什么新闻或者哪本书，是对您触动特别大的吗？这个问题，是我自己很喜欢问的一个问题。首先，这个问题很轻，对方容易回答。但是在他的回答当中，我们又能收集到很多想法，收获很大。在闲谈的时候，最适合问这样的问题。8.最近你们行业发生了一件XXX大事，您能帮我分析分析，这背后到底是怎么回事吗？9.老师，我现在此时此刻已经在做一件什么事。这个事，我有个难点一直没想明白，能不能请您给我指点一下？10.假如，此刻是你生命的最后十分钟。你有个机会，可以给这个世界留下一段话，说说你自己这个专业。请问你会说什么？</code></pre><h3 id="二、定目标"><a href="#二、定目标" class="headerlink" title="二、定目标"></a>二、定目标</h3><h4 id="2-1-有场景："><a href="#2-1-有场景：" class="headerlink" title="2.1 有场景："></a>2.1 有场景：</h4><h4 id="2-2-有距离：目标和现状有差距，跳一跳才能够得着，"><a href="#2-2-有距离：目标和现状有差距，跳一跳才能够得着，" class="headerlink" title="2.2 有距离：目标和现状有差距，跳一跳才能够得着，"></a>2.2 有距离：目标和现状有差距，跳一跳才能够得着，</h4><h4 id="2-3-有抓手：距离得合适-具体可入手的地方"><a href="#2-3-有抓手：距离得合适-具体可入手的地方" class="headerlink" title="2.3 有抓手：距离得合适,具体可入手的地方"></a>2.3 有抓手：距离得合适,具体可入手的地方</h4><p>2.3.1 开始结束时间<br>​2.3.2 具体的执行动作<br>​2.3.3 执行动作的数量<br>​2.3.4 动作的完成度</p><h4 id="2-4-有阶梯：拒绝平均用力"><a href="#2-4-有阶梯：拒绝平均用力" class="headerlink" title="2.4 有阶梯：拒绝平均用力"></a>2.4 有阶梯：拒绝平均用力</h4><p>从易到难排序，先选最易的处理（小步子原理,先摘好摘的果子）</p><h3 id="三、提高效率"><a href="#三、提高效率" class="headerlink" title="三、提高效率"></a>三、提高效率</h3><h4 id="3-1-五阶学习法"><a href="#3-1-五阶学习法" class="headerlink" title="3.1 五阶学习法"></a>3.1 五阶学习法</h4><p>3.1.1 测试法（设计学习任务）<br>3.1.2 指读法<br>3.1.3 多环境输入法（看听）<br>3.1.4 记忆宫殿（抗遗忘）<br>3.1.5 刷书（不读细,读广,视野）<br>            序言，开头，倒数第二章<br>            居高临下关注（挑战，任务清单）</p><h3 id="四、输出倒逼输入"><a href="#四、输出倒逼输入" class="headerlink" title="四、输出倒逼输入"></a>四、输出倒逼输入</h3><h4 id="4-1-记笔记（两轮笔记法）"><a href="#4-1-记笔记（两轮笔记法）" class="headerlink" title="4.1 记笔记（两轮笔记法）"></a>4.1 记笔记（两轮笔记法）</h4><p>​ 1轮（手写）：实际输入的（关键词记录）  | 当时的想法感受（讯飞语记）<br>​ 2轮 重新用自己的逻辑写出来</p><h4 id="4-2-讲出来"><a href="#4-2-讲出来" class="headerlink" title="4.2 讲出来"></a>4.2 讲出来</h4><p> 10岁-具象能懂，抽象不懂</p><h4 id="4-3-迁移：触类旁通"><a href="#4-3-迁移：触类旁通" class="headerlink" title="4.3 迁移：触类旁通"></a>4.3 迁移：触类旁通</h4><p>​ 4.3.1 能用的场景<br>​ 4.3.2 不能用的场景</p><h4 id="4-4-夯实，拉出操作清单-：清单体（迭代清单1-0-gt-2-0-gt-3-0-gt-…）"><a href="#4-4-夯实，拉出操作清单-：清单体（迭代清单1-0-gt-2-0-gt-3-0-gt-…）" class="headerlink" title="4.4 夯实，拉出操作清单 ：清单体（迭代清单1.0->2.0->3.0-> …）"></a>4.4 夯实，拉出操作清单 ：清单体（迭代清单1.0-&gt;2.0-&gt;3.0-&gt; …）</h4><h3 id="五、正反馈（自驱力）-想方设法"><a href="#五、正反馈（自驱力）-想方设法" class="headerlink" title="五、正反馈（自驱力）-想方设法"></a>五、正反馈（自驱力）-想方设法</h3><p>5.1 记笔记，小本记<br>5.2 公开平台，定期发表自己的成果<br>5.3 环境场（结界）<br>5.4 惊奇日记（每日一句话）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式</title>
      <link href="/2021/01/05/design-pattern/"/>
      <url>/2021/01/05/design-pattern/</url>
      
        <content type="html"><![CDATA[<blockquote><p>概述：<br> 本质：面向对象设计原则的实际运用，是对类的封装、继承和多态性以及类的关联关系和组合关系的充分理解。<br> 分类:</p><pre><code>1. 创建型模式：共5种，用于描述“怎样创建对象”，主要特点是“将对象的创建与使用分离”(解耦)。客户程序仅仅需要去使用对象，而不再关心创建对象过程中的逻辑。2. 结构型模式：共7种，用于描述如何将类或对象按某种布局组成更大的结构。3. 行为型模式：共11种，用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。</code></pre></blockquote><a id="more"></a><h2 id="一、6大设计原则"><a href="#一、6大设计原则" class="headerlink" title="一、6大设计原则"></a>一、6大设计原则</h2><h3 id="1-单一职责原则-SRP"><a href="#1-单一职责原则-SRP" class="headerlink" title="1. 单一职责原则 (SRP)"></a>1. 单一职责原则 (<strong>SRP</strong>)</h3><p><strong>英文</strong>：Single Responsibility Principle</p><p><strong>定义</strong>：<a href="">有且仅有一个原因引起类的变更</a></p><p><strong>优点</strong>：</p><p>​    1.类的复杂性降低</p><p>​    2.可读性提高</p><p>​    3.可维护性提高</p><p>​    4.变更引起的风险降低</p><p><strong>难点</strong>：职责界限的划分</p><p><strong>适用范围</strong>：接口(一定)、类(尽量)、方法(尽可能)</p><hr><h3 id="2-里式替换原则-LSP"><a href="#2-里式替换原则-LSP" class="headerlink" title="2. 里式替换原则 (LSP)"></a>2. 里式替换原则 (<strong>LSP</strong>)</h3><p><strong>英文</strong>：Liskov Substitution Principle </p><p><strong>定义</strong>：</p><p>​    定义1：如果对每一个类型为S的对象o1,都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换成o2时,程序P的行为没有发生变化，那么类型S是类型T的子类型。</p><p>​    定义2：所有引用基类的地方必须能透明地使用其子类的对象。</p><p>​    通俗解释：<a href=""><strong>父类出现的地方,子类能完美替换父类,且不会产生任何错误和异常;反之,子类出现的地方,父类未必能适应。</strong></a></p><p><strong>定义拆解</strong>：</p><p>​    4层含义：</p><p>​            1.子类必须完全实现父类的方法</p><p>​            2.子类可以有自己的个性</p><p>​            3.[契约设计]覆盖或实现父类的方法时输入参数，要么一样（覆写），要么可以被放大（重载）</p><p>​            4.覆写或实现父类的方法时输出结果（返回类型）可以被缩小</p><p><strong>优点</strong>：增强程序的健壮性</p><p><strong>应用</strong>：版本升级(待实践)</p><p><strong>最佳实践</strong>：在项目中,采用LSP时，尽量避免子类的“个性”，一旦子类有“个性”，这个子类和父类之间的关系就很难调和了，把子类当做父类使用，子类的“个性”被抹杀–委屈了点；把子类单独作为一个业务来使用，则会让代码间的耦合关系变的扑朔迷离–缺乏替换的标准。</p><hr><h3 id="3-依赖导致原则-DIP"><a href="#3-依赖导致原则-DIP" class="headerlink" title="3. 依赖导致原则 (DIP)"></a>3. 依赖导致原则 (<strong>DIP</strong>)</h3><p><strong>英文</strong>：Dependence Inversion Principle </p><p><strong>定义</strong>：High level modules should not depend upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.</p><p><strong>定义拆解</strong>：</p><p>​    1.高层模块不应该依赖底层模块，两者都应该依赖其抽象</p><p>​    2.抽象不应该依赖细节，细节应该依赖抽象</p><p><strong>优点</strong>：减少类间的耦合性，提高系统的稳定性，降低并行开发引起的风险，提高代码的可读性和可维护性。</p><p><strong>依赖三种写法</strong>：</p><p>​    1.构造函数传递依赖对象</p><p>​    2.Setter方法传递依赖对象</p><p>​    3.接口声明依赖对象</p><p><strong>本质</strong>：</p><p>​    遵循规则：</p><p>​            1.基本要求：通过抽象(接口或抽象类),使各类或模块的实现彼此独立,不相相互影响,实现模块间的松耦合。</p><p>​            2.变量的表面类型尽量是接口或者是抽象类：一个变量可以有两种类型：表面类型和实际类型，表面类型是在定义的时候赋予的类型，实际类型是对象的类型。</p><p>​            3.任何类都不应该从具体类派生</p><p>​            4.尽量不要覆写基类的方法</p><p>​            5.结合里氏替换原则使用</p><p>​    核心：<a href="">“面向接口编程”</a></p><hr><h3 id="4-接口隔离原则-ISP"><a href="#4-接口隔离原则-ISP" class="headerlink" title="4. 接口隔离原则 (ISP)"></a>4. 接口隔离原则 (<strong>ISP</strong>)</h3><p><strong>英文</strong>: Interface Segregation Principle </p><p><strong>定义</strong>：</p><p>​    定义1：客户端不应该依赖它不需要的接口</p><p>​    定义2：类间的依赖关系应该建立在最小的接口上</p><p>​    通俗解释：<a href="">建立单一接口，不要臃肿肥大的接口。接口尽量细化，接口中的方法尽量少。</a></p><p><strong>区分</strong>：单一职责原则(SRP) 和 接口隔离原则(ISP)的区别，SRP强调单一职责，要求类和职责单一，注重职责，这是逻辑业务上划分，而ISP要求接口的方法尽量少。</p><p><strong>规范拆解</strong>：</p><p>​    1.接口尽量小：“小”有限度，必须 满足单一职责  (SRP)</p><p>​    2.接口要高内聚：高内聚就是提高接口、类、模块的处理能力，减少对外的交互。接口中尽量少公布public方法，接口的对外的承诺越少对系统的开发越有利，变更的风险就越少，同时也有利于降低成本。</p><p>​    3.定制服务：单独为一个个体体用优良的服务。只提供访问者需要的方法。</p><p>​    4.接口设计是由限度的:接口设计粒度越小越灵活，灵活带来了接口复杂化，开发难度增加，可维护性降低。把握好“度”。</p><hr><h3 id="5-迪米特法则（LKP-LoD）"><a href="#5-迪米特法则（LKP-LoD）" class="headerlink" title="5. 迪米特法则（LKP/LoD）"></a>5. 迪米特法则（<strong>LKP</strong>/LoD）</h3><p><strong>英文</strong>：Law of Demeter 也称 Least Knowledge Principle</p><p>关键词：高内聚、低耦合</p><p><strong>定义</strong>：一个对象应该对其他对象有最少的了解。</p><p>​    通俗解释：<a href="">一个类应该对自己需要耦合或者调用的类知道得越少(即解耦、弱耦)</a></p><p><strong>定义拆解</strong>：</p><p>​    4层含义：</p><p>​        1.只与直接的朋友通信 ，朋友类：出现在成员变量、方法的输入输出参数中的类称为成员朋友类，而出现在方法体内部的类不属于朋友类</p><p>​        2.朋友间是有距离的：尽量不要对外公布太多的public方法和非静态的public变量，尽量内敛，多使用private、package-private、protect等访问权限</p><p>​        3.是自己的就是自己的：如果一个方法放在本类中，即不增加类间关系，也对本类不产生负面影响，那就放置在本类中。</p><p>​        4.谨慎使用Serializable</p><p>最佳实践：一个类跳转两次以上才能访问到另一个类，就需要想办法进行重构</p><hr><h3 id="6-开闭原则（OCP）"><a href="#6-开闭原则（OCP）" class="headerlink" title="6. 开闭原则（OCP）"></a>6. 开闭原则（OCP）</h3><p>英文：Open Closed Principle</p><p>定义：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭</p><hr><h2 id="二、23种设计模式（5）"><a href="#二、23种设计模式（5）" class="headerlink" title="二、23种设计模式（5）"></a>二、23种设计模式（5）</h2><h3 id="1-创建型模式"><a href="#1-创建型模式" class="headerlink" title="1. 创建型模式"></a>1. 创建型模式</h3><h4 id="1-1-简单工厂模式（SFP）"><a href="#1-1-简单工厂模式（SFP）" class="headerlink" title="1.1. 简单工厂模式（SFP）"></a>1.1. 简单工厂模式（SFP）</h4><p><strong>英文：</strong>Simple Factory Pattern</p><p><strong>定义：</strong>由一个工厂对象决定创建出哪一种类型实例。客户端只需传入工厂类的参数，无需关心创建过程。</p><p><strong>优点：</strong>具体产品从客户端代码中抽离出来，解耦。</p><p><strong>缺点：</strong>工厂类职责过重，增加新的类型时，得修改工厂类的代码，违背OCP。</p><p><strong>最佳实践：</strong>严格意义来说，SFP不属于设计模式的一种</p><p><strong>举例</strong>：简单工厂模式-糖果生产</p><ol><li>创建糖果抽象类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Candy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建抽象糖果实现类-巧克力等</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chocolate</span> <span class="token keyword">extends</span> <span class="token class-name">Candy</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat chocolate ing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>创建糖果工厂类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CandyFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Candy <span class="token function">product</span><span class="token punctuation">(</span>String candyName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"chocolate"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>candyName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Chocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SfpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CandyFactory candyFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CandyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Candy chocolate <span class="token operator">=</span> candyFactory<span class="token punctuation">.</span><span class="token function">product</span><span class="token punctuation">(</span><span class="token string">"chocolate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chocolate<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>输出</li></ol><pre class=" language-java"><code class="language-java">eat chocolate ing<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><hr><h4 id="1-2-工厂方法模式（FMP）"><a href="#1-2-工厂方法模式（FMP）" class="headerlink" title="1.2. 工厂方法模式（FMP）"></a>1.2. 工厂方法模式（FMP）</h4><p><strong>英文：</strong>Factory Method Pattern</p><p><strong>定义：</strong>定义创建对象的接口，让实现这个接口的类来决定实例化哪个类，工厂方法让类的实例化推迟到子类进行。</p><p><strong>优点：</strong></p><ol><li><p>具体产品从客户端代码中抽离出来，实现了解耦。</p></li><li><p>加入新的类型时，只需添加新的工厂方法（无需修改旧的工厂方法代码），符合OCP。</p></li></ol><p><strong>缺点：</strong>类的个数容易过多，增加复杂度。</p><p><strong>最佳实践：</strong></p><p><strong>举例</strong>：</p><ol><li>创建糖果抽象类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Candy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建抽象工厂类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CandyFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Candy <span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>创建抽象糖果实现类-玉米软糖等</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CornFudge</span> <span class="token keyword">extends</span> <span class="token class-name">Candy</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat corn fudge ing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>创建抽象工厂实现类-玉米软糖工厂等</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CornFudgeFactory</span> <span class="token keyword">extends</span> <span class="token class-name">CandyFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Candy <span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CornFudge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FmpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CornFudgeFactory cornFudgeFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CornFudgeFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Candy cornFudge <span class="token operator">=</span> cornFudgeFactory<span class="token punctuation">.</span><span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cornFudge<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>6.输出</p><pre class=" language-java"><code class="language-java">eat corn fudge ing<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><hr><h4 id="1-3-抽象工厂模式（AFP）"><a href="#1-3-抽象工厂模式（AFP）" class="headerlink" title="1.3. 抽象工厂模式（AFP）"></a>1.3. 抽象工厂模式（AFP）</h4><p><strong>英文：</strong>Abstract Factory Pattern</p><p><strong>定义：</strong>提供了<strong>一系列</strong>相关或者相互依赖的对象的接口</p><p><strong>优点：</strong></p><ol><li>具体产品从客户端代码中抽离出来，实现解耦。</li><li>将一个系列的产品族统一到一起创建</li></ol><p><strong>缺点：</strong>拓展新的功能困难，需要修改抽象工厂的接口</p><p><strong>最佳实践：</strong></p><p><strong>举例</strong>：</p><ol><li>创建抽象糖果类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Candy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建抽象价格类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Price</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>创建抽象工厂接口</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CandyFactory</span> <span class="token punctuation">{</span>    Candy <span class="token function">getCandy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Price <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>实现抽象工厂接口-棒棒糖工厂</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LollipopFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CandyFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Candy <span class="token function">getCandy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Lollipop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Price <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LollipopPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>创建产品族</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lollipop</span> <span class="token keyword">extends</span> <span class="token class-name">Candy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat lollipop ing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"buy lollipop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LollipopPrice</span> <span class="token keyword">extends</span> <span class="token class-name">Price</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lollipop sell $2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="6"><li>测试</li></ol><pre><code>public class afpTest {    public static void main(String[] args) {        LollipopFactory lollipopFactory = new LollipopFactory();        lollipopFactory.getPrice().pay();        lollipopFactory.getCandy().buy();        lollipopFactory.getCandy().eat();    }}</code></pre><ol start="7"><li>输出</li></ol><pre><code>lollipop sell $2buy lollipopeat lollipop ing...</code></pre><hr><h4 id="1-4-建造者模式（BP）"><a href="#1-4-建造者模式（BP）" class="headerlink" title="1.4. 建造者模式（BP）"></a>1.4. 建造者模式（BP）</h4><p><strong>英文：</strong>Builder Pattern</p><p><strong>定义：</strong>也称为生成器模式，将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。简单来说就是，相同的过程可以创建不同的产品。</p><p><strong>优点：</strong></p><ol><li>封装性好，创建和使用分离</li><li>拓展性好，建造类之间独立，一定程度上解耦。</li></ol><p><strong>缺点：</strong></p><ol><li>产生多余的Builder对象；</li><li>产品内部发生变化，建造者需要更改，成本较大。</li></ol><p><strong>最佳实践：</strong></p><ol><li>一个对象有非常复杂的内部结构（很多属性）</li><li>想将复杂对象的创建和使用分离。</li></ol><p><strong>举例</strong>：</p><ol><li>创建商铺类Store(包含多属性)</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String location<span class="token punctuation">;</span>    <span class="token keyword">private</span> String type<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Store{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", location='"</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", type='"</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> location<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLocation</span><span class="token punctuation">(</span>String location<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>location <span class="token operator">=</span> location<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setType</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建商铺抽象生成器 StoreBuilder（包含和Store相同的属性及对应的抽象构造方法）</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">StoreBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String location<span class="token punctuation">;</span>    <span class="token keyword">private</span> String type<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">location</span><span class="token punctuation">(</span>String location<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">type</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Store <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>创建商铺抽象生成器的实现，糖果铺构造器CandyStoreBuilder</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CandyStoreBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">StoreBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Store store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">location</span><span class="token punctuation">(</span>String location<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">type</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Store <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> store<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>创建经销商类Dealer,用于通过StoreBuilder构建具体的商铺</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dealer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> StoreBuilder storeBuilder<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStoreBuilder</span><span class="token punctuation">(</span>StoreBuilder storeBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>storeBuilder <span class="token operator">=</span> storeBuilder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Store <span class="token function">build</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String location<span class="token punctuation">,</span> String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>storeBuilder<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>storeBuilder<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>storeBuilder<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> storeBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dealer dealer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dealer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dealer<span class="token punctuation">.</span><span class="token function">setStoreBuilder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CandyStoreBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Store store <span class="token operator">=</span> dealer<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">"甜蜜蜜糖果店"</span><span class="token punctuation">,</span> <span class="token string">"上海市陆家嘴77号"</span><span class="token punctuation">,</span> <span class="token string">"糖果经销"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="6"><li>输出</li></ol><pre class=" language-java"><code class="language-java">Store<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'甜蜜蜜糖果店'</span><span class="token punctuation">,</span> location<span class="token operator">=</span><span class="token string">'上海市陆家嘴77号'</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">'糖果经销'</span><span class="token punctuation">}</span></code></pre><hr><h4 id="1-5-单例模式-SP"><a href="#1-5-单例模式-SP" class="headerlink" title="1.5. 单例模式 (SP)"></a>1.5. 单例模式 (SP)</h4><p><strong>英文：</strong>Singleton Pattern</p><p><strong>定义：</strong>一个类只有一个实例</p><p><strong>优点：</strong></p><ol><li><p>内存中只有一个实例，减少了内存开销；</p></li><li><p>避免对资源的多重占用；</p></li></ol><p><strong>缺点：</strong>没有接口，拓展困难。</p><p><strong>最佳实践：</strong></p><table><thead><tr><th>模式</th><th>描述</th><th>方式</th><th>优点</th><th>缺点</th><th>是否推荐</th></tr></thead><tbody><tr><td>饿汉模式</td><td>不管需不需要用到实例都要去创建实例</td><td>-</td><td>线程安全</td><td>不管用到与否,类加载到内存后，就实例化一个单例</td><td>有缺点,简单实用,推荐使用</td></tr><tr><td>懒汉模式</td><td>需要用到创建实例了程序再去创建实例</td><td>方式一：锁,双重判空方式</td><td>1.线程安全 <br>2.用的时候,再实例化</td><td>降低程序效率(判空+锁)</td><td>不推荐</td></tr><tr><td></td><td></td><td>方式二：静态内部类方式</td><td>1.线程安全(JVM保证单例)  <br>2.加载外部类不会加载内部类,实现了懒加载</td><td>-</td><td>完美写法,推荐</td></tr><tr><td>枚举模式</td><td>-</td><td>-</td><td>1. 解决线程同步<br>2. 防止反序列化<br>原因：由于枚举没有构造方法，不会被反射<br>反射原理：类的class文件加载到内存,反射（反序列化的方式）new一个实例（前提要有构造方法）</td><td>-</td><td>完美中的完美,推荐</td></tr></tbody></table><p><strong>举例</strong>：</p><ol><li><p>饿汉模式、懒汉模式、单例模式</p><p>1.1. 饿汉模式</p><p>方式一：间接声明-静态代码块new</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHunger01</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方式一 ：间接声明-静态代码块new</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> SingletonHunger01 INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonHunger01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//构造方法设为私有,使得其他类不能new</span>    <span class="token keyword">private</span> <span class="token function">SingletonHunger01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonHunger01 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    方式二：直接声明-直接new</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHunger02</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方式二：直接声明-直接new</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> SingletonHunger02 INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonHunger02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造方法设为私有,使得其他类不能new</span>    <span class="token keyword">private</span> <span class="token function">SingletonHunger02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonHunger02 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    1.2. 懒汉模式</p><p>​    方式一：锁,双重判空方式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLazy01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonLazy01 INSTANCE <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造方法设为私有,使得其他类不能new</span>    <span class="token keyword">private</span> <span class="token function">SingletonLazy01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonLazy01 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//降低每次进来都需要判断锁</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SingletonLazy01<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLazy01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    方式二：静态内部类方式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLazy02</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">SingletonLazy02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态内部类</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticInner</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> SingletonLazy02 INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLazy02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonLazy02 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> StaticInner<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    1.3. 枚举单例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> SingletonEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//单例枚举</span>    INSTANCE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HASHCODE-hash码,同一个类中的hash码不会相同,不同类的hashcode不能保证相同"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"饿汉模式-间接声明方式-"</span><span class="token operator">+</span>SingletonHunger01<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"饿汉模式-直接声明方式-"</span><span class="token operator">+</span>SingletonHunger02<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉模式-锁,双重判空方式-"</span><span class="token operator">+</span>SingletonLazy01<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉模式-静态内部类方式-"</span><span class="token operator">+</span>SingletonLazy02<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单例模式-"</span><span class="token operator">+</span>SingletonEnum<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>输出</li></ol><pre class=" language-java"><code class="language-java">HASHCODE<span class="token operator">-</span>hash码<span class="token punctuation">,</span>同一个类中的hash码不会相同<span class="token punctuation">,</span>不同类的hashcode不能保证相同饿汉模式<span class="token operator">-</span>间接声明方式<span class="token operator">-</span><span class="token number">1856056345</span>饿汉模式<span class="token operator">-</span>直接声明方式<span class="token operator">-</span><span class="token number">221036634</span>懒汉模式<span class="token operator">-</span>锁<span class="token punctuation">,</span>双重判空方式<span class="token operator">-</span><span class="token number">1418370913</span>懒汉模式<span class="token operator">-</span>静态内部类方式<span class="token operator">-</span><span class="token number">707610042</span>单例模式<span class="token operator">-</span><span class="token number">551734240</span></code></pre><hr><h4 id="1-6-原型模式（PP）"><a href="#1-6-原型模式（PP）" class="headerlink" title="1.6. 原型模式（PP）"></a>1.6. 原型模式（PP）</h4><p><strong>英文：</strong>Prototype Pattern</p><p><strong>定义：</strong>用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象</p><p><strong>优点：</strong></p><ol><li><p>原型模式是在内存中二进制流的拷贝，要比new一个对象的性能要好，特别是需要产生大量对象时。</p></li><li><p>简化创建对象过程。</p></li></ol><p><strong>缺点：</strong></p><ol><li>对象必须重写Object克隆方法；</li><li>直接在内存中拷贝，构造函数是不会执行</li><li>复杂对象的克隆方法写起来较麻烦（浅克隆、深克隆）</li><li>克隆会破坏实现了Cloneable接口的单例对象</li></ol><p><strong>最佳实践：</strong></p><ol><li>如果类的初始化需要耗费较多的资源，那么可以通过原型拷贝避免这些消耗。</li><li>通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。</li><li>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以拷贝多个对象供调用者使用，即保护性拷贝。</li></ol><p><strong>拓展：</strong></p><table><thead><tr><th>克隆分类</th><th>实现</th></tr></thead><tbody><tr><td>浅克隆</td><td>只复制基本类型的数据，引用类型的数据只复制了引用的地址，引用的对象并没有复制，在新的对象中修改引用类型的数据会影响原对象中的引用。</td></tr><tr><td>深克隆</td><td><strong>方式一：嵌套重写clone方法</strong>：实现<strong>Cloneable</strong>接口（引用数据类型也要实现Cloneable接口），重写clone方法，<strong>clone的嵌套</strong>，复制后的对象与原对象之间完全不会影响。<br><strong>方式二：序列化对象</strong>：实现序列化<strong>Serializable</strong>接口（不实现<strong>Cloneable</strong>接口），（引用数据类型也要实现Serializable），对象序列化后写入流中，此时不存在引用数据类型的概念，从流中读取，生成新的对象，新对象和原对象之间也是完全互不影响的。</td></tr></tbody></table><p><strong>举例</strong>：</p><p>1.1. 浅克隆（简单属性）：创建对象，实现Cloneable，重写clone方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CandyShallow</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String color<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//浅克隆</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"CandyShallow{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", color='"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>1.2. 测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        CandyShallow candyShallow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CandyShallow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>CandyShallow<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            CandyShallow clone <span class="token operator">=</span> <span class="token punctuation">(</span>CandyShallow<span class="token punctuation">)</span>candyShallow<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            clone<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"ALPENLIEBE"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            clone<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>clone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>1.3. 输出</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>Candy<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'ALPENLIEBE0'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'color0'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Candy<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'ALPENLIEBE1'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'color1'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Candy<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'ALPENLIEBE2'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'color2'</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>2.1. 方式一：实现Cloneable,嵌套重写clone方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CandyDeep</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String color<span class="token punctuation">;</span>    <span class="token keyword">private</span> Stuffing stuffing<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//--------------------------------------重点↓</span>    <span class="token comment" spellcheck="true">/**     * 方式一：重写clone方法，实现深拷贝     * 注：该方式的缺陷是需要单独处理所有要克隆的类中的引用数据类型(Stuffing)     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        CandyDeep candyDeep <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            candyDeep <span class="token operator">=</span> <span class="token punctuation">(</span>CandyDeep<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            candyDeep<span class="token punctuation">.</span>stuffing <span class="token operator">=</span> <span class="token punctuation">(</span>Stuffing<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>stuffing<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> candyDeep<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//--------------------------------------重点↑</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"CandyDeep{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", color='"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", stuffing="</span> <span class="token operator">+</span> stuffing <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CandyDeep</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String color<span class="token punctuation">,</span> Stuffing stuffing<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stuffing <span class="token operator">=</span> stuffing<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Stuffing <span class="token function">getStuffing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> stuffing<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStuffing</span><span class="token punctuation">(</span>Stuffing stuffing<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stuffing <span class="token operator">=</span> stuffing<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stuffing</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String body<span class="token punctuation">;</span>    <span class="token keyword">private</span> String form<span class="token punctuation">;</span>    <span class="token keyword">private</span> String color<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//--------------------------------------重点↓</span>    <span class="token comment" spellcheck="true">//无引用数据类型,浅克隆即可</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//--------------------------------------重点↑</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Stuffing{"</span> <span class="token operator">+</span>                <span class="token string">"body='"</span> <span class="token operator">+</span> body <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", form='"</span> <span class="token operator">+</span> form <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", color='"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Stuffing</span><span class="token punctuation">(</span>String body<span class="token punctuation">,</span> String form<span class="token punctuation">,</span> String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>form <span class="token operator">=</span> form<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> body<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBody</span><span class="token punctuation">(</span>String body<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> form<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setForm</span><span class="token punctuation">(</span>String form<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>form <span class="token operator">=</span> form<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.2. 方式二（推荐）：序列化对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CandyDeep2</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String color<span class="token punctuation">;</span>    <span class="token keyword">private</span> Stuffing2 stuffing2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//--------------------------------------重点↓</span>    <span class="token keyword">public</span> CandyDeep2 <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ByteArrayOutputStream bos <span class="token operator">=</span> null<span class="token punctuation">;</span>        ObjectOutputStream oos <span class="token operator">=</span> null<span class="token punctuation">;</span>        ByteArrayInputStream bis <span class="token operator">=</span> null<span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建序列化流</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将当前对象以对象流的方式输出</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建反序列化流</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将流对象反序列化,从而实现类的深拷贝</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>CandyDeep2<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> ClassNotFoundException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//资源释放</span>                bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//--------------------------------------重点↑</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"CandyDeep2{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", color='"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", stuffing2="</span> <span class="token operator">+</span> stuffing2 <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CandyDeep2</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String color<span class="token punctuation">,</span> Stuffing2 stuffing2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stuffing2 <span class="token operator">=</span> stuffing2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Stuffing2 <span class="token function">getStuffing2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> stuffing2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStuffing2</span><span class="token punctuation">(</span>Stuffing2 stuffing2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stuffing2 <span class="token operator">=</span> stuffing2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stuffing2</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String body<span class="token punctuation">;</span>    <span class="token keyword">private</span> String form<span class="token punctuation">;</span>    <span class="token keyword">private</span> String color<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Stuffing2{"</span> <span class="token operator">+</span>                <span class="token string">"body='"</span> <span class="token operator">+</span> body <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", form='"</span> <span class="token operator">+</span> form <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", color='"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Stuffing2</span><span class="token punctuation">(</span>String body<span class="token punctuation">,</span> String form<span class="token punctuation">,</span> String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>form <span class="token operator">=</span> form<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> body<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBody</span><span class="token punctuation">(</span>String body<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> form<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setForm</span><span class="token punctuation">(</span>String form<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>form <span class="token operator">=</span> form<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.3. 测试</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"深克隆,方式一:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CandyDeep candyDeep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CandyDeep</span><span class="token punctuation">(</span><span class="token string">"黑色"</span><span class="token punctuation">,</span><span class="token string">"酒心巧克力"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Stuffing</span><span class="token punctuation">(</span><span class="token string">"酒饮料"</span><span class="token punctuation">,</span><span class="token string">"液体"</span><span class="token punctuation">,</span><span class="token string">"无色"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>candyDeep<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//candyDeep 和 cloneCandy 非同一个对象</span>        CandyDeep cloneCandy <span class="token operator">=</span> <span class="token punctuation">(</span>CandyDeep<span class="token punctuation">)</span> candyDeep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cloneCandy<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"+++++++++++++++++++华丽的分界线++++++++++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"深克隆,方式二:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CandyDeep2 candyDeep2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CandyDeep2</span><span class="token punctuation">(</span><span class="token string">"白色"</span><span class="token punctuation">,</span><span class="token string">"果仁巧克力"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Stuffing2</span><span class="token punctuation">(</span><span class="token string">"果仁"</span><span class="token punctuation">,</span><span class="token string">"固体"</span><span class="token punctuation">,</span><span class="token string">"棕色"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>candyDeep2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//candyDeep2 和 cloneCandy2 非同一个对象</span>        CandyDeep2 cloneCandy2 <span class="token operator">=</span> candyDeep2<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cloneCandy2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>2.4. 输出</p><pre class=" language-java"><code class="language-java">深克隆<span class="token punctuation">,</span>方式一<span class="token operator">:</span>CandyDeep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'黑色'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'酒心巧克力'</span><span class="token punctuation">,</span> stuffing<span class="token operator">=</span>Stuffing<span class="token punctuation">{</span>body<span class="token operator">=</span><span class="token string">'酒饮料'</span><span class="token punctuation">,</span> form<span class="token operator">=</span><span class="token string">'液体'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'无色'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>CandyDeep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'黑色'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'酒心巧克力'</span><span class="token punctuation">,</span> stuffing<span class="token operator">=</span>Stuffing<span class="token punctuation">{</span>body<span class="token operator">=</span><span class="token string">'酒饮料'</span><span class="token punctuation">,</span> form<span class="token operator">=</span><span class="token string">'液体'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'无色'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">+</span>华丽的分界线<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>深克隆<span class="token punctuation">,</span>方式二<span class="token operator">:</span>CandyDeep2<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'白色'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'果仁巧克力'</span><span class="token punctuation">,</span> stuffing2<span class="token operator">=</span>Stuffing2<span class="token punctuation">{</span>body<span class="token operator">=</span><span class="token string">'果仁'</span><span class="token punctuation">,</span> form<span class="token operator">=</span><span class="token string">'固体'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'棕色'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>CandyDeep2<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'白色'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'果仁巧克力'</span><span class="token punctuation">,</span> stuffing2<span class="token operator">=</span>Stuffing2<span class="token punctuation">{</span>body<span class="token operator">=</span><span class="token string">'果仁'</span><span class="token punctuation">,</span> form<span class="token operator">=</span><span class="token string">'固体'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'棕色'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h3 id="2-结构型模式（7）"><a href="#2-结构型模式（7）" class="headerlink" title="2.结构型模式（7）"></a>2.结构型模式（7）</h3><h4 id="2-1-外观模式（FP）"><a href="#2-1-外观模式（FP）" class="headerlink" title="2.1. 外观模式（FP）"></a>2.1. 外观模式（FP）</h4><p><strong>英文：</strong>Facade Pattern</p><p><strong>定义：</strong>外观模式又叫门面模式，提供了统一的接口，用来访问子系统中的一群接口。</p><p><strong>优点：</strong></p><ol><li>简化了调用过程，无需了解深入子系统</li><li>减低耦合度；</li><li>更好的层次划分；</li><li>符合LKP。</li></ol><p><strong>缺点：</strong></p><ol><li>增加子系统，拓展子系统行为容易引入风险；</li><li>不符合OCP。</li></ol><p><strong>最佳实践：</strong></p><ol><li>子系统越来越复杂，增加外观模式提供简单接口调用；</li><li>构建多层系统结构，利用外观对象作为每层的入口，简化层间调用。</li></ol><p><strong>举例</strong>：</p><p>客户购买现做蛋糕，客户直接和前台打交道，前台和后台(制作蛋糕,装饰,打包)传达信息，后台对于客户被透明化</p><ol><li>创建蛋糕信息实体</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CakeInfo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String cakeName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Double amount<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer num<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"CakeInfo{"</span> <span class="token operator">+</span>                <span class="token string">"cakeName='"</span> <span class="token operator">+</span> cakeName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", amount="</span> <span class="token operator">+</span> amount <span class="token operator">+</span>                <span class="token string">", num="</span> <span class="token operator">+</span> num <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Double <span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAmount</span><span class="token punctuation">(</span>Double amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">=</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNum</span><span class="token punctuation">(</span>Integer num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCakeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cakeName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCakeName</span><span class="token punctuation">(</span>String cakeName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cakeName <span class="token operator">=</span> cakeName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建后台-制作服务</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MakeService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">makeCake</span><span class="token punctuation">(</span>String cakeName<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"糕点师制作"</span><span class="token operator">+</span>cakeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>创建后台-装饰服务</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DecorateService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">decorateCake</span><span class="token punctuation">(</span>String cakeName<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"装饰师装饰"</span><span class="token operator">+</span>cakeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>创建后台-打包服务</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">packageCake</span><span class="token punctuation">(</span>String cakeName<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打包师打包"</span><span class="token operator">+</span>cakeName<span class="token operator">+</span><span class="token string">",并转交前台"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>创建前台服务聚合后台服务</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FrontDeskService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> MakeService maker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> DecorateService decorator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecorateService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> PackageService packer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellCake</span><span class="token punctuation">(</span>CakeInfo cakeInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前台从客户接受蛋糕信息:"</span><span class="token operator">+</span>cakeInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        String cakeName <span class="token operator">=</span> cakeInfo<span class="token punctuation">.</span><span class="token function">getCakeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>maker<span class="token punctuation">.</span><span class="token function">makeCake</span><span class="token punctuation">(</span>cakeName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>decorator<span class="token punctuation">.</span><span class="token function">decorateCake</span><span class="token punctuation">(</span>cakeName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>packer<span class="token punctuation">.</span><span class="token function">packageCake</span><span class="token punctuation">(</span>cakeName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前台收到蛋糕->转交客户->收银->销售成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><ol start="6"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CakeInfo cakeInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CakeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cakeInfo<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token number">100.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cakeInfo<span class="token punctuation">.</span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cakeInfo<span class="token punctuation">.</span><span class="token function">setCakeName</span><span class="token punctuation">(</span><span class="token string">"巧克力蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FrontDeskService frontDeskService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FrontDeskService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frontDeskService<span class="token punctuation">.</span><span class="token function">sellCake</span><span class="token punctuation">(</span>cakeInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="7"><li>输出</li></ol><pre class=" language-java"><code class="language-java">前台从客户接受蛋糕信息<span class="token operator">:</span>CakeInfo<span class="token punctuation">{</span>cakeName<span class="token operator">=</span><span class="token string">'巧克力蛋糕'</span><span class="token punctuation">,</span> amount<span class="token operator">=</span><span class="token number">100.0</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>糕点师制作巧克力蛋糕装饰师装饰巧克力蛋糕打包师打包巧克力蛋糕<span class="token punctuation">,</span>并转交前台前台收到蛋糕<span class="token operator">-</span><span class="token operator">></span>转交客户<span class="token operator">-</span><span class="token operator">></span>收银<span class="token operator">-</span><span class="token operator">></span>销售成功</code></pre><hr><h4 id="2-2-装饰者模式（DP）"><a href="#2-2-装饰者模式（DP）" class="headerlink" title="2.2. 装饰者模式（DP）"></a>2.2. 装饰者模式（DP）</h4><p><strong>英文：</strong>Decorator Pattern</p><p><strong>定义：</strong>在不改变原有对象的基础之上，将功能附加到对象上，提供了比继承更有弹性的替代方案</p><p><strong>优点：</strong></p><ol><li>继承的有力补充，不改变原有对象的情况下给对象拓展功能</li><li>通过使用不同的装饰类、不同的组合方式，实现不同的效果</li><li>符合OCP</li></ol><p><strong>缺点：</strong>增加程序复杂性</p><p><strong>最佳实践：</strong></p><ol><li>拓展一个类的功能</li><li>动态给对象添加功能，并且动态撤销</li></ol><p><strong>举例</strong>：</p><p>客户买蛋糕，要求对蛋糕加不同材料(果切，奶油，巧克力，装饰画等)，价格也随之变动</p><p>1.创建蛋糕套餐抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CakePackage</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.创建装饰器类继承蛋糕套餐抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CakeDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">CakePackage</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> CakePackage cakePackage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CakeDecorator</span><span class="token punctuation">(</span>CakePackage cakePackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cakePackage <span class="token operator">=</span> cakePackage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cakePackage<span class="token punctuation">.</span><span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cakePackage<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建标准蛋糕套餐类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardCakePackage</span> <span class="token keyword">extends</span> <span class="token class-name">CakePackage</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"蛋糕胚\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.创建加奶油、水果、糖果等增值套餐类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreamCakePackage</span> <span class="token keyword">extends</span> <span class="token class-name">CakeDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">CreamCakePackage</span><span class="token punctuation">(</span>CakePackage cakePackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>cakePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"加奶油\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FruitCakePackage</span> <span class="token keyword">extends</span> <span class="token class-name">CakeDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">FruitCakePackage</span><span class="token punctuation">(</span>CakePackage cakePackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>cakePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"加水果\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CandyCakePackage</span> <span class="token keyword">extends</span> <span class="token class-name">CakeDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">CandyCakePackage</span><span class="token punctuation">(</span>CakePackage cakePackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>cakePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"加糖果\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CakePackage cake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardCakePackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreamCakePackage</span><span class="token punctuation">(</span>cake<span class="token punctuation">)</span><span class="token punctuation">;</span>        cake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FruitCakePackage</span><span class="token punctuation">(</span>cake<span class="token punctuation">)</span><span class="token punctuation">;</span>        cake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CandyCakePackage</span><span class="token punctuation">(</span>cake<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cake<span class="token punctuation">.</span><span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"价格："</span><span class="token operator">+</span>cake<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>6.输出</p><pre class=" language-java"><code class="language-java">蛋糕胚加奶油加水果加糖果价格：<span class="token number">35</span>元</code></pre><hr><h4 id="2-3-适配器模式（AP）"><a href="#2-3-适配器模式（AP）" class="headerlink" title="2.3. 适配器模式（AP）"></a>2.3. 适配器模式（AP）</h4><p><strong>英文：</strong>Adapter Pattern</p><p><strong>定义：</strong>将一个类的接口转换为期望的另一个接口，使原本不兼容的类可以一起工作</p><p><strong>优点：</strong></p><ol><li>提高类的透明性和复用，现有的类复用但不需改变</li><li>目标类和适配器类解耦，提高程序拓展性</li><li>符合OCP</li></ol><p><strong>缺点：</strong></p><ol><li>适配器编写过程需要全面考虑，可能会增加系统的复杂性</li><li>降低代码可读性</li></ol><p><strong>最佳实践：</strong>已存在的类，它的方法和需求不匹配时（方法结果相同或者相似）</p><p><strong>举例</strong>：</p><p>原有的蛋糕产品线，新增一个物料产品线(水果、奶油等)，在不修改原产品线的同时,两个产品线共同工作</p><ol><li>创建蛋糕产品线类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cake</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeCakes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建物料产品线接口</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Materiel</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>蛋糕产品类加入到物料产品线，创建一个适配器</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//一般适配器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreamCakeAdaptor</span> <span class="token keyword">extends</span> <span class="token class-name">Cake</span> <span class="token keyword">implements</span> <span class="token class-name">Materiel</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产奶油预备"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">makeCakes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"混合成奶油蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//对象适配器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FruitCakeAdaptor</span> <span class="token keyword">implements</span> <span class="token class-name">Materiel</span><span class="token punctuation">{</span>    Cake cake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产果切预备"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cake<span class="token punctuation">.</span><span class="token function">makeCakes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"混合成水果蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CreamCakeAdaptor creamCakeAdaptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreamCakeAdaptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        creamCakeAdaptor<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++++++++++++++华丽的分割线+++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FruitCakeAdaptor fruitCakeAdaptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FruitCakeAdaptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fruitCakeAdaptor<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>输出</li></ol><pre class=" language-java"><code class="language-java">生产奶油预备生产蛋糕混合成奶油蛋糕<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>华丽的分割线<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">+</span>生产果切预备生产蛋糕混合成水果蛋糕</code></pre><hr><h4 id="2-4-享元模式（FP）"><a href="#2-4-享元模式（FP）" class="headerlink" title="2.4. 享元模式（FP）"></a>2.4. 享元模式（FP）</h4><p><strong>英文：</strong>Flyweight Pattern</p><p><strong>定义：</strong>提供了减少对象数量从而改善应用所需的对象结构的方式，运用共享技术有效地支持大量细粒度的对象。</p><p><strong>优点：</strong>减少对象的创建，降低内存占用；</p><p><strong>缺点：</strong></p><ol><li><p>关注内部状态或外部状态，关注线程安全问题；（内部状态：享元对象的属性状态，不会因为外部的改变而改变； 外部状态：方法参数）</p></li><li><p>程序的逻辑复杂化。</p></li></ol><p><strong>最佳实践：</strong></p><ol><li><p>减少对象的创建，降低内存占用；</p></li><li><p>统拥有大量相似对象，需要缓冲池的场景。</p></li></ol><p><strong>举例</strong>：制作大量相同类型的蛋糕（代码关键是通过HashMap存储对象）</p><ol><li>创建蛋糕接口</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cake</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>具体类(如：水果类型蛋糕)实现蛋糕接口</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FruitCake</span> <span class="token keyword">implements</span> <span class="token class-name">Cake</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> LocalDateTime productTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">FruitCake</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProductTime</span><span class="token punctuation">(</span>LocalDateTime productTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>productTime <span class="token operator">=</span> productTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"生产时间："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>productTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>创建水果蛋糕的工厂</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FruitCakeFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//关键点</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>FruitCake<span class="token operator">></span> CAKE_HASH_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> FruitCake <span class="token function">product</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        FruitCake fruitCake <span class="token operator">=</span> CAKE_HASH_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fruitCake <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"制作方法,学习制作方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fruitCake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FruitCake</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            CAKE_HASH_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>fruitCake<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> fruitCake<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> CAKE_TYPE <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"蓝莓蛋糕"</span><span class="token punctuation">,</span><span class="token string">"火龙果蛋糕"</span><span class="token punctuation">,</span><span class="token string">"草莓蛋糕"</span><span class="token punctuation">,</span><span class="token string">"香蕉蛋糕"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            String name <span class="token operator">=</span> CAKE_TYPE<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> CAKE_TYPE<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            FruitCake cake <span class="token operator">=</span> FruitCakeFactory<span class="token punctuation">.</span><span class="token function">product</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            cake<span class="token punctuation">.</span><span class="token function">setProductTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cake<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li><p>输出 </p><p>10次循环中，只生产了4个对象，很好的描述了系统有大量相似对象，需要缓冲池的场景。</p><p><strong>JDK中的字符串常量池，数据库连接池等都是用的享元模式。</strong></p></li></ol><pre class=" language-java"><code class="language-java">没有蓝莓蛋糕制作方法<span class="token punctuation">,</span>学习制作方法蓝莓蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">17.647076600</span>蓝莓蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">17.779721700</span>没有草莓蛋糕制作方法<span class="token punctuation">,</span>学习制作方法草莓蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">17.881450300</span>草莓蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">17.982180600</span>没有香蕉蛋糕制作方法<span class="token punctuation">,</span>学习制作方法香蕉蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">18.085903500</span>蓝莓蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">18.204594900</span>蓝莓蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">18.305322300</span>香蕉蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">18.430981100</span>草莓蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">18.541684900</span>蓝莓蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">18.645407200</span></code></pre><hr><h4 id="2-5-组合模式（CP）"><a href="#2-5-组合模式（CP）" class="headerlink" title="2.5. 组合模式（CP）"></a>2.5. 组合模式（CP）</h4><p><strong>英文：</strong>Composite Pattern</p><p><strong>定义：</strong>又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。</p><p><strong>优点：</strong></p><ol><li><p>层次清晰</p></li><li><p>客户端不必关系层次差异，方便控制</p></li><li><p>符合OCP</p></li></ol><p><strong>缺点：</strong>树形处理较为复杂</p><p><strong>最佳实践：</strong></p><ol><li><p>客户端可以忽略组合对象与单个对象的差异</p></li><li><p>处理树形结构数据</p></li></ol><p><strong>举例</strong>：菜单按钮组成的树形</p><ol><li>创建菜单按钮组合抽象类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MenuButton</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>MenuButton menuButton<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"不支持创建操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"不支持名称获取"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"不支持类型获取"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"不支持图标"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"不支持打印操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建按钮类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">MenuButton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Button</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"按钮"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>创建菜单类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Menu</span> <span class="token keyword">extends</span> <span class="token class-name">MenuButton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>MenuButton<span class="token operator">></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String icon<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer level<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Menu</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String icon<span class="token punctuation">,</span> Integer level<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>icon <span class="token operator">=</span> icon<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">=</span> level<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>MenuButton menuButton<span class="token punctuation">)</span><span class="token punctuation">{</span>        items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>menuButton<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"菜单"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>icon<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>MenuButton item <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            item<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Menu userMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">"用户管理"</span><span class="token punctuation">,</span> <span class="token string">"🧑"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button createUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"新增用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button updateUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"修改用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button deleteUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"删除用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>createUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        userMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>updateUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        userMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>deleteUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        Menu logMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">"操作日志"</span><span class="token punctuation">,</span> <span class="token string">"📃"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button export <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"导出Excel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>export<span class="token punctuation">)</span><span class="token punctuation">;</span>        Menu systemMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">"系统管理"</span><span class="token punctuation">,</span> <span class="token string">"🔨"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        systemMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>        systemMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>logMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>        systemMenu<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>输出</li></ol><pre class=" language-java"><code class="language-java">🔨系统管理<span class="token punctuation">[</span>菜单<span class="token punctuation">]</span>    🧑用户管理<span class="token punctuation">[</span>菜单<span class="token punctuation">]</span>        新增用户<span class="token punctuation">[</span>按钮<span class="token punctuation">]</span>        修改用户<span class="token punctuation">[</span>按钮<span class="token punctuation">]</span>        删除用户<span class="token punctuation">[</span>按钮<span class="token punctuation">]</span>    📃操作日志<span class="token punctuation">[</span>菜单<span class="token punctuation">]</span>        导出Excel<span class="token punctuation">[</span>按钮<span class="token punctuation">]</span></code></pre><hr><h4 id="2-6-桥接模式（BP）"><a href="#2-6-桥接模式（BP）" class="headerlink" title="2.6. 桥接模式（BP）"></a>2.6. 桥接模式（BP）</h4><p><strong>英文：</strong>Bridge Pattern</p><p><strong>定义：</strong>将抽象部分和具体实现部分分离，使它们都可以独立变化。通过组合的方式建立两个类之间的关系，而不是通过继承。</p><p><strong>优点：</strong></p><ol><li><p>分离抽象部分和具体实现部分</p></li><li><p>提高了系统可拓展性</p></li><li><p>符合OCP和合成复用原则</p></li></ol><p><strong>缺点：</strong>增加了系统的理解和设计难度</p><p><strong>最佳实践：</strong></p><ol><li><p>抽象和实体实现之间增加更多的灵活性</p></li><li><p>一个类存在多个独立变化的维度，并且需要独立拓展</p></li><li><p>不希望使用继承</p></li></ol><p><strong>举例</strong>：</p><p>1.创建蛋糕的接口类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cake</span> <span class="token punctuation">{</span>    Cake <span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">getCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.创建蛋糕接口的实现类</p><p>水果蛋糕</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FruitCake</span> <span class="token keyword">implements</span> <span class="token class-name">Cake</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Cake <span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作水果蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FruitCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得水果蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>奶油蛋糕</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreamCake</span> <span class="token keyword">implements</span> <span class="token class-name">Cake</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Cake <span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作奶油蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CreamCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得奶油蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建店铺抽象类,通过属性的方式和蛋糕接口相关联，目的是可以在不同的店铺实现类中灵活地制作各种蛋糕</p><p>店铺抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Cake cake<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Store</span><span class="token punctuation">(</span>Cake cake<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cake <span class="token operator">=</span> cake<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> Cake <span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>店铺实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhangSanStore</span> <span class="token keyword">extends</span> <span class="token class-name">Store</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ZhangSanStore</span><span class="token punctuation">(</span>Cake cake<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>cake<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    Cake <span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"张三的蛋糕店"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cake<span class="token punctuation">.</span><span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiSiStore</span> <span class="token keyword">extends</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">LiSiStore</span><span class="token punctuation">(</span>Cake cake<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>cake<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    Cake <span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"李四的蛋糕店"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cake<span class="token punctuation">.</span><span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZhangSanStore zhangSanStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhangSanStore</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FruitCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cake cake <span class="token operator">=</span> zhangSanStore<span class="token punctuation">.</span><span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cake<span class="token punctuation">.</span><span class="token function">getCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++++++++++++++++华丽的分割线+++++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LiSiStore liSiStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LiSiStore</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CreamCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cake cake1 <span class="token operator">=</span> liSiStore<span class="token punctuation">.</span><span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cake1<span class="token punctuation">.</span><span class="token function">getCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.输出</p><pre class=" language-java"><code class="language-java">张三的蛋糕店制作水果蛋糕获得水果蛋糕<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>华丽的分割线<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">+</span>李四的蛋糕店制作奶油蛋糕获得奶油蛋糕</code></pre><hr><h4 id="2-7-代理模式（PP）"><a href="#2-7-代理模式（PP）" class="headerlink" title="2.7. 代理模式（PP）"></a>2.7. 代理模式（PP）</h4><p><strong>英文：</strong>Proxy Pattern</p><p><strong>定义：</strong>为其他对象提供一种代理，以控制对这个对象的访问，代理对象在客户端和目标对象之间起到了中介的作用</p><p><strong>优点：</strong></p><ol><li>将代理对象和真实被调用的目标对象分离</li><li>降低耦合，拓展性好</li><li>保护目标对象，增强目标对象</li></ol><p><strong>缺点：</strong></p><ol><li><p>造成类的数目增加，增加复杂度</p></li><li><p>客户端和目标对象增加代理对象，会造成处理速度变慢</p></li></ol><p><strong>最佳实践：</strong></p><ol><li>保护目标对象</li><li>增强目标对象</li></ol><table><thead><tr><th>代理分类</th><th>功能</th><th>缺点</th></tr></thead><tbody><tr><td>静态代理</td><td>通过在代码中显式地定义了一个代理类，在代理类中通过同名的方法对目标对象的方法进行包装，客户端通过调用代理类的方法来调用目标对象的方法。</td><td>每需要代理一个类，就需要手写对应的代理类</td></tr><tr><td>动态代理</td><td>JDK的动态代理只能代理接口，通过接口的方法名在动态生成的代理类中调用业务实现类的同名方法。</td><td></td></tr><tr><td>CGLib代理</td><td>通过继承来实现，生成的代理类就是目标对象类的子类，通过重写业务方法来实现代理</td><td></td></tr><tr><td>Spring对代理模式的拓展</td><td>1. 当Bean有实现接口时，使用JDK动态代理； 2. 当Bean没有实现接口时，使用CGLib代理。</td></tr></tbody></table><p><strong>举例</strong>：</p><p>1.静态代理</p><p>（1）创建糖果类接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICandyService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">makeCandy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>（2）创建糖果类实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CandyServiceServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ICandyService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeCandy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作糖果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（3）创建代理对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ICandyService iCandyService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeCandy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iCandyService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CandyServiceServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iCandyService<span class="token punctuation">.</span><span class="token function">makeCandy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"包装"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"准备材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（4）测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[代理模式-静态代理]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ProxyService proxyService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyService<span class="token punctuation">.</span><span class="token function">makeCandy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（5）输出</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>代理模式<span class="token operator">-</span>静态代理<span class="token punctuation">]</span>准备材料制作糖果包装</code></pre><p>2.动态代理</p><p>（1）创建饼干类接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBiscuitService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">makeBiscuit</span><span class="token punctuation">(</span>String ingredients<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>（2）创建饼干类实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BiscuitServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IBiscuitService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeBiscuit</span><span class="token punctuation">(</span>String ingredients<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作"</span><span class="token operator">+</span>ingredients<span class="token operator">+</span><span class="token string">"饼干"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（3）创建动态代理</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代理的目标对象</span>    <span class="token keyword">private</span> Object object<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DynamicProxy</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> object<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param proxy  动态生成的代理对象     * @param method 代理方法     * @param args   代理方法的方法参数     * @return 结果     * @throws Throwable 异常     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token function">beforeMethod</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 反射执行代理对象的目标方法</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">afterMethod</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">IBiscuitService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"准备饼干配料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">ICandyService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"准备糖果配料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"暂不支持代理"</span> <span class="token operator">+</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">afterMethod</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">IBiscuitService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"包装饼干"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">ICandyService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"包装糖果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"暂不支持代理"</span> <span class="token operator">+</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（4）测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pp2Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[代理模式-动态代理]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ICandyService candyService <span class="token operator">=</span> <span class="token punctuation">(</span>ICandyService<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">DynamicProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CandyServiceServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        candyService<span class="token punctuation">.</span><span class="token function">makeCandy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++++++++++++++++华丽的分割线+++++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IBiscuitService biscuitService <span class="token operator">=</span> <span class="token punctuation">(</span>IBiscuitService<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">DynamicProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BiscuitServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        biscuitService<span class="token punctuation">.</span><span class="token function">makeBiscuit</span><span class="token punctuation">(</span><span class="token string">"草莓"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++++++++++++++++华丽的分割线+++++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        biscuitService<span class="token punctuation">.</span><span class="token function">makeBiscuit</span><span class="token punctuation">(</span><span class="token string">"奶油"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（5）输出</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>代理模式<span class="token operator">-</span>动态代理<span class="token punctuation">]</span>准备糖果配料制作糖果包装糖果<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>华丽的分割线<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">+</span>准备饼干配料制作草莓饼干包装饼干<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>华丽的分割线<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">+</span>准备饼干配料制作奶油饼干包装饼干</code></pre><p>3.CGLib代理</p><p>​    通过继承来实现，生成的代理类就是目标对象类的子类，通过重写业务方法来实现代理。</p><p>4.Spring对代理模式的扩展</p><p>​    可以通过以下配置强制使用CGLib代理;</p><pre class=" language-java"><code class="language-java">spring<span class="token operator">:</span>  aop<span class="token operator">:</span>    proxy<span class="token operator">-</span>target<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">:</span> <span class="token boolean">true</span></code></pre><hr><h3 id="3-行为型模式（11）"><a href="#3-行为型模式（11）" class="headerlink" title="3.行为型模式（11）"></a>3.行为型模式（11）</h3><h4 id="3-1-模板方法模式（TP）"><a href="#3-1-模板方法模式（TP）" class="headerlink" title="3.1. 模板方法模式（TP）"></a>3.1. 模板方法模式（TP）</h4><p><strong>英文：</strong>Template Pattern</p><p><strong>定义：</strong>模板方法模式定义了一个流程的骨架，由多个方法组成。并允许子类为一个或多个步骤提供实现。简而言之就是公共的不变的部分由父类统一实现，变化的部分由子类来个性化实现。</p><p><strong>优点：</strong></p><ol><li><p>提高复用性</p></li><li><p>提高拓展性</p></li><li><p>OCP</p></li></ol><p><strong>缺点：</strong></p><ol><li><p>类的数目增加</p></li><li><p>增加了系统实现的复杂度</p></li><li><p>父类添加新的抽象方法，所有子类都要改一遍</p></li></ol><p><strong>最佳实践：</strong></p><p><strong>举例</strong>：外卖<br>1.创建固定流程抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Takeaway</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(流程固定)下单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">packageSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(流程固定)打包派送"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">needTableware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">flow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">needTableware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"赠送一次性餐具"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">packageSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.创建子类实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CakeTakeaway</span> <span class="token keyword">extends</span> <span class="token class-name">Takeaway</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">needTableware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">needTableware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BiscuitTakeaway</span> <span class="token keyword">extends</span> <span class="token class-name">Takeaway</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作饼干"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">needTableware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CakeTakeaway cakeTakeaway <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CakeTakeaway</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cakeTakeaway<span class="token punctuation">.</span><span class="token function">flow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++++++++++++++华丽的分割线+++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BiscuitTakeaway biscuitTakeaway <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BiscuitTakeaway</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        biscuitTakeaway<span class="token punctuation">.</span><span class="token function">flow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.实现</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span>流程固定<span class="token punctuation">)</span>下单制作蛋糕赠送一次性餐具<span class="token punctuation">(</span>流程固定<span class="token punctuation">)</span>打包派送<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>华丽的分割线<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">+</span><span class="token punctuation">(</span>流程固定<span class="token punctuation">)</span>下单制作饼干<span class="token punctuation">(</span>流程固定<span class="token punctuation">)</span>打包派送</code></pre><hr><h4 id="3-2-迭代器模式（IP）"><a href="#3-2-迭代器模式（IP）" class="headerlink" title="3.2. 迭代器模式（IP）"></a>3.2. 迭代器模式（IP）</h4><p><strong>英文：</strong>Iterator Pattern</p><p><strong>定义：</strong>迭代器模式，又称游标模式。这种模式提供一种方法访问一个容器对象中各个元素，而又不需要暴露该对象的内部细节。</p><p><strong>优点：</strong></p><p>1.它支持以不同的方式遍历一个聚合对象，在同一个聚合对象上可以定义多种遍历方式。替换迭代器就可以切换遍历方法。</p><p>2.迭代器简化了聚合类。聚合对象可以不用自己再提供遍历方法。</p><p>3.在迭代器模式中由于引入了抽象层，增加新的聚合类和迭代器类都很方便，无须修改原有代码，满足“开闭原则”的要求。</p><p><strong>缺点：</strong></p><p>1.由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器来，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p><p>2.抽象迭代器设计难度相对较大，需要充分考虑到系统将来的扩展，，例如JDK内置迭代器Iterator就无法实现逆向遍历，如果需要实现逆向遍历，只能通过其子类ListIterator等来实现，而ListIterator迭代器无法用于操作Set类型的聚合对象。</p><p><strong>最佳实践：</strong></p><p>1.访问一个聚合对象的内容而无须暴露它的内部表示。将聚合对象的访问与内部数据的存储分离，使得访问聚合对象时无须了解其内部实现细节。</p><p>2.需要为一个聚合对象提供多种遍历方式。</p><p>3.为遍历不同聚合结构提供统一的接口，该接口的实现类中为不同的聚合结构提供不同的遍历方式，而客户端可以一致性的操作该接口。</p><p><strong>举例</strong>：</p><p>1.创建抽象容器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span>  <span class="token class-name">Aggregate</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    Iterator <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.创建容器实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteAggregate</span> <span class="token keyword">implements</span> <span class="token class-name">Aggregate</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteIterator</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建抽象迭代器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>    Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.创建具体迭代器实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ConcreteIterator</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object obj <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            obj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cursor<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor <span class="token operator">==</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Aggregate ag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteAggregate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ag<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ag<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ag<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator it <span class="token operator">=</span> ag<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String str <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>6.输出</p><pre class=" language-java"><code class="language-java">abc</code></pre><hr><h4 id="3-3-策略模式（SP）"><a href="#3-3-策略模式（SP）" class="headerlink" title="3.3. 策略模式（SP）"></a>3.3. 策略模式（SP）</h4><p><strong>英文：</strong>Strategy Pattern</p><p><strong>定义：</strong>策略模式定义了算法家族，分别封装起来，让它们之间可以互相替换。此模式让算法的变化不会影响到使用算法的用户。策略模式常用于消除大量的if else代码。</p><p><strong>优点：</strong></p><p><strong>缺点：</strong></p><p><strong>最佳实践：</strong></p><ol><li>系统有很多类，它们的区别仅仅在于行为不同</li><li>一个系统需要动态地在几种算法中选择一种</li></ol><p><strong>举例</strong>：促销活动</p><p>1.创建活动接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">discount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.创建多接口实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategyOne</span> <span class="token keyword">implements</span> <span class="token class-name">Activity</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">discount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"满减返现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategyTwo</span> <span class="token keyword">implements</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">discount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"满减打折"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String plan <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>plan<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            StrategyOne strategyOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            strategyOne<span class="token punctuation">.</span><span class="token function">discount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>plan<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            StrategyTwo strategyTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            strategyTwo<span class="token punctuation">.</span><span class="token function">discount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"暂不支持活动策略"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.输出</p><pre class=" language-java"><code class="language-java">满减返现</code></pre><hr><h4 id="3-4-解释器模式（IP）–-TODO"><a href="#3-4-解释器模式（IP）–-TODO" class="headerlink" title="3.4. 解释器模式（IP）– TODO"></a>3.4. 解释器模式（IP）– TODO</h4><p><strong>英文：</strong>Interpreter Pattern</p><p><strong>定义：</strong></p><p><strong>优点：</strong></p><p><strong>缺点：</strong></p><p><strong>最佳实践：</strong></p><p><strong>举例</strong>：最难模式，不常用，后补充</p><hr><h4 id="3-5-观察者模式（OP）"><a href="#3-5-观察者模式（OP）" class="headerlink" title="3.5. 观察者模式（OP）"></a>3.5. 观察者模式（OP）</h4><p><strong>英文：</strong>Observer Pattern</p><p><strong>定义：</strong>观察者模式定义了对象之间的一对多依赖，让多个观察者同时监听某个主题对象，当主体对象发生变化时，它的所有观察者都会收到响应的通知。</p><p><strong>优点：</strong></p><ol><li><p>观察者和被观察者之间建立一个抽象的耦合；</p></li><li><p>观察者模式支持广播通信。</p></li></ol><p><strong>缺点：</strong></p><ol><li><p>观察者之间有过多的细节依赖，提高时间消耗及程序复杂度</p></li><li><p>应避免循环调用</p></li></ol><p><strong>最佳实践：</strong></p><p><strong>举例</strong>：公众号推送文章</p><p>1.创建被观察者(公众号)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OfficialAccount</span> <span class="token keyword">extends</span> <span class="token class-name">Observable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String accountName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OfficialAccount</span><span class="token punctuation">(</span>String accountName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountName <span class="token operator">=</span> accountName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAccountName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>Article article<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>accountName<span class="token operator">+</span><span class="token string">"】"</span> <span class="token operator">+</span><span class="token string">"发起推送>>>"</span><span class="token operator">+</span>article<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的《"</span><span class="token operator">+</span>article<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置标识位 changed = true，表示被观察者发生了改变</span>        <span class="token function">setChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通知观察者，可以给观察者传递数据</span>        <span class="token function">notifyObservers</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.创建观察者（订阅者）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Followers</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Followers</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Observable o<span class="token punctuation">,</span> Object arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OfficialAccount officialAccount <span class="token operator">=</span> <span class="token punctuation">(</span>OfficialAccount<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        Article article <span class="token operator">=</span> <span class="token punctuation">(</span>Article<span class="token punctuation">)</span> arg<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">":::收到【"</span><span class="token operator">+</span>officialAccount<span class="token punctuation">.</span><span class="token function">getAccountName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"】的推送:"</span><span class="token operator">+</span>article<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的《"</span><span class="token operator">+</span>article<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建推送对象（文章）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Article</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> author<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthor</span><span class="token punctuation">(</span>String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OfficialAccount officialAccount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OfficialAccount</span><span class="token punctuation">(</span><span class="token string">"JAVA大本营"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加订阅者</span>        Followers follower1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Followers</span><span class="token punctuation">(</span><span class="token string">"路人甲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        officialAccount<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>follower1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Followers follower2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Followers</span><span class="token punctuation">(</span><span class="token string">"路人乙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        officialAccount<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>follower2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//推送</span>        Article article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token string">"大话设计模式"</span><span class="token punctuation">,</span><span class="token string">"菜鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        officialAccount<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.输出</p><pre class=" language-java"><code class="language-java">【JAVA大本营】发起推送<span class="token operator">>>></span>菜鸟的《大话设计模式》路人乙<span class="token operator">:</span><span class="token operator">:</span><span class="token operator">:</span>收到【JAVA大本营】的推送<span class="token operator">:</span>菜鸟的《大话设计模式》路人甲<span class="token operator">:</span><span class="token operator">:</span><span class="token operator">:</span>收到【JAVA大本营】的推送<span class="token operator">:</span>菜鸟的《大话设计模式》</code></pre><hr><h4 id="3-6-备忘录模式（MP）"><a href="#3-6-备忘录模式（MP）" class="headerlink" title="3.6. 备忘录模式（MP）"></a>3.6. 备忘录模式（MP）</h4><p><strong>英文：</strong>Memento Pattern</p><p><strong>定义：</strong>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以将该对象恢复到原先保存的状态。</p><p><strong>优点：</strong></p><p>1.它提供了一种状态恢复的实现机制，使得用户可以方便地回到一个特定的历史步骤，当新的状态无效或者存在问题时，可以使用暂时存储起来的备忘录将状态复原。</p><p>2.备忘录实现了对信息的封装，一个备忘录对象是一种原发器对象状态的表示，不会被其他代码所改动。备忘录保存了原发器的状态，采用列表、堆栈等集合来存储备忘录对象可以实现多次撤销操作。</p><p><strong>缺点：</strong>资源消耗过大，如果需要保存的原发器类的成员变量太多，就不可避免需要占用大量的存储空间，每保存一次对象的状态都需要消耗一定的系统资源。</p><p><strong>最佳实践：</strong></p><ol><li><p>保存一个对象在某一个时刻的全部状态或部分状态，这样以后需要时它能够恢复到先前的状态，实现撤销操作。</p></li><li><p>防止外界对象破坏一个对象历史状态的封装性，避免将对象历史状态的实现细节暴露给外界对象。</p></li></ol><table><thead><tr><th>名称</th><th>作用</th><th></th></tr></thead><tbody><tr><td>原发器类（Originator）</td><td>创建一个备忘录对象，使用备忘录存储它的内部状态</td><td></td></tr><tr><td>负责人类（CareTaker）</td><td>负责保存好备忘录对象，不能检查或操作备忘录的内容</td><td></td></tr><tr><td>备忘录类（Memento）</td><td>将原发器的内部状态存储起来，原发器根据需要决定备忘录存储原发器的哪些内部状态</td></tr></tbody></table><p><strong>举例</strong>：冒险岛闯关</p><p>1.创建游戏类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdventureIslandGame</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**关卡*/</span>    <span class="token keyword">private</span> Integer point<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**建档*/</span>    <span class="token keyword">public</span> GameMemento <span class="token function">createMemento</span><span class="token punctuation">(</span>Integer point<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GameMemento</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**开始游戏*/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        point <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**恢复备份*/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restore</span><span class="token punctuation">(</span>GameMemento gameMemento<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>point <span class="token operator">=</span> gameMemento<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> point<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPoint</span><span class="token punctuation">(</span>Integer point<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>point <span class="token operator">=</span> point<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.创建备份</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameMemento</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**关卡*/</span>    <span class="token keyword">private</span> Integer point<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 备份关卡     */</span>    <span class="token keyword">public</span> <span class="token function">GameMemento</span><span class="token punctuation">(</span><span class="token keyword">int</span> point<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>point <span class="token operator">=</span> point<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> point<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPoint</span><span class="token punctuation">(</span>Integer point<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>point <span class="token operator">=</span> point<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建备份管理类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Caretaker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> GameMemento gameMemento<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**恢复备份*/</span>    <span class="token keyword">public</span> GameMemento <span class="token function">retrieveMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameMemento<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**保存备份*/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveMemento</span><span class="token punctuation">(</span>GameMemento gameMemento<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gameMemento <span class="token operator">=</span> gameMemento<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[冒险岛闯关游戏]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AdventureIslandGame game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdventureIslandGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"游戏开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        game<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"击杀第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关boss,进入下一关"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建新档..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GameMemento gameMemento <span class="token operator">=</span> game<span class="token punctuation">.</span><span class="token function">createMemento</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Caretaker caretaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Caretaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caretaker<span class="token punctuation">.</span><span class="token function">saveMemento</span><span class="token punctuation">(</span>gameMemento<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关,存档完成~~~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        game<span class="token punctuation">.</span><span class="token function">setPoint</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"击杀第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关boss,进入下一关"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameMemento<span class="token punctuation">.</span><span class="token function">setPoint</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caretaker<span class="token punctuation">.</span><span class="token function">saveMemento</span><span class="token punctuation">(</span>gameMemento<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关,存档完成~~~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        game<span class="token punctuation">.</span><span class="token function">setPoint</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关boss杀死,游戏结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"回退关卡..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        game<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span>caretaker<span class="token punctuation">.</span><span class="token function">retrieveMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~回退完成,当前关卡第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关~~~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        game<span class="token punctuation">.</span><span class="token function">setPoint</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取当前关卡：进入第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.输出</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>冒险岛闯关游戏<span class="token punctuation">]</span>游戏开始进入第<span class="token number">1</span>关击杀第<span class="token number">1</span>关boss<span class="token punctuation">,</span>进入下一关创建新档<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>进入第<span class="token number">2</span>关击杀第<span class="token number">2</span>关boss<span class="token punctuation">,</span>进入下一关​<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>第<span class="token number">2</span>关<span class="token punctuation">,</span>存档完成<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>进入第<span class="token number">3</span>关被第<span class="token number">3</span>关boss杀死<span class="token punctuation">,</span>游戏结束回退关卡<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>​<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>回退完成<span class="token punctuation">,</span>当前关卡第<span class="token number">2</span>关<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>获取当前关卡：进入第<span class="token number">3</span>关</code></pre><hr><h4 id="3-7-命令模式（CP）"><a href="#3-7-命令模式（CP）" class="headerlink" title="3.7. 命令模式（CP）"></a>3.7. 命令模式（CP）</h4><p><strong>英文：</strong>Command Pattern</p><p><strong>定义：</strong> 将一个请求封装为一个对象，从而使我们可用不同的请求对用户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>抽象命令者（Command）</td><td>定义命令的接口，声明执行的方法。</td></tr><tr><td>具体命令类（ConcreteCommand）</td><td>命令接口实现对象，是“虚”的实现；通常会持有接收者，并调用接收者的功能来完成命令要执行的操作。</td></tr><tr><td>接收者（Receiver）</td><td>真正执行命令的对象。任何类都可能成为一个接收者，只要它能够根据命令要求实现的相应功能。</td></tr><tr><td>调用者（Invoker）</td><td>要求命令要求命令对象执行请求，通常会持有命令对象，可以持有很多的命令对象。这是用户端真正出发命令并要求命令执行相应操作的地方，也就是说，相当于使用命令对象的入口。</td></tr><tr><td>具体命令对象（client）</td><td>创建具体的命令对象，并且设置命令对象的接收者。也可以理解为装配者。</td></tr></tbody></table><p><strong>优点：</strong></p><ol><li>降低系统的耦合度。由于请求者与接收者之间不存在直接引用，因此请求者与接收者之间实现完全解耦，相同的请求者可以对应不同的接收者，同样，相同的接收者也可以供不同的请求者使用，两者之间具有良好的独立性。</li><li>新的命令可以很容易地加入到系统中。由于增加新的具体命令类不会影响到其他类，因此增加新的具体命令类很容易，无须修改原有系统源代码，甚至客户类代码，满足“开闭原则”的要求。</li></ol><p><strong>缺点：</strong>使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个对请求接收者的调用操作都需要设计一个具体命令类，因此在某些系统中可能需要提供大量的具体命令类，这将影响命令模式的使用。</p><p><strong>最佳实践：</strong></p><p>1.系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</p><p>2.系统需要在不同的时间指定请求、将请求排队和执行请求。</p><p><strong>举例</strong>：Siri语音助手</p><p>1.创建命令接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行命令</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.创建具体实现命令实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OpenCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Application app<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OpenCommand</span><span class="token punctuation">(</span>Application app<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>app <span class="token operator">=</span> app<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloseCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Application app<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CloseCommand</span><span class="token punctuation">(</span>Application app<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>app <span class="token operator">=</span> app<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        app<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建应用抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.创建应用实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeChat</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"微信打开了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"微信关闭了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Alipay</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"支付宝打开了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"支付宝关闭了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.实现命令发起者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Siri</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Command command<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置要执行的命令     * @param command 命令     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommand</span><span class="token punctuation">(</span>Command command<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>command <span class="token operator">=</span> command<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 执行命令     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>6.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Siri siri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Siri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"嘿 siri， 打开微信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Application weChat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeChat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Command command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenCommand</span><span class="token punctuation">(</span>weChat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//siri传递命令</span>        siri<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        siri<span class="token punctuation">.</span><span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"嘿 siri，打开支付宝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Application alipay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Alipay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenCommand</span><span class="token punctuation">(</span>alipay<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//siri传递命令</span>        siri<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        siri<span class="token punctuation">.</span><span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>7.输出</p><pre class=" language-java"><code class="language-java">嘿 siri， 打开微信微信打开了嘿 siri，打开支付宝支付宝打开了</code></pre><hr><h4 id="3-8-中介者模式（MP）"><a href="#3-8-中介者模式（MP）" class="headerlink" title="3.8. 中介者模式（MP）"></a>3.8. 中介者模式（MP）</h4><p><strong>英文：</strong>Mediator Pattern</p><p><strong>定义：</strong>中介者模式是指用一个中介对象来封装一系列的对象交互。中介者使个对象不需要显示的相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p><strong>优点：</strong></p><p>1.简化了对象之间的交互，它用中介者和同事的一对多交互代替了原来同事之间的多对多交互，一对多关系更容易理解、维护扩展，将原本难以理解的网状结构转换成相对简单的星型结构。</p><p>2.可将各同事对象解耦。中介者有利于各同事之间的松耦合，我们可以独立的改变和复用每一个同事和中介者，增加新的中介者和新的同事类都比较方便，更好的符合“开闭原则”。</p><p>3.可以减少子类生成，中介者将原本分布于多个对象间的行为集中在一起，改变这些行为只需生成新的中介者子类即可，这使得各个同事类可被重用，无须对同事类进行扩展。</p><p><strong>缺点：</strong>在具体中介者类中包含了大量同事之间的交互细节，可能会导致具体中介者类非常复杂，使得系统难以维护。</p><p><strong>最佳实践：</strong></p><p>1.系统中对象之间存在复杂的引用关系，系统结构混乱且难以理解。</p><p>2.一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象。</p><p>3.想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。可以通过引入中介者类来实现，在中介者中定义对象交互的公共行为，如果需要改变行为则可以增加新的具体中介者类。</p><p><strong>举例</strong>：同事类相互影响</p><p>1.创建同事类抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">,</span> Mediator mediator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.创建同事类实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColleagueA</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">,</span> Mediator mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>        mediator<span class="token punctuation">.</span><span class="token function">A2B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColleagueB</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">,</span> Mediator mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>        mediator<span class="token punctuation">.</span><span class="token function">B2A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建中介者抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Colleague ca<span class="token punctuation">;</span>    <span class="token keyword">protected</span> Colleague cb<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Mediator</span><span class="token punctuation">(</span>Colleague a<span class="token punctuation">,</span> Colleague b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ca <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">A2B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">B2A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.创建中介者实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MediatorImpl</span> <span class="token keyword">extends</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MediatorImpl</span><span class="token punctuation">(</span>Colleague a<span class="token punctuation">,</span> Colleague b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">A2B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> ca<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cb<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span>number<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">B2A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ca<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span>number<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ColleagueA colleagueA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ColleagueB colleagueB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Mediator mediator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediatorImpl</span><span class="token punctuation">(</span>colleagueA<span class="token punctuation">,</span>colleagueB<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++++++++++++通过设置A影响B++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        colleagueA<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A的值为："</span><span class="token operator">+</span>colleagueA<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B的值为A的10倍："</span><span class="token operator">+</span>colleagueB<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++++++++++++通过设置B影响A++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        colleagueB<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B的值为："</span><span class="token operator">+</span>colleagueB<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A的值为B的0.1倍："</span><span class="token operator">+</span>colleagueA<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>6.输出</p><pre class=" language-java"><code class="language-java"><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>通过设置A影响B<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>A的值为：<span class="token number">1000</span>B的值为A的<span class="token number">10</span>倍：<span class="token number">100000</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>通过设置B影响A<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>B的值为：<span class="token number">2000</span>A的值为B的<span class="token number">0.1</span>倍：<span class="token number">20</span></code></pre><hr><h4 id="3-9-职责链模式（CRP）"><a href="#3-9-职责链模式（CRP）" class="headerlink" title="3.9. 职责链模式（CRP）"></a>3.9. 职责链模式（CRP）</h4><p><strong>英文：</strong>Chain of Responsibility Pattern</p><p><strong>定义：</strong>责任链模式是为了避免请求的发送者和接收者之间的耦合关系，使多个接收对象都有机会处理请求。将这些对象练成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><table><thead><tr><th>职责链分类</th><th>定义</th></tr></thead><tbody><tr><td>纯的职责链模式</td><td>纯的职责链模式要求一个具体的处理者对象只能在两个行为中选择一个：一个是承担责任；二是把责任推给下家。不允许出现某一个具体处理者对象在承担了一部分责任后又把责任向下传的情况。在一个纯的职责链中，一个请求必须被某一个处理者对象所接受。</td></tr><tr><td>不纯的职责链模式</td><td>不纯的职责链模式中允许某个请求被一个具体处理者部分处理后再向下传递，或者一个具体处理者处理完某请求后其后继处理者可以继续处理该请求，而且一个请求可以最终不被任何处理者对象所接收。</td></tr></tbody></table><p><strong>优点：</strong></p><p>1.请求不需要指出被哪个对象处理了，这样的效果是请求者和接收者之间的解耦，而且链中的对象也不需要清楚其他链的结构，也降低了耦合。</p><p>2.请求处理对象仅需要维护一个指向其后继者的的引用，而不需要维护所有的处理对象，简化了对象之间的相互连接。</p><p>3.在给对象分派职责时，职责链可以给我们更多的灵活性，可以通过在运行时对该链进行动态的增加或修改来增加或改变处理一个请求的职责。</p><p>4.新增一个请求处理对象，不需要改动现有代码，只需要重新设置连接即可，符合“开闭原则”。</p><p><strong>缺点：</strong></p><p>1.如果一个请求没有明确的接收者，那么就不能保证它一定会被处理，该请求可能一直到链的末端都得不到处理；一个请求也可能因职责链没有被正确配置而得不到处理。</p><p>2.对于比较长的职责链，请求的处理可能涉及到多个处理对象，不仅增加了代码的复杂性并且系统性能也将受到一定影响，而且在进行代码调试时不太方便。</p><p>3.若建链不当，可能会造成循环调用，将导致系统陷入死循环。</p><p><strong>最佳实践：</strong></p><p>1.有多个对象可以处理同一个请求，具体哪个对象处理该请求待运行时刻再确定，客户端只需将请求提交到链上，而无须关心请求的处理对象是谁以及它是如何处理的。</p><p>2.在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。</p><p>3.可动态指定一组对象处理请求，客户端可以动态创建职责链来处理请求，还可以改变链中处理者之间的先后次序。其实在我们日常开发中也会有适用到责任链模式的场景，try/catch、servlet(各个servelt互相调用)、以及filter等</p><p><strong>举例</strong>：请假审批</p><p>1.创建请假对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leave</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//部门</span>    <span class="token keyword">private</span> String department<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//天数</span>    <span class="token keyword">private</span> Double day<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//原因</span>    <span class="token keyword">private</span> String cause<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> department<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDepartment</span><span class="token punctuation">(</span>String department<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>department <span class="token operator">=</span> department<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Double <span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> day<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDay</span><span class="token punctuation">(</span>Double day<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cause<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCause</span><span class="token punctuation">(</span>String cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cause <span class="token operator">=</span> cause<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Leave{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", department='"</span> <span class="token operator">+</span> department <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", day="</span> <span class="token operator">+</span> day <span class="token operator">+</span>                <span class="token string">", cause='"</span> <span class="token operator">+</span> cause <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.创建审批者抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Approver</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//审核人名</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//下一个审核人</span>    <span class="token keyword">public</span> Approver nextApprove<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Approver</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置下一个审核人</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNextApprove</span><span class="token punctuation">(</span>Approver nextApprove<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextApprove <span class="token operator">=</span> nextApprove<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//审核</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">approval</span><span class="token punctuation">(</span>Leave leave<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.创建审批者实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Approver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Manager</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">approval</span><span class="token punctuation">(</span>Leave leave<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>leave<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"权限范围内,批准了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束审批"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>nextApprove<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"权限范围外,移交上一级领导"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>nextApprove<span class="token punctuation">.</span><span class="token function">approval</span><span class="token punctuation">(</span>leave<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"领导不在,审批质押"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boss</span> <span class="token keyword">extends</span> <span class="token class-name">Approver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Boss</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">approval</span><span class="token punctuation">(</span>Leave leave<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leave<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> leave<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"：未超预期,批准"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束审批"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"时间太长了,影响公司挣钱,驳回"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束审批"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Leave leave <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leave<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leave<span class="token punctuation">.</span><span class="token function">setDepartment</span><span class="token punctuation">(</span><span class="token string">"研发部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leave<span class="token punctuation">.</span><span class="token function">setDay</span><span class="token punctuation">(</span><span class="token number">8.0D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leave<span class="token punctuation">.</span><span class="token function">setCause</span><span class="token punctuation">(</span><span class="token string">"结婚"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Manager manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token string">"李经理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Boss boss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boss</span><span class="token punctuation">(</span><span class="token string">"钱总"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        manager<span class="token punctuation">.</span><span class="token function">setNextApprove</span><span class="token punctuation">(</span>boss<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请假发起者："</span><span class="token operator">+</span>leave<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        manager<span class="token punctuation">.</span><span class="token function">approval</span><span class="token punctuation">(</span>leave<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.输出</p><pre class=" language-java"><code class="language-java">请假发起者：Leave<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'小王'</span><span class="token punctuation">,</span> department<span class="token operator">=</span><span class="token string">'研发部'</span><span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">8.0</span><span class="token punctuation">,</span> cause<span class="token operator">=</span><span class="token string">'结婚'</span><span class="token punctuation">}</span>李经理权限范围外<span class="token punctuation">,</span>移交上一级领导钱总：未超预期<span class="token punctuation">,</span>批准结束审批</code></pre><hr><h4 id="3-10-访问者模式（VP）"><a href="#3-10-访问者模式（VP）" class="headerlink" title="3.10. 访问者模式（VP）"></a>3.10. 访问者模式（VP）</h4><p><strong>英文：</strong>Visitor Pattern</p><p><strong>定义：</strong>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素类的前提<a href="https://baike.baidu.com/item/下定义/658188" target="_blank" rel="noopener">下定义</a>作用于这些元素的新操作。</p><p><strong>优点：</strong></p><p>1.符合单一职责原则</p><p>2.优秀的扩展性</p><p>3.灵活性</p><p><strong>缺点：</strong></p><p>1.具体元素对访问者公布细节，违反了迪米特原则</p><p>2.具体元素变更比较困难</p><p>3.违反了依赖倒置原则，依赖了具体类，没有依赖抽象。</p><p><strong>最佳实践：</strong></p><p>1.对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 </p><p>2.需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，也不希望在增加新操作时修改这些类。</p><p>注意事项：访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。</p><p><strong>举例</strong>：</p><p>场景：</p><p>CEO和CTO开始评定员工一年的工作绩效，员工分为工程师和经理，CTO关注工程师的代码量、经理的新产品数量；CEO关注的是工程师的KPI和经理的KPI以及新产品数量。由于CEO和CTO对于不同员工的关注点是不一样的，这就需要对不同员工类型进行不同的处理。访问者模式此时可以派上用场了。</p><p>1.创建抽象员工类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Staff</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//员工姓名</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//员工KPI</span>    <span class="token keyword">public</span> Integer kpi<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Staff</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>kpi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//接受visitor访问</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.创建员工实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Engineer</span> <span class="token keyword">extends</span> <span class="token class-name">Staff</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Engineer</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCodeLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Staff</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Manager</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getProductNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建观接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 访问工程师类型</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Engineer engineer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 访问经理类型</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Manager manager<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.创建观察者接口实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CEO</span> <span class="token keyword">implements</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CEO</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Engineer engineer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"查看:"</span><span class="token operator">+</span>engineer<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"的KPI："</span><span class="token operator">+</span>engineer<span class="token punctuation">.</span>kpi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Manager manager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"查看:"</span><span class="token operator">+</span>manager<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"的KPI："</span><span class="token operator">+</span>manager<span class="token punctuation">.</span>kpi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CTO</span> <span class="token keyword">implements</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CTO</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Engineer engineer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"查看:"</span><span class="token operator">+</span>engineer<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"的代码数："</span><span class="token operator">+</span>engineer<span class="token punctuation">.</span><span class="token function">getCodeLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Manager manager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"查看:"</span><span class="token operator">+</span>manager<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"的产品数："</span><span class="token operator">+</span>manager<span class="token punctuation">.</span><span class="token function">getProductNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.创建报表类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelReport</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Staff<span class="token operator">></span> staffs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ExcelReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        staffs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token string">"李经理"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        staffs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token string">"张经理"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        staffs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Engineer</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        staffs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Engineer</span><span class="token punctuation">(</span><span class="token string">"小李"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showReport</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Staff staff <span class="token operator">:</span> staffs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            staff<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>6.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExcelReport excelReport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExcelReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        excelReport<span class="token punctuation">.</span><span class="token function">showReport</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CEO</span><span class="token punctuation">(</span><span class="token string">"吴董"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        excelReport<span class="token punctuation">.</span><span class="token function">showReport</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CTO</span><span class="token punctuation">(</span><span class="token string">"程总"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>7.输出</p><pre class=" language-java"><code class="language-java">吴董查看<span class="token operator">:</span>李经理的KPI：<span class="token number">3</span>吴董查看<span class="token operator">:</span>张经理的KPI：<span class="token number">7</span>吴董查看<span class="token operator">:</span>小王的KPI：<span class="token number">5</span>吴董查看<span class="token operator">:</span>小李的KPI：<span class="token number">8</span>程总查看<span class="token operator">:</span>李经理的产品数：<span class="token number">1</span>程总查看<span class="token operator">:</span>张经理的产品数：<span class="token number">3</span>程总查看<span class="token operator">:</span>小王的代码数：<span class="token number">55701</span>程总查看<span class="token operator">:</span>小李的代码数：<span class="token number">31420</span></code></pre><hr><h4 id="3-11-状态模式（SP）"><a href="#3-11-状态模式（SP）" class="headerlink" title="3.11. 状态模式（SP）"></a>3.11. 状态模式（SP）</h4><p><strong>英文</strong>：State Pattern</p><p><strong>定义：</strong>允许一个对象在其状态改变时，改变它的行为，对象看起来似乎修改了它的类。</p><p><strong>优点：</strong></p><p>1.封装了状态的转换规则，在状态模式中可以将状态转换的工作封装在环境类或具体的状态类中，可以对状态转换码进行集中管理，而不是分散在一个个的业务中。</p><p>2.将所有与某个状态有关的行为放到一个类中，只需要注入一个不同的状态对象即可使环境对象拥有不同的行为。</p><p>3.允许状态转换逻辑与状态对象合为一体，而不是提供一个巨大的条件语句块，状态模式可以让我们避免使用庞大的条件语句来将业务方法和状态转换代码交织在一起。</p><p><strong>缺点：</strong></p><p>1.状态模式的使用必然会增加系统中类和对象的个数，导致系统运行开销增大。</p><p>2.状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱，增加系统设计的难度。</p><p><strong>最佳实践：</strong></p><p>1.对象的行为依赖于它的状态（如某些属性值），状态的改变将导致行为的变化。</p><p>2.在代码中包含大量与对象状态有关的条件语句，这些条件语句的出现，会导致代码的可维护性和灵活性变差，不能方便地增加和删除状态，并且导致客户类与类库之间的耦合增强。</p><p><strong>举例</strong>：请假审核</p><p>1.创建请假对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeaveApply</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//申请单初始状态是待提交状态</span>    <span class="token keyword">private</span> ApplyState applyState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置状态</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span>ApplyState state<span class="token punctuation">)</span><span class="token punctuation">{</span>        applyState <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//状态变化后,更新对象自身的行为</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        applyState<span class="token punctuation">.</span><span class="token function">changeHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.创建审核状态接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplyState</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//状态变化处理操作</span>    <span class="token keyword">void</span> <span class="token function">changeHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.创建各审核状态具体实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Audit</span> <span class="token keyword">implements</span> <span class="token class-name">ApplyState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[审核中]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuditPass</span> <span class="token keyword">implements</span> <span class="token class-name">ApplyState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[审核通过]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuditReject</span> <span class="token keyword">implements</span> <span class="token class-name">ApplyState</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[审核未通过]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LeaveApply leaveApply <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeaveApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leaveApply<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leaveApply<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AuditPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leaveApply<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leaveApply<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AuditReject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leaveApply<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.输出</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>审核中<span class="token punctuation">]</span><span class="token punctuation">[</span>审核通过<span class="token punctuation">]</span><span class="token punctuation">[</span>审核未通过<span class="token punctuation">]</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统优化小记：CPU长时间满负荷运行</title>
      <link href="/2020/11/28/system-optimize/"/>
      <url>/2020/11/28/system-optimize/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CPU长时间满负荷运行,一次入门级降CPU系统优化实战</p></blockquote><a id="more"></a><h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>用户量增大,线上一个Java单应用服务长时间占用服务器CPU达到400%，使得接口响应速度非常慢，线程拥堵，出现各种响应超时问题，即便有时候没有用户操作，也会长时间占用大量CPU和内存。</p><p><img src="/2020/11/28/system-optimize/1-1-1.png" alt=""></p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>找出哪些程序处理满，进行排查优化（业务流程调整、锁关闭、SQL优化、一些耗性能的程序不使用内存方案）</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>linux命令排查 + Arthas监控 + Druid sql 监控</p><h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><h2 id="一、Linux命令排查，方法如下："><a href="#一、Linux命令排查，方法如下：" class="headerlink" title="一、Linux命令排查，方法如下："></a>一、Linux命令排查，方法如下：</h2><h3 id="1-显示进程列表，定位进程号"><a href="#1-显示进程列表，定位进程号" class="headerlink" title="1.显示进程列表，定位进程号"></a>1.显示进程列表，定位进程号</h3><p>在<strong>top</strong>命令下，按<strong>shift+H</strong>查看cpu占用最高进程(<strong>PID</strong>:21659)</p><p><img src="/2020/11/28/system-optimize/1-1-2.png" alt=""></p><h3 id="2-显示线程列表，定位线程号，找到哪些线程占用高耗时长"><a href="#2-显示线程列表，定位线程号，找到哪些线程占用高耗时长" class="headerlink" title="2.显示线程列表，定位线程号，找到哪些线程占用高耗时长"></a>2.显示线程列表，定位线程号，找到哪些线程占用高耗时长</h3><p>命令：<code>ps -mp pid -o THREAD,tid,time | sort -rn | more</code></p><p>ex：ps -mp 21659 -o THREAD,tid,time （shift+H）</p><p>ps：截图中pid写成24275原因是由于中途重启过一次程序，原PID：21659 变更成 PID：24275，实则都是同一个Java程序</p><p>其中TID：24737、24742、24745，耗时较长占用CPU率较高</p><p><img src="/2020/11/28/system-optimize/1-1-3.png" alt=""></p><h3 id="3-将线程号转为系统可识别的16进制"><a href="#3-将线程号转为系统可识别的16进制" class="headerlink" title="3.将线程号转为系统可识别的16进制"></a>3.将线程号转为系统可识别的16进制</h3><p>命令：<code>printf "%x\n" tid</code></p><p><img src="/2020/11/28/system-optimize/1-1-4.png" alt=""></p><h3 id="4-打印线程的堆栈信息，分析原因"><a href="#4-打印线程的堆栈信息，分析原因" class="headerlink" title="4.打印线程的堆栈信息，分析原因"></a>4.打印线程的堆栈信息，分析原因</h3><p>命令： <code>jstack PID | grep [16进制TID] -A 30</code></p><p>ex：查看线程24737的堆栈信息， jstack 24275 | grep 60a1 -A 30</p><h3 id="5-如果嫌以上操作麻烦，也可直接使用-jstack-PID，打印出所有堆栈，进行查看。"><a href="#5-如果嫌以上操作麻烦，也可直接使用-jstack-PID，打印出所有堆栈，进行查看。" class="headerlink" title="5.如果嫌以上操作麻烦，也可直接使用  jstack PID，打印出所有堆栈，进行查看。"></a>5.如果嫌以上操作麻烦，也可直接使用  jstack PID，打印出所有堆栈，进行查看。</h3><h2 id="二、辅助神器Arthas程序监控"><a href="#二、辅助神器Arthas程序监控" class="headerlink" title="二、辅助神器Arthas程序监控"></a>二、辅助神器Arthas程序监控</h2><p>本次不在说明，后出专题讲解，附上官方文档：</p><p><a href="https://arthas.aliyun.com/doc/" target="_blank" rel="noopener">Arthas传送门</a></p><h2 id="三、辅助Druid-SQL监控"><a href="#三、辅助Druid-SQL监控" class="headerlink" title="三、辅助Druid SQL监控"></a>三、辅助Druid SQL监控</h2><p>本次也不在说明，后出专题讲解，附一张图</p><p><img src="/2020/11/28/system-optimize/1-1-5.png" alt=""></p><h1 id="最终问题定位在"><a href="#最终问题定位在" class="headerlink" title="最终问题定位在"></a>最终问题定位在</h1><p><strong>堆内存占满，新创建对象时无法分配足够的内存，引起频繁GC</strong></p><p>1.程序频繁请求RPC接口得到的响应慢，耗时过大；<br>    解决方案：由于获取的数据实时性要求不高，改为缓存处理，避免实时请求。</p><p>2.客户端频繁请求某个接口，且接口中的sql效率非常低,导致了sql连接长时间被占用。<br>    解决方案：由于该接口历史遗留，且和对应的调用客户端同事确认该接口现今已用处不大，因此注释掉了该接口。</p><p>3.频繁收到回调，随开启了多线程处理但由于有线程锁，使得其他线程被block，实则依然是个单线程处理，消费速度赶不上生产速度，线程积压。<br>    解决方案：确保安全的情况下，关闭了线程锁。</p><p>4.代码逻辑不合理;<br>    解决方案：重新调整代码逻辑</p><p>5.对数据库操作过于频繁;<br>    解决方案：调整逻辑，优化sql（调整sql，加索引，避免全表扫描），尽量少操作数据库，多使用缓存对数据进行操作</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>经过此次排查，虽最终问题得以缓解，但深知系统内依然存在很多其他性能问题，暴露出对JVM知识的欠缺，以及Java代码、SQL功底需要持续加强。保证程序系统的稳定，健壮，高效。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 后端 </tag>
            
            <tag> 系统优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Installs</title>
      <link href="/2020/10/23/docker-installs/"/>
      <url>/2020/10/23/docker-installs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>docker 安装软件工具<br><a id="more"></a></p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><a href="http://tryto.top/2019/10/11/docker/" target="_blank" rel="noopener">docker准备工作传送门</a></p><h2 id="命令快捷"><a href="#命令快捷" class="headerlink" title="命令快捷"></a>命令快捷</h2><ul><li>查看镜像<pre><code># docker images | grep ?</code></pre></li><li>启动容器<pre><code># docker run -id --name=matrix_mysql -p 13306:3306 -e MYSQL_ROOT_PASSWORD=abc123 mysql</code></pre></li><li>进入容器<pre><code># docker exec -it 容器名/容器Id  /bin/bash</code></pre></li></ul><h2 id="安装Nexus3"><a href="#安装Nexus3" class="headerlink" title="安装Nexus3"></a>安装Nexus3</h2><h3 id="查询镜像"><a href="#查询镜像" class="headerlink" title="查询镜像"></a>查询镜像</h3><pre><code># docker search nexus</code></pre><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><pre><code># docker pull sonatype/nexus3</code></pre><h3 id="配置本地保存数据的路径"><a href="#配置本地保存数据的路径" class="headerlink" title="配置本地保存数据的路径"></a>配置本地保存数据的路径</h3><p>  路径可自定义,我放在/docker/nexus/nexus-data下。</p><p>  注意：在生成目录的时候，因为nexus的读写默认是200,docker run的时候会报找不到路径的错误</p><p><a href="https://www.cnblogs.com/badaoliumangqizhi/p/11565113.html" target="_blank" rel="noopener">可能遇到的问题:找不到路径错误</a></p><h3 id="修改目录权限"><a href="#修改目录权限" class="headerlink" title="修改目录权限"></a>修改目录权限</h3><pre><code># chmod 777 docker# chmod 777 nexus# chmod 777 nexus-data</code></pre><h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><pre><code># docker run -d -p 8081:8081 -p 8082:8082 -p 8083:8083 --name matrix_nexus3 -v /usr/etc/docker/nexus/nexus-data:/nexus-data sonatype/nexus3</code></pre><ul><li>8082<br>  客户端页面的对外端口;</li><li>8082<br>  准备建立docker hosted 私有库使用。hosted可以上传下载我建立的images;</li><li>8083<br>  准备建立docker proxy 代理库使用。 proxy可以镜像远程公共仓库，比如：docke官方仓库、aliyun等等;</li><li>daemon.json<br>  在/etc/docker/daemon.json这个文件夹中配置;</li></ul><p>daemon.json文件中的配置说明：</p><pre><code>{    "registry-mirrors": ["https://1v50e4uy.mirror.aliyuncs.com"],    ----文件加速地址，下载国外的镜像，通过它进行加速    "insecure-registries":["192.168.111.112:8083"]      ---配置本地的镜像库地址,每次拖取镜像,如果8083上没有，先从远程库下载，下载到8083，再下载到本地库，下次再下载的时候，就从8083上下载了。 }</code></pre><h3 id="登录-Nexus3"><a href="#登录-Nexus3" class="headerlink" title="登录 Nexus3"></a>登录 Nexus3</h3><p>1.登录链接：<a href="http://192.168.111.112:8081/" target="_blank" rel="noopener">http://192.168.111.112:8081/</a></p><p>2.默认用户名:admin  默认密码不再是admin123,所以需要去容器内查看</p><p>3.查看默认密码：进入容器内查看</p><pre><code># docker exec -it matrix_nexus3 /bin/bash# cd nexus-data/# vi admin.password  ---复制出密码,去网页登录</code></pre><p>4.登录完成后,默认提示修改新密码,新密码改完后,admin.password将会消失,所以要保管好密码</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 运维 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker,轻量级的虚拟化技术</title>
      <link href="/2020/10/23/docker/"/>
      <url>/2020/10/23/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><blockquote><p>一个利用了lxc的技术的一个虚拟化引擎。<br><a id="more"></a></p></blockquote><h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><h2 id="什么是虚拟化"><a href="#什么是虚拟化" class="headerlink" title="什么是虚拟化"></a>什么是虚拟化</h2><p>​    在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。</p><p>​    在实际的生产环境中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件   对资源充分利用</p><p>​    虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。</p><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p>​    Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 <a href="https://github.com/docker/docker" target="_blank" rel="noopener">GitHub</a> 上进行维护。</p><p>​    <img src="/2020/10/23/docker/1-3.png" alt=""></p><p>​    Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。</p><p>​    Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。</p><p>​    在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p><p>为什么选择Docker?</p><p>（1）上手快。</p><p>​    用户只需要几分钟，就可以把自己的程序“Docker化”。Docker依赖于“写时复制”（copy-on-write）模型，使修改应用程序也非常迅速，可以说达到“随心所致，代码即改”的境界。    </p><pre><code>     随后，就可以创建容器来运行应用程序了。大多数Docker容器只需要不到1秒中即可启动。由于去除了管理程序的开销，Docker容器拥有很高的性能，同时同一台宿主机中也可以运行更多的容器，使用户尽可能的充分利用系统资源。</code></pre><p>（2）职责的逻辑分类</p><p>​    使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。Docker设计的目的就是要加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。从而降低那种“开发时一切正常，肯定是运维的问题（测试环境都是正常的，上线后出了问题就归结为肯定是运维的问题）”</p><p>（3）快速高效的开发生命周期</p><p>​    Docker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性，易于构建，并易于协作。（通俗一点说，Docker就像一个盒子，里面可以装很多物件，如果需要这些物件的可以直接将该大盒子拿走，而不需要从该盒子中一件件的取。）</p><p>（4）鼓励使用面向服务的架构</p><p>​    Docker还鼓励面向服务的体系结构和微服务架构。Docker推荐单个容器只运行一个应用程序或进程，这样就形成了一个分布式的应用程序模型，在这种模型下，应用程序或者服务都可以表示为一系列内部互联的容器，从而使分布式部署应用程序，扩展或调试应用程序都变得非常简单，同时也提高了程序的内省性。（当然，可以在一个容器中运行多个应用程序）</p><h2 id="1-3-容器与虚拟机比较"><a href="#1-3-容器与虚拟机比较" class="headerlink" title="1.3 容器与虚拟机比较"></a>1.3 容器与虚拟机比较</h2><p>​    下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。</p><p><img src="/2020/10/23/docker/1-1.png" alt=""></p><p>与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。</p><h2 id="Docker-组件"><a href="#Docker-组件" class="headerlink" title="Docker 组件"></a>Docker 组件</h2><h3 id="Docker服务器与客户端"><a href="#Docker服务器与客户端" class="headerlink" title="Docker服务器与客户端"></a>Docker服务器与客户端</h3><p>​    Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。</p><p><img src="/2020/10/23/docker/1-2.png" alt=""></p><h3 id="Docker镜像与容器"><a href="#Docker镜像与容器" class="headerlink" title="Docker镜像与容器"></a>Docker镜像与容器</h3><p>​    镜像是构建Docker的基石。用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的“构建”部分。镜像是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。例如：</p><p>添加一个文件；</p><p>执行一个命令；</p><p>打开一个窗口。</p><p>也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。</p><p>​    Docker可以帮助你构建和部署容器，你只需要把自己的应用程序或者服务打包放进容器即可。容器是基于镜像启动起来的，容器中可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中的构建或者打包阶段，而容器则是启动或者执行阶段。  容器基于镜像启动，一旦容器启动完成后，我们就可以登录到容器中安装自己需要的软件或者服务。</p><p>所以Docker容器就是：</p><p>​    一个镜像格式；</p><p>​    一些列标准操作；</p><p>​    一个执行环境。</p><p>​    Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Docker将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而Docker运输软件。</p><pre><code>     和集装箱一样，Docker在执行上述操作时，并不关心容器中到底装了什么，它不管是web服务器，还是数据库，或者是应用程序服务器什么的。所有的容器都按照相同的方式将内容“装载”进去。     Docker也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到Registry，然后下载到一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker容器方便替换，可以叠加，易于分发，并且尽量通用。</code></pre><h3 id="Registry（注册中心）"><a href="#Registry（注册中心）" class="headerlink" title="Registry（注册中心）"></a>Registry（注册中心）</h3><p>​    Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营公共的Registry叫做Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像（说明：在Docker Hub下载镜像巨慢，可以自己构建私有的Registry）。</p><p>​    <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><h1 id="Docker安装与启动"><a href="#Docker安装与启动" class="headerlink" title="Docker安装与启动"></a>Docker安装与启动</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>​    Docker官方建议在Ubuntu中安装，因为Docker是基于Ubuntu发布的，而且一般Docker出现的问题Ubuntu是最先更新或者打补丁的。在很多版本的CentOS中是不支持更新最新的一些补丁包的。</p><p>​    由于我们学习的环境都使用的是CentOS，因此这里我们将Docker安装到CentOS上。注意：这里建议安装在CentOS7.x以上的版本，在CentOS6.x的版本中，安装前需要安装其他很多的环境而且Docker很多补丁不支持更新。</p><p>​    请直接挂载课程配套的Centos7.x镜像    </p><p>（1）yum 包更新到最新</p><pre><code>sudo yum update</code></pre><p>（2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><pre><code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</code></pre><p>（3）设置yum源为阿里云</p><pre><code>sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></pre><p>（4）安装docker</p><pre><code>sudo yum install docker-ce</code></pre><p>（5）安装后查看docker版本</p><pre><code>docker -v</code></pre><h2 id="设置ustc的镜像"><a href="#设置ustc的镜像" class="headerlink" title="设置ustc的镜像"></a>设置ustc的镜像</h2><p>ustc是老牌的linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。ustc的docker镜像加速器速度很快。ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。</p><p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker" target="_blank" rel="noopener">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</a></p><p>编辑该文件：</p><pre><code>vi /etc/docker/daemon.json  </code></pre><p>在该文件中输入如下内容：</p><pre><code>{"registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"]}</code></pre><h2 id="Docker的启动与停止"><a href="#Docker的启动与停止" class="headerlink" title="Docker的启动与停止"></a>Docker的启动与停止</h2><p><strong>systemctl</strong>命令是系统服务管理器指令</p><p>启动docker：</p><pre><code>systemctl start docker</code></pre><p>停止docker：</p><pre><code>systemctl stop docker</code></pre><p>重启docker：</p><pre><code>systemctl restart docker</code></pre><p>查看docker状态：</p><pre><code>systemctl status docker</code></pre><p>开机启动：</p><pre><code>systemctl enable docker</code></pre><p>查看docker概要信息</p><pre><code>docker info</code></pre><p>查看docker帮助文档</p><pre><code>docker --help</code></pre><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h2><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><pre><code>docker images</code></pre><p>REPOSITORY：镜像名称</p><p>TAG：镜像标签</p><p>IMAGE ID：镜像ID</p><p>CREATED：镜像的创建日期（不是获取该镜像的日期）</p><p>SIZE：镜像大小</p><p>这些镜像都是存储在Docker宿主机的/var/lib/docker目录下</p><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><p>如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</p><pre><code>docker search 镜像名称</code></pre><p>NAME：仓库名称</p><p>DESCRIPTION：镜像描述</p><p>STARS：用户评价，反应一个镜像的受欢迎程度</p><p>OFFICIAL：是否官方</p><p>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>拉取镜像就是从中央仓库中下载镜像到本地</p><pre><code>docker pull 镜像名称</code></pre><p>例如，我要下载centos7镜像</p><pre><code>docker pull centos:7</code></pre><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>按镜像ID删除镜像</p><pre><code>docker rmi 镜像ID</code></pre><p>删除所有镜像</p><pre><code>docker rmi `docker images -q`</code></pre><h2 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h2><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><p>查看正在运行的容器</p><pre><code>docker ps</code></pre><p>查看所有容器</p><pre><code>docker ps –a</code></pre><p>查看最后一次运行的容器</p><pre><code>docker ps –l</code></pre><p>查看停止的容器</p><pre><code>docker ps -f status=exited</code></pre><h3 id="创建与启动容器"><a href="#创建与启动容器" class="headerlink" title="创建与启动容器"></a>创建与启动容器</h3><p>创建容器常用的参数说明：</p><p>创建容器命令：docker run</p><p> -i：表示运行容器</p><p> -t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</p><p> –name :为创建的容器命名。</p><p> -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</p><p> -d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</p><p> -p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</p><p>（1）交互式方式创建容器</p><pre><code>docker run -it --name=容器名称 镜像名称:标签 /bin/bash</code></pre><p>这时我们通过ps命令查看，发现可以看到启动的容器，状态为启动状态  </p><p>退出当前容器</p><pre><code>exit</code></pre><p>（2）守护式方式创建容器：</p><pre><code>docker run -di --name=容器名称 镜像名称:标签</code></pre><p>登录守护式容器方式：</p><pre><code>docker exec -it 容器名称 (或者容器ID)  /bin/bash</code></pre><h3 id="停止与启动容器"><a href="#停止与启动容器" class="headerlink" title="停止与启动容器"></a>停止与启动容器</h3><p>停止容器：</p><pre><code>docker stop 容器名称（或者容器ID）</code></pre><p>启动容器：</p><pre><code>docker start 容器名称（或者容器ID）</code></pre><h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><p>如果我们需要将文件拷贝到容器内可以使用cp命令</p><pre><code>docker cp 需要拷贝的文件或目录 容器名称:容器目录</code></pre><p>也可以将文件从容器内拷贝出来</p><pre><code>docker cp 容器名称:容器目录 需要拷贝的文件或目录</code></pre><h3 id="目录挂载"><a href="#目录挂载" class="headerlink" title="目录挂载"></a>目录挂载</h3><p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。<br>创建容器 添加-v参数 后边为   宿主机目录:容器目录，例如：</p><pre><code>docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos3 centos:7</code></pre><p>如果你共享的是多级的目录，可能会出现权限不足的提示。</p><p>这是因为CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数  –privileged=true  来解决挂载的目录没有权限的问题</p><h3 id="查看容器IP地址"><a href="#查看容器IP地址" class="headerlink" title="查看容器IP地址"></a>查看容器IP地址</h3><p>我们可以通过以下命令查看容器运行的各种数据</p><pre><code>docker inspect 容器名称（容器ID） </code></pre><p>也可以直接执行下面的命令直接输出IP地址</p><pre><code>docker inspect --format='{{.NetworkSettings.IPAddress}}' 容器名称（容器ID）</code></pre><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>删除指定的容器：</p><pre><code>docker rm 容器名称（容器ID）</code></pre><h1 id="应用部署"><a href="#应用部署" class="headerlink" title="应用部署"></a>应用部署</h1><h2 id="MySQL部署"><a href="#MySQL部署" class="headerlink" title="MySQL部署"></a>MySQL部署</h2><p>（1）拉取mysql镜像</p><pre><code>docker pull centos/mysql-57-centos7</code></pre><p>（2）创建容器</p><pre><code>docker run -di --name=tensquare_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</code></pre><p>-p 代表端口映射，格式为  宿主机映射端口:容器运行端口</p><p>-e 代表添加环境变量  MYSQL_ROOT_PASSWORD  是root用户的登陆密码</p><p>（3）远程登录mysql</p><p>连接宿主机的IP  ,指定端口为33306 </p><h2 id="tomcat部署"><a href="#tomcat部署" class="headerlink" title="tomcat部署"></a>tomcat部署</h2><p>（1）拉取镜像</p><pre><code>docker pull tomcat:7-jre7</code></pre><p>（2）创建容器</p><p>创建容器  -p表示地址映射</p><pre><code>docker run -di --name=mytomcat -p 9000:8080 -v /usr/local/webapps:/usr/local/tomcat/webapps tomcat:7-jre7</code></pre><h2 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h2><p>（1）拉取镜像    </p><pre><code>docker pull nginx</code></pre><p>（2）创建Nginx容器</p><pre><code>docker run -di --name=mynginx -p 80:80 nginx</code></pre><h2 id="Redis部署"><a href="#Redis部署" class="headerlink" title="Redis部署"></a>Redis部署</h2><p>（1）拉取镜像</p><pre><code>docker pull redis</code></pre><p>（2）创建容器</p><pre><code>docker run -di --name=myredis -p 6379:6379 redis</code></pre><h1 id="迁移与备份"><a href="#迁移与备份" class="headerlink" title="迁移与备份"></a>迁移与备份</h1><h2 id="容器保存为镜像"><a href="#容器保存为镜像" class="headerlink" title="容器保存为镜像"></a>容器保存为镜像</h2><p>我们可以通过以下命令将容器保存为镜像</p><pre><code>docker commit mynginx mynginx_i</code></pre><h2 id="镜像备份"><a href="#镜像备份" class="headerlink" title="镜像备份"></a>镜像备份</h2><p>我们可以通过以下命令将镜像保存为tar 文件</p><pre><code>docker  save -o mynginx.tar mynginx_i</code></pre><h2 id="镜像恢复与迁移"><a href="#镜像恢复与迁移" class="headerlink" title="镜像恢复与迁移"></a>镜像恢复与迁移</h2><p>首先我们先删除掉mynginx_img镜像  然后执行此命令进行恢复</p><pre><code>docker load -i mynginx.tar</code></pre><p>-i 输入的文件</p><p>执行后再次查看镜像，可以看到镜像已经恢复</p><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><blockquote><p><a href="https://www.cnblogs.com/panwenbin-logs/p/8007348.html" target="_blank" rel="noopener">Dockerfile文件详解</a></p></blockquote><h2 id="什么是Dockerfile"><a href="#什么是Dockerfile" class="headerlink" title="什么是Dockerfile"></a>什么是Dockerfile</h2><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。</p><ul><li>对于开发人员：可以为开发团队提供一个完全一致的开发环境； </li><li>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了； </li><li>对于运维人员：在部署时，可以实现应用的无缝移植。</li></ul><h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>FROM image_name:tag</td><td>定义了使用哪个基础镜像启动构建流程</td></tr><tr><td>MAINTAINER user_name</td><td>声明镜像的创建者</td></tr><tr><td>ENV key value</td><td>设置环境变量 (可以写多条)</td></tr><tr><td>RUN command</td><td>是Dockerfile的核心部分(可以写多条)</td></tr><tr><td>ADD source_dir/file dest_dir/file</td><td>将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td></tr><tr><td>COPY source_dir/file dest_dir/file</td><td>和ADD相似，但是如果有压缩文件并不能解压</td></tr><tr><td>WORKDIR path_dir</td><td>设置工作目录</td></tr></tbody></table><h2 id="使用脚本创建镜像"><a href="#使用脚本创建镜像" class="headerlink" title="使用脚本创建镜像"></a>使用脚本创建镜像</h2><p>步骤：</p><p>（1）创建目录</p><pre><code>mkdir –p /usr/local/dockerjdk8</code></pre><p>（2）下载jdk-8u171-linux-x64.tar.gz并上传到服务器（虚拟机）中的/usr/local/dockerjdk8目录</p><p>（3）创建文件Dockerfile  <code>vi Dockerfile</code></p><pre><code>#依赖镜像名称和IDFROM centos:7#指定镜像创建者信息MAINTAINER ITCAST#切换工作目录WORKDIR /usrRUN mkdir  /usr/local/java#ADD 是相对路径jar,把java添加到容器中ADD jdk-8u171-linux-x64.tar.gz /usr/local/java/#配置java环境变量ENV JAVA_HOME /usr/local/java/jdk1.8.0_171ENV JRE_HOME $JAVA_HOME/jreENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATHENV PATH $JAVA_HOME/bin:$PATH</code></pre><p>（4）执行命令构建镜像</p><pre><code>docker build -t='jdk1.8' .</code></pre><p>注意后边的空格和点，不要省略</p><p>（5）查看镜像是否建立完成</p><pre><code>docker images</code></pre><h1 id="Docker私有仓库"><a href="#Docker私有仓库" class="headerlink" title="Docker私有仓库"></a>Docker私有仓库</h1><h2 id="私有仓库搭建与配置"><a href="#私有仓库搭建与配置" class="headerlink" title="私有仓库搭建与配置"></a>私有仓库搭建与配置</h2><p>（1）拉取私有仓库镜像（此步省略）</p><pre><code>docker pull registry</code></pre><p>（2）启动私有仓库容器</p><pre><code>docker run -di --name=registry -p 5000:5000 registry</code></pre><p>（3）打开浏览器 输入地址<a href="http://192.168.184.141:5000/v2/_catalog看到`{&quot;repositories&quot;:[]}`" target="_blank" rel="noopener">http://192.168.184.141:5000/v2/_catalog看到`{"repositories":[]}`</a> 表示私有仓库搭建成功并且内容为空</p><p>（4）修改daemon.json</p><pre><code>vi /etc/docker/daemon.json</code></pre><p>添加以下内容，保存退出。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"insecure-registries"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"192.168.184.141:5000"</span><span class="token punctuation">]</span><span class="token punctuation">}</span> </code></pre><p>此步用于让 docker信任私有仓库地址</p><p>（5）重启docker 服务</p><pre><code>systemctl restart docker</code></pre><h2 id="镜像上传至私有仓库"><a href="#镜像上传至私有仓库" class="headerlink" title="镜像上传至私有仓库"></a>镜像上传至私有仓库</h2><p>（1）标记此镜像为私有仓库的镜像</p><pre><code>docker tag jdk1.8 192.168.184.141:5000/jdk1.8</code></pre><p>（2）再次启动私服容器</p><pre><code>docker start registry</code></pre><p>（3）上传标记的镜像</p><pre><code>docker push 192.168.184.141:5000/jdk1.8</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 运维 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo操作手册</title>
      <link href="/2020/10/23/hexo-manual/"/>
      <url>/2020/10/23/hexo-manual/</url>
      
        <content type="html"><![CDATA[<blockquote><p>A fast, simple &amp; powerful blog framework</p></blockquote><a id="more"></a><h3 id="官方网站："><a href="#官方网站：" class="headerlink" title="官方网站："></a>官方网站：</h3><p><a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration</a></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)</p><pre><code>$ hexo clean</code></pre><p>生成静态文件</p><pre><code>$ hexo generate    -d, --deploy    文件生成后立即部署网站    -w, --watch    监视文件变动</code></pre><p>部署</p><pre><code>hexo d</code></pre><p>启动服务器。默认情况下,访问网址为: <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><pre><code>$ hexo server    -p, --port    重设端口    -s, --static    只使用静态文件    -l, --log    启动日记记录，使用覆盖记录格式</code></pre><p>发表草稿</p><pre><code>$ hexo publish [layout] &lt;filename&gt; </code></pre><p>显示草稿</p><pre><code>$ hexo --draft</code></pre><p>自定义 CWD（Current working directory）</p><pre><code>$ hexo --cwd /path/to/cwd</code></pre><p>创建文档</p><pre><code>hexo new [layout] &lt;title&gt;ex:    hexo new inner demo01    hexo new outer demo01    hexo new feeling demo01draft--&gt;publichexo publish [layout] &lt;title&gt;ex:    hexo new draft demo01    hexo publish inner &lt;title&gt;</code></pre><h3 id="页眉说明"><a href="#页眉说明" class="headerlink" title="页眉说明"></a>页眉说明</h3><pre><code>title: Hexo操作手册 //标题author: 571 //作者series: INNER //所属系列categories: INNER //所属类别comments: true //是否开启评论： true 开启img: /cover/abc.jpg  //封面图top: false //是否置顶 true 是cover: false //是否轮播 true 是tags:  //标签  - inner  - 手册date: 2020-05-14 21:58:38  //创建时间updated: 2020-05-14 21:58:38 //修改时间</code></pre><h3 id="创建文章文件"><a href="#创建文章文件" class="headerlink" title="创建文章文件"></a>创建文章文件</h3><pre><code>创建文件命名格式：小写、中杠隔开单词</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手册 </tag>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Installs</title>
      <link href="/2020/10/23/linux-installs/"/>
      <url>/2020/10/23/linux-installs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Linux 软件工具安装<br><a id="more"></a></p></blockquote><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><h3 id="通过yum方式安装Java"><a href="#通过yum方式安装Java" class="headerlink" title="通过yum方式安装Java"></a>通过yum方式安装Java</h3><h4 id="查看JDK是否已安装"><a href="#查看JDK是否已安装" class="headerlink" title="查看JDK是否已安装"></a>查看JDK是否已安装</h4><pre><code># yum list installed | grep java</code></pre><h4 id="若已经安装了JDK，如何卸载Java环境？"><a href="#若已经安装了JDK，如何卸载Java环境？" class="headerlink" title="若已经安装了JDK，如何卸载Java环境？"></a>若已经安装了JDK，如何卸载Java环境？</h4><ul><li>卸载JDK相关文件：<pre><code># yum -y remove java-1.7.0-openjdk*</code></pre>卸载tzdata-java：<pre><code># yum -y remove tzdata-java.noarch</code></pre>注：“*”表示卸载掉java 1.7.0的所有openjdk相关文件<h4 id="查看yum库中的Java安装包"><a href="#查看yum库中的Java安装包" class="headerlink" title="查看yum库中的Java安装包"></a>查看yum库中的Java安装包</h4><pre><code># yum -y list java*</code></pre><h4 id="安装Java安装包"><a href="#安装Java安装包" class="headerlink" title="安装Java安装包"></a>安装Java安装包</h4></li></ul><p>以yum库中java-1.8.0为例：</p><pre><code># yum -y install java-1.8.0-openjdk*</code></pre><p>注：“*”表示将java-1.8.0的所有相关Java程序都安装上</p><h4 id="查看刚刚安装版本"><a href="#查看刚刚安装版本" class="headerlink" title="查看刚刚安装版本"></a>查看刚刚安装版本</h4><pre><code># java -version</code></pre><h4 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h4><p>1.修改配置文件</p><pre><code># vim /etc/profile# export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk# export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar# export PATH=$PATH:$JAVA_HOME/bin</code></pre><p>2.生效修改</p><pre><code># source /etc/profile</code></pre><h3 id="通过压缩包安装Java"><a href="#通过压缩包安装Java" class="headerlink" title="通过压缩包安装Java"></a>通过压缩包安装Java</h3><p>####准备工作：</p><ul><li>jdk-8u11-linux-x64.tar.gz<br>下载地址：<a href="https://pan.baidu.com/s/1smNHABN" target="_blank" rel="noopener">https://pan.baidu.com/s/1smNHABN</a> (ps：也可在官网下载最新jdk:<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a>)</li><li>shell<br>在windows下载完成jdk后，通过shell发送到Linux上</li></ul><h4 id="登录Linux，切换到root用户"><a href="#登录Linux，切换到root用户" class="headerlink" title="登录Linux，切换到root用户"></a>登录Linux，切换到root用户</h4><pre><code># su root ---获取root用户权限，当前工作目录不变(需要root密码)</code></pre><p>或者</p><pre><code># sudo -i ---不需要root密码直接切换成root（需要当前用户密码）</code></pre><h4 id="在usr目录下建立Java安装目录"><a href="#在usr目录下建立Java安装目录" class="headerlink" title="在usr目录下建立Java安装目录"></a>在usr目录下建立Java安装目录</h4><pre><code># cd /usr/local/src/# mkdir java</code></pre><h4 id="解压jdk到当前目录-得到文件夹-jdk1-8-0-11"><a href="#解压jdk到当前目录-得到文件夹-jdk1-8-0-11" class="headerlink" title="解压jdk到当前目录,得到文件夹 jdk1.8.0_11"></a>解压jdk到当前目录,得到文件夹 jdk1.8.0_11</h4><pre><code># tar -zxvf jdk-8u11-linux-x64.tar.gz</code></pre><h4 id="解压完建立一个链接以节省目录长度"><a href="#解压完建立一个链接以节省目录长度" class="headerlink" title="解压完建立一个链接以节省目录长度"></a>解压完建立一个链接以节省目录长度</h4><pre><code># ln -s /usr/local/src/java/jdk1.8.0_11/ /usr/local/src/jdk</code></pre><h4 id="编辑配置文件，配置环境变量"><a href="#编辑配置文件，配置环境变量" class="headerlink" title="编辑配置文件，配置环境变量"></a>编辑配置文件，配置环境变量</h4><pre><code># vim /etc/profile</code></pre><p>在文末添加如下内容：</p><pre><code># JAVA_HOME=/usr/local/src/jdk# CLASSPATH=$JAVA_HOME/lib/# PATH=$PATH:$JAVA_HOME/bin# export PATH JAVA_HOME CLASSPATH</code></pre><h4 id="重启机器或执行命令"><a href="#重启机器或执行命令" class="headerlink" title="重启机器或执行命令"></a>重启机器或执行命令</h4><pre><code># sudo shutdown -r now</code></pre><h4 id="查看刚刚安装版本-1"><a href="#查看刚刚安装版本-1" class="headerlink" title="查看刚刚安装版本"></a>查看刚刚安装版本</h4><pre><code># java -version</code></pre><h2 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h2><h3 id="在线下载安装"><a href="#在线下载安装" class="headerlink" title="在线下载安装"></a>在线下载安装</h3><h4 id="安装wget命令"><a href="#安装wget命令" class="headerlink" title="安装wget命令"></a>安装wget命令</h4><pre><code># yum -y install wget</code></pre><h4 id="下载maven安装包"><a href="#下载maven安装包" class="headerlink" title="下载maven安装包"></a>下载maven安装包</h4><pre><code># cd /usr/local/src/# wget http://mirrors.cnnic.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz</code></pre><h4 id="解压maven安装包"><a href="#解压maven安装包" class="headerlink" title="解压maven安装包"></a>解压maven安装包</h4><pre><code># tar -zxvf apache-maven-3.5.4-bin.tar.gz</code></pre><h4 id="配置maven"><a href="#配置maven" class="headerlink" title="配置maven"></a>配置maven</h4><pre><code># vi /etc/profile</code></pre><p>在配置文件配置</p><pre><code># export MAVEN_HOME=/usr/local/src/apache-maven-3.5.4# export PATH=$MAVEN_HOME/bin:$PATH</code></pre><p>配置文件生效</p><pre><code># source /etc/profile</code></pre><h4 id="查看maven"><a href="#查看maven" class="headerlink" title="查看maven"></a>查看maven</h4><pre><code># mvn -version</code></pre><h3 id="安装包安装"><a href="#安装包安装" class="headerlink" title="安装包安装"></a>安装包安装</h3><p><img src="/2020/10/23/linux-installs/404.jpg" alt=""></p><p><a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">Maven下载地址</a></p><h2 id="安装Nexus3"><a href="#安装Nexus3" class="headerlink" title="安装Nexus3"></a>安装Nexus3</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>安装Java</li><li>安装Maven</li></ul><h3 id="在线下载安装-1"><a href="#在线下载安装-1" class="headerlink" title="在线下载安装"></a>在线下载安装</h3><p><a href="https://my.oschina.net/u/2963821/blog/1806035" target="_blank" rel="noopener">在线下载安装传送门</a></p><h3 id="安装包安装-1"><a href="#安装包安装-1" class="headerlink" title="安装包安装"></a>安装包安装</h3><p><img src="/2020/10/23/linux-installs/404.jpg" alt=""></p><p><a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="noopener">Nexus下载地址1</a><br><a href="https://help.sonatype.com/repomanager3/download/download-archives---repository-manager-3" target="_blank" rel="noopener">Nexus下载地址2</a></p><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><p>源码下载不动,无耐想到此法,推荐 <a href="http://tryto.top/2019/10/29/docker-installs/" target="_blank" rel="noopener">Docker安装传送门</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 后端 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
