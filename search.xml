<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习指南</title>
      <link href="/2021/01/12/study-guide/"/>
      <url>/2021/01/12/study-guide/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习本身比学习内容更重要<br><a id="more"></a></p></blockquote><p>任务式学习：<br>1.家庭<br>2.工作<br>3.成长</p><h3 id="一、寻找学习资源"><a href="#一、寻找学习资源" class="headerlink" title="一、寻找学习资源"></a>一、寻找学习资源</h3><h4 id="1-1-搜索"><a href="#1-1-搜索" class="headerlink" title="1.1 搜索"></a>1.1 搜索</h4><pre><code>网站、公众号</code></pre><h4 id="1-2-专业平台工具"><a href="#1-2-专业平台工具" class="headerlink" title="1.2 专业平台工具"></a>1.2 专业平台工具</h4><h4 id="1-3-跟人学"><a href="#1-3-跟人学" class="headerlink" title="1.3 跟人学"></a>1.3 跟人学</h4><p>​三级导师制：入门、进圈、拜佛</p><p>入门：第一级导师-任意干这行的人（询问牛人（关注他们，散射他们的关注）、书）<br>​进圈：机会<br>​拜佛：接触：好问题</p><p>好问题：</p><pre><code>1.请问在像您这样的专家心目中，您这个领域公认的大神是谁？2.我特别遗憾，我一直没有机会系统地去学，您这个领域的知识。我四十多岁了，想从现在开始学起，那在入门阶段，您推荐我读哪本书？3.老师，我想在大学毕业之后从事投资工作。您是做投资的，您觉得从事这一行业基本能力的要求是什么？我应该从哪开始作准备？4.老师，从事这个行业，您觉得最关键的环节有哪些？您都遇到过哪几个重要挑战？您是怎么过来的？5.在您这个领域，您觉得一般人和高手之间最大的区别是什么？6.如果您要带一个徒弟，您会重点教他关注哪几个魔鬼细节？为什么是这几个细节特别重要？7.老师，最近好长时间没见了，最近半年您觉得有什么问题、什么新闻或者哪本书，是对您触动特别大的吗？这个问题，是我自己很喜欢问的一个问题。首先，这个问题很轻，对方容易回答。但是在他的回答当中，我们又能收集到很多想法，收获很大。在闲谈的时候，最适合问这样的问题。8.最近你们行业发生了一件XXX大事，您能帮我分析分析，这背后到底是怎么回事吗？9.老师，我现在此时此刻已经在做一件什么事。这个事，我有个难点一直没想明白，能不能请您给我指点一下？10.假如，此刻是你生命的最后十分钟。你有个机会，可以给这个世界留下一段话，说说你自己这个专业。请问你会说什么？</code></pre><h3 id="二、定目标"><a href="#二、定目标" class="headerlink" title="二、定目标"></a>二、定目标</h3><h4 id="2-1-有场景："><a href="#2-1-有场景：" class="headerlink" title="2.1 有场景："></a>2.1 有场景：</h4><h4 id="2-2-有距离：目标和现状有差距，跳一跳才能够得着，"><a href="#2-2-有距离：目标和现状有差距，跳一跳才能够得着，" class="headerlink" title="2.2 有距离：目标和现状有差距，跳一跳才能够得着，"></a>2.2 有距离：目标和现状有差距，跳一跳才能够得着，</h4><h4 id="2-3-有抓手：距离得合适-具体可入手的地方"><a href="#2-3-有抓手：距离得合适-具体可入手的地方" class="headerlink" title="2.3 有抓手：距离得合适,具体可入手的地方"></a>2.3 有抓手：距离得合适,具体可入手的地方</h4><p>2.3.1 开始结束时间<br>​2.3.2 具体的执行动作<br>​2.3.3 执行动作的数量<br>​2.3.4 动作的完成度</p><h4 id="2-4-有阶梯：拒绝平均用力"><a href="#2-4-有阶梯：拒绝平均用力" class="headerlink" title="2.4 有阶梯：拒绝平均用力"></a>2.4 有阶梯：拒绝平均用力</h4><p>从易到难排序，先选最易的处理（小步子原理,先摘好摘的果子）</p><h3 id="三、提高效率"><a href="#三、提高效率" class="headerlink" title="三、提高效率"></a>三、提高效率</h3><h4 id="3-1-五阶学习法"><a href="#3-1-五阶学习法" class="headerlink" title="3.1 五阶学习法"></a>3.1 五阶学习法</h4><p>3.1.1 测试法（设计学习任务）<br>3.1.2 指读法<br>3.1.3 多环境输入法（看听）<br>3.1.4 记忆宫殿（抗遗忘）<br>3.1.5 刷书（不读细,读广,视野）<br>            序言，开头，倒数第二章<br>            居高临下关注（挑战，任务清单）</p><h3 id="四、输出倒逼输入"><a href="#四、输出倒逼输入" class="headerlink" title="四、输出倒逼输入"></a>四、输出倒逼输入</h3><h4 id="4-1-记笔记（两轮笔记法）"><a href="#4-1-记笔记（两轮笔记法）" class="headerlink" title="4.1 记笔记（两轮笔记法）"></a>4.1 记笔记（两轮笔记法）</h4><p>​ 1轮（手写）：实际输入的（关键词记录）  | 当时的想法感受（讯飞语记）<br>​ 2轮 重新用自己的逻辑写出来</p><h4 id="4-2-讲出来"><a href="#4-2-讲出来" class="headerlink" title="4.2 讲出来"></a>4.2 讲出来</h4><p> 10岁-具象能懂，抽象不懂</p><h4 id="4-3-迁移：触类旁通"><a href="#4-3-迁移：触类旁通" class="headerlink" title="4.3 迁移：触类旁通"></a>4.3 迁移：触类旁通</h4><p>​ 4.3.1 能用的场景<br>​ 4.3.2 不能用的场景</p><h4 id="4-4-夯实，拉出操作清单-：清单体（迭代清单1-0-gt-2-0-gt-3-0-gt-…）"><a href="#4-4-夯实，拉出操作清单-：清单体（迭代清单1-0-gt-2-0-gt-3-0-gt-…）" class="headerlink" title="4.4 夯实，拉出操作清单 ：清单体（迭代清单1.0->2.0->3.0-> …）"></a>4.4 夯实，拉出操作清单 ：清单体（迭代清单1.0-&gt;2.0-&gt;3.0-&gt; …）</h4><h3 id="五、正反馈（自驱力）-想方设法"><a href="#五、正反馈（自驱力）-想方设法" class="headerlink" title="五、正反馈（自驱力）-想方设法"></a>五、正反馈（自驱力）-想方设法</h3><p>5.1 记笔记，小本记<br>5.2 公开平台，定期发表自己的成果<br>5.3 环境场（结界）<br>5.4 惊奇日记（每日一句话）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式</title>
      <link href="/2021/01/05/design-pattern/"/>
      <url>/2021/01/05/design-pattern/</url>
      
        <content type="html"><![CDATA[<blockquote><p>概述：<br> 本质：面向对象设计原则的实际运用，是对类的封装、继承和多态性以及类的关联关系和组合关系的充分理解。<br> 分类:</p><pre><code>1. 创建型模式：共5种，用于描述“怎样创建对象”，主要特点是“将对象的创建与使用分离”(解耦)。客户程序仅仅需要去使用对象，而不再关心创建对象过程中的逻辑。2. 结构型模式：共7种，用于描述如何将类或对象按某种布局组成更大的结构。3. 行为型模式：共11种，用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。</code></pre></blockquote><a id="more"></a><h2 id="一、6大设计原则"><a href="#一、6大设计原则" class="headerlink" title="一、6大设计原则"></a>一、6大设计原则</h2><h3 id="1-单一职责原则-SRP"><a href="#1-单一职责原则-SRP" class="headerlink" title="1. 单一职责原则 (SRP)"></a>1. 单一职责原则 (<strong>SRP</strong>)</h3><p><strong>英文</strong>：Single Responsibility Principle</p><p><strong>定义</strong>：<a href="">有且仅有一个原因引起类的变更</a></p><p><strong>优点</strong>：</p><p>​    1.类的复杂性降低</p><p>​    2.可读性提高</p><p>​    3.可维护性提高</p><p>​    4.变更引起的风险降低</p><p><strong>难点</strong>：职责界限的划分</p><p><strong>适用范围</strong>：接口(一定)、类(尽量)、方法(尽可能)</p><hr><h3 id="2-里式替换原则-LSP"><a href="#2-里式替换原则-LSP" class="headerlink" title="2. 里式替换原则 (LSP)"></a>2. 里式替换原则 (<strong>LSP</strong>)</h3><p><strong>英文</strong>：Liskov Substitution Principle </p><p><strong>定义</strong>：</p><p>​    定义1：如果对每一个类型为S的对象o1,都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换成o2时,程序P的行为没有发生变化，那么类型S是类型T的子类型。</p><p>​    定义2：所有引用基类的地方必须能透明地使用其子类的对象。</p><p>​    通俗解释：<a href=""><strong>父类出现的地方,子类能完美替换父类,且不会产生任何错误和异常;反之,子类出现的地方,父类未必能适应。</strong></a></p><p><strong>定义拆解</strong>：</p><p>​    4层含义：</p><p>​            1.子类必须完全实现父类的方法</p><p>​            2.子类可以有自己的个性</p><p>​            3.[契约设计]覆盖或实现父类的方法时输入参数，要么一样（覆写），要么可以被放大（重载）</p><p>​            4.覆写或实现父类的方法时输出结果（返回类型）可以被缩小</p><p><strong>优点</strong>：增强程序的健壮性</p><p><strong>应用</strong>：版本升级(待实践)</p><p><strong>最佳实践</strong>：在项目中,采用LSP时，尽量避免子类的“个性”，一旦子类有“个性”，这个子类和父类之间的关系就很难调和了，把子类当做父类使用，子类的“个性”被抹杀–委屈了点；把子类单独作为一个业务来使用，则会让代码间的耦合关系变的扑朔迷离–缺乏替换的标准。</p><hr><h3 id="3-依赖导致原则-DIP"><a href="#3-依赖导致原则-DIP" class="headerlink" title="3. 依赖导致原则 (DIP)"></a>3. 依赖导致原则 (<strong>DIP</strong>)</h3><p><strong>英文</strong>：Dependence Inversion Principle </p><p><strong>定义</strong>：High level modules should not depend upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.</p><p><strong>定义拆解</strong>：</p><p>​    1.高层模块不应该依赖底层模块，两者都应该依赖其抽象</p><p>​    2.抽象不应该依赖细节，细节应该依赖抽象</p><p><strong>优点</strong>：减少类间的耦合性，提高系统的稳定性，降低并行开发引起的风险，提高代码的可读性和可维护性。</p><p><strong>依赖三种写法</strong>：</p><p>​    1.构造函数传递依赖对象</p><p>​    2.Setter方法传递依赖对象</p><p>​    3.接口声明依赖对象</p><p><strong>本质</strong>：</p><p>​    遵循规则：</p><p>​            1.基本要求：通过抽象(接口或抽象类),使各类或模块的实现彼此独立,不相相互影响,实现模块间的松耦合。</p><p>​            2.变量的表面类型尽量是接口或者是抽象类：一个变量可以有两种类型：表面类型和实际类型，表面类型是在定义的时候赋予的类型，实际类型是对象的类型。</p><p>​            3.任何类都不应该从具体类派生</p><p>​            4.尽量不要覆写基类的方法</p><p>​            5.结合里氏替换原则使用</p><p>​    核心：<a href="">“面向接口编程”</a></p><hr><h3 id="4-接口隔离原则-ISP"><a href="#4-接口隔离原则-ISP" class="headerlink" title="4. 接口隔离原则 (ISP)"></a>4. 接口隔离原则 (<strong>ISP</strong>)</h3><p><strong>英文</strong>: Interface Segregation Principle </p><p><strong>定义</strong>：</p><p>​    定义1：客户端不应该依赖它不需要的接口</p><p>​    定义2：类间的依赖关系应该建立在最小的接口上</p><p>​    通俗解释：<a href="">建立单一接口，不要臃肿肥大的接口。接口尽量细化，接口中的方法尽量少。</a></p><p><strong>区分</strong>：单一职责原则(SRP) 和 接口隔离原则(ISP)的区别，SRP强调单一职责，要求类和职责单一，注重职责，这是逻辑业务上划分，而ISP要求接口的方法尽量少。</p><p><strong>规范拆解</strong>：</p><p>​    1.接口尽量小：“小”有限度，必须 满足单一职责  (SRP)</p><p>​    2.接口要高内聚：高内聚就是提高接口、类、模块的处理能力，减少对外的交互。接口中尽量少公布public方法，接口的对外的承诺越少对系统的开发越有利，变更的风险就越少，同时也有利于降低成本。</p><p>​    3.定制服务：单独为一个个体体用优良的服务。只提供访问者需要的方法。</p><p>​    4.接口设计是由限度的:接口设计粒度越小越灵活，灵活带来了接口复杂化，开发难度增加，可维护性降低。把握好“度”。</p><hr><h3 id="5-迪米特法则（LKP-LoD）"><a href="#5-迪米特法则（LKP-LoD）" class="headerlink" title="5. 迪米特法则（LKP/LoD）"></a>5. 迪米特法则（<strong>LKP</strong>/LoD）</h3><p><strong>英文</strong>：Law of Demeter 也称 Least Knowledge Principle</p><p>关键词：高内聚、低耦合</p><p><strong>定义</strong>：一个对象应该对其他对象有最少的了解。</p><p>​    通俗解释：<a href="">一个类应该对自己需要耦合或者调用的类知道得越少(即解耦、弱耦)</a></p><p><strong>定义拆解</strong>：</p><p>​    4层含义：</p><p>​        1.只与直接的朋友通信 ，朋友类：出现在成员变量、方法的输入输出参数中的类称为成员朋友类，而出现在方法体内部的类不属于朋友类</p><p>​        2.朋友间是有距离的：尽量不要对外公布太多的public方法和非静态的public变量，尽量内敛，多使用private、package-private、protect等访问权限</p><p>​        3.是自己的就是自己的：如果一个方法放在本类中，即不增加类间关系，也对本类不产生负面影响，那就放置在本类中。</p><p>​        4.谨慎使用Serializable</p><p>最佳实践：一个类跳转两次以上才能访问到另一个类，就需要想办法进行重构</p><hr><h3 id="6-开闭原则（OCP）"><a href="#6-开闭原则（OCP）" class="headerlink" title="6. 开闭原则（OCP）"></a>6. 开闭原则（OCP）</h3><p>英文：Open Closed Principle</p><p>定义：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭</p><hr><h2 id="二、23种设计模式（5）"><a href="#二、23种设计模式（5）" class="headerlink" title="二、23种设计模式（5）"></a>二、23种设计模式（5）</h2><h3 id="1-创建型模式"><a href="#1-创建型模式" class="headerlink" title="1. 创建型模式"></a>1. 创建型模式</h3><h4 id="1-1-简单工厂模式（SFP）"><a href="#1-1-简单工厂模式（SFP）" class="headerlink" title="1.1. 简单工厂模式（SFP）"></a>1.1. 简单工厂模式（SFP）</h4><p><strong>英文：</strong>Simple Factory Pattern</p><p><strong>定义：</strong>由一个工厂对象决定创建出哪一种类型实例。客户端只需传入工厂类的参数，无需关心创建过程。</p><p><strong>优点：</strong>具体产品从客户端代码中抽离出来，解耦。</p><p><strong>缺点：</strong>工厂类职责过重，增加新的类型时，得修改工厂类的代码，违背OCP。</p><p><strong>最佳实践：</strong>严格意义来说，SFP不属于设计模式的一种</p><p><strong>举例</strong>：简单工厂模式-糖果生产</p><ol><li>创建糖果抽象类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Candy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建抽象糖果实现类-巧克力等</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chocolate</span> <span class="token keyword">extends</span> <span class="token class-name">Candy</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat chocolate ing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>创建糖果工厂类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CandyFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Candy <span class="token function">product</span><span class="token punctuation">(</span>String candyName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"chocolate"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>candyName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Chocolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SfpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CandyFactory candyFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CandyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Candy chocolate <span class="token operator">=</span> candyFactory<span class="token punctuation">.</span><span class="token function">product</span><span class="token punctuation">(</span><span class="token string">"chocolate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chocolate<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>输出</li></ol><pre class=" language-java"><code class="language-java">eat chocolate ing<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><hr><h4 id="1-2-工厂方法模式（FMP）"><a href="#1-2-工厂方法模式（FMP）" class="headerlink" title="1.2. 工厂方法模式（FMP）"></a>1.2. 工厂方法模式（FMP）</h4><p><strong>英文：</strong>Factory Method Pattern</p><p><strong>定义：</strong>定义创建对象的接口，让实现这个接口的类来决定实例化哪个类，工厂方法让类的实例化推迟到子类进行。</p><p><strong>优点：</strong></p><ol><li><p>具体产品从客户端代码中抽离出来，实现了解耦。</p></li><li><p>加入新的类型时，只需添加新的工厂方法（无需修改旧的工厂方法代码），符合OCP。</p></li></ol><p><strong>缺点：</strong>类的个数容易过多，增加复杂度。</p><p><strong>最佳实践：</strong></p><p><strong>举例</strong>：</p><ol><li>创建糖果抽象类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Candy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建抽象工厂类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CandyFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Candy <span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>创建抽象糖果实现类-玉米软糖等</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CornFudge</span> <span class="token keyword">extends</span> <span class="token class-name">Candy</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat corn fudge ing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>创建抽象工厂实现类-玉米软糖工厂等</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CornFudgeFactory</span> <span class="token keyword">extends</span> <span class="token class-name">CandyFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Candy <span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CornFudge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FmpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CornFudgeFactory cornFudgeFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CornFudgeFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Candy cornFudge <span class="token operator">=</span> cornFudgeFactory<span class="token punctuation">.</span><span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cornFudge<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>6.输出</p><pre class=" language-java"><code class="language-java">eat corn fudge ing<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><hr><h4 id="1-3-抽象工厂模式（AFP）"><a href="#1-3-抽象工厂模式（AFP）" class="headerlink" title="1.3. 抽象工厂模式（AFP）"></a>1.3. 抽象工厂模式（AFP）</h4><p><strong>英文：</strong>Abstract Factory Pattern</p><p><strong>定义：</strong>提供了<strong>一系列</strong>相关或者相互依赖的对象的接口</p><p><strong>优点：</strong></p><ol><li>具体产品从客户端代码中抽离出来，实现解耦。</li><li>将一个系列的产品族统一到一起创建</li></ol><p><strong>缺点：</strong>拓展新的功能困难，需要修改抽象工厂的接口</p><p><strong>最佳实践：</strong></p><p><strong>举例</strong>：</p><ol><li>创建抽象糖果类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Candy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建抽象价格类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Price</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>创建抽象工厂接口</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CandyFactory</span> <span class="token punctuation">{</span>    Candy <span class="token function">getCandy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Price <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>实现抽象工厂接口-棒棒糖工厂</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LollipopFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CandyFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Candy <span class="token function">getCandy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Lollipop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Price <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LollipopPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>创建产品族</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lollipop</span> <span class="token keyword">extends</span> <span class="token class-name">Candy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat lollipop ing..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"buy lollipop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LollipopPrice</span> <span class="token keyword">extends</span> <span class="token class-name">Price</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lollipop sell $2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="6"><li>测试</li></ol><pre><code>public class afpTest {    public static void main(String[] args) {        LollipopFactory lollipopFactory = new LollipopFactory();        lollipopFactory.getPrice().pay();        lollipopFactory.getCandy().buy();        lollipopFactory.getCandy().eat();    }}</code></pre><ol start="7"><li>输出</li></ol><pre><code>lollipop sell $2buy lollipopeat lollipop ing...</code></pre><hr><h4 id="1-4-建造者模式（BP）"><a href="#1-4-建造者模式（BP）" class="headerlink" title="1.4. 建造者模式（BP）"></a>1.4. 建造者模式（BP）</h4><p><strong>英文：</strong>Builder Pattern</p><p><strong>定义：</strong>也称为生成器模式，将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。简单来说就是，相同的过程可以创建不同的产品。</p><p><strong>优点：</strong></p><ol><li>封装性好，创建和使用分离</li><li>拓展性好，建造类之间独立，一定程度上解耦。</li></ol><p><strong>缺点：</strong></p><ol><li>产生多余的Builder对象；</li><li>产品内部发生变化，建造者需要更改，成本较大。</li></ol><p><strong>最佳实践：</strong></p><ol><li>一个对象有非常复杂的内部结构（很多属性）</li><li>想将复杂对象的创建和使用分离。</li></ol><p><strong>举例</strong>：</p><ol><li>创建商铺类Store(包含多属性)</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String location<span class="token punctuation">;</span>    <span class="token keyword">private</span> String type<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Store{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", location='"</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", type='"</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> location<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLocation</span><span class="token punctuation">(</span>String location<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>location <span class="token operator">=</span> location<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setType</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建商铺抽象生成器 StoreBuilder（包含和Store相同的属性及对应的抽象构造方法）</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">StoreBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String location<span class="token punctuation">;</span>    <span class="token keyword">private</span> String type<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">location</span><span class="token punctuation">(</span>String location<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">type</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Store <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>创建商铺抽象生成器的实现，糖果铺构造器CandyStoreBuilder</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CandyStoreBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">StoreBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Store store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">location</span><span class="token punctuation">(</span>String location<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">type</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Store <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> store<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>创建经销商类Dealer,用于通过StoreBuilder构建具体的商铺</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dealer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> StoreBuilder storeBuilder<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStoreBuilder</span><span class="token punctuation">(</span>StoreBuilder storeBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>storeBuilder <span class="token operator">=</span> storeBuilder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Store <span class="token function">build</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String location<span class="token punctuation">,</span> String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>storeBuilder<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>storeBuilder<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>storeBuilder<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> storeBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dealer dealer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dealer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dealer<span class="token punctuation">.</span><span class="token function">setStoreBuilder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CandyStoreBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Store store <span class="token operator">=</span> dealer<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">"甜蜜蜜糖果店"</span><span class="token punctuation">,</span> <span class="token string">"上海市陆家嘴77号"</span><span class="token punctuation">,</span> <span class="token string">"糖果经销"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="6"><li>输出</li></ol><pre class=" language-java"><code class="language-java">Store<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'甜蜜蜜糖果店'</span><span class="token punctuation">,</span> location<span class="token operator">=</span><span class="token string">'上海市陆家嘴77号'</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">'糖果经销'</span><span class="token punctuation">}</span></code></pre><hr><h4 id="1-5-单例模式-SP"><a href="#1-5-单例模式-SP" class="headerlink" title="1.5. 单例模式 (SP)"></a>1.5. 单例模式 (SP)</h4><p><strong>英文：</strong>Singleton Pattern</p><p><strong>定义：</strong>一个类只有一个实例</p><p><strong>优点：</strong></p><ol><li><p>内存中只有一个实例，减少了内存开销；</p></li><li><p>避免对资源的多重占用；</p></li></ol><p><strong>缺点：</strong>没有接口，拓展困难。</p><p><strong>最佳实践：</strong></p><table><thead><tr><th>模式</th><th>描述</th><th>方式</th><th>优点</th><th>缺点</th><th>是否推荐</th></tr></thead><tbody><tr><td>饿汉模式</td><td>不管需不需要用到实例都要去创建实例</td><td>-</td><td>线程安全</td><td>不管用到与否,类加载到内存后，就实例化一个单例</td><td>有缺点,简单实用,推荐使用</td></tr><tr><td>懒汉模式</td><td>需要用到创建实例了程序再去创建实例</td><td>方式一：锁,双重判空方式</td><td>1.线程安全 <br>2.用的时候,再实例化</td><td>降低程序效率(判空+锁)</td><td>不推荐</td></tr><tr><td></td><td></td><td>方式二：静态内部类方式</td><td>1.线程安全(JVM保证单例)  <br>2.加载外部类不会加载内部类,实现了懒加载</td><td>-</td><td>完美写法,推荐</td></tr><tr><td>枚举模式</td><td>-</td><td>-</td><td>1. 解决线程同步<br>2. 防止反序列化<br>原因：由于枚举没有构造方法，不会被反射<br>反射原理：类的class文件加载到内存,反射（反序列化的方式）new一个实例（前提要有构造方法）</td><td>-</td><td>完美中的完美,推荐</td></tr></tbody></table><p><strong>举例</strong>：</p><ol><li><p>饿汉模式、懒汉模式、单例模式</p><p>1.1. 饿汉模式</p><p>方式一：间接声明-静态代码块new</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHunger01</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方式一 ：间接声明-静态代码块new</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> SingletonHunger01 INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonHunger01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//构造方法设为私有,使得其他类不能new</span>    <span class="token keyword">private</span> <span class="token function">SingletonHunger01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonHunger01 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    方式二：直接声明-直接new</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHunger02</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方式二：直接声明-直接new</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> SingletonHunger02 INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonHunger02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造方法设为私有,使得其他类不能new</span>    <span class="token keyword">private</span> <span class="token function">SingletonHunger02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonHunger02 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    1.2. 懒汉模式</p><p>​    方式一：锁,双重判空方式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLazy01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonLazy01 INSTANCE <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造方法设为私有,使得其他类不能new</span>    <span class="token keyword">private</span> <span class="token function">SingletonLazy01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonLazy01 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//降低每次进来都需要判断锁</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SingletonLazy01<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>INSTANCE <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLazy01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    方式二：静态内部类方式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLazy02</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">SingletonLazy02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态内部类</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticInner</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> SingletonLazy02 INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLazy02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonLazy02 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> StaticInner<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    1.3. 枚举单例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> SingletonEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//单例枚举</span>    INSTANCE<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HASHCODE-hash码,同一个类中的hash码不会相同,不同类的hashcode不能保证相同"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"饿汉模式-间接声明方式-"</span><span class="token operator">+</span>SingletonHunger01<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"饿汉模式-直接声明方式-"</span><span class="token operator">+</span>SingletonHunger02<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉模式-锁,双重判空方式-"</span><span class="token operator">+</span>SingletonLazy01<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉模式-静态内部类方式-"</span><span class="token operator">+</span>SingletonLazy02<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单例模式-"</span><span class="token operator">+</span>SingletonEnum<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>输出</li></ol><pre class=" language-java"><code class="language-java">HASHCODE<span class="token operator">-</span>hash码<span class="token punctuation">,</span>同一个类中的hash码不会相同<span class="token punctuation">,</span>不同类的hashcode不能保证相同饿汉模式<span class="token operator">-</span>间接声明方式<span class="token operator">-</span><span class="token number">1856056345</span>饿汉模式<span class="token operator">-</span>直接声明方式<span class="token operator">-</span><span class="token number">221036634</span>懒汉模式<span class="token operator">-</span>锁<span class="token punctuation">,</span>双重判空方式<span class="token operator">-</span><span class="token number">1418370913</span>懒汉模式<span class="token operator">-</span>静态内部类方式<span class="token operator">-</span><span class="token number">707610042</span>单例模式<span class="token operator">-</span><span class="token number">551734240</span></code></pre><hr><h4 id="1-6-原型模式（PP）"><a href="#1-6-原型模式（PP）" class="headerlink" title="1.6. 原型模式（PP）"></a>1.6. 原型模式（PP）</h4><p><strong>英文：</strong>Prototype Pattern</p><p><strong>定义：</strong>用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象</p><p><strong>优点：</strong></p><ol><li><p>原型模式是在内存中二进制流的拷贝，要比new一个对象的性能要好，特别是需要产生大量对象时。</p></li><li><p>简化创建对象过程。</p></li></ol><p><strong>缺点：</strong></p><ol><li>对象必须重写Object克隆方法；</li><li>直接在内存中拷贝，构造函数是不会执行</li><li>复杂对象的克隆方法写起来较麻烦（浅克隆、深克隆）</li><li>克隆会破坏实现了Cloneable接口的单例对象</li></ol><p><strong>最佳实践：</strong></p><ol><li>如果类的初始化需要耗费较多的资源，那么可以通过原型拷贝避免这些消耗。</li><li>通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。</li><li>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以拷贝多个对象供调用者使用，即保护性拷贝。</li></ol><p><strong>拓展：</strong></p><table><thead><tr><th>克隆分类</th><th>实现</th></tr></thead><tbody><tr><td>浅克隆</td><td>只复制基本类型的数据，引用类型的数据只复制了引用的地址，引用的对象并没有复制，在新的对象中修改引用类型的数据会影响原对象中的引用。</td></tr><tr><td>深克隆</td><td><strong>方式一：嵌套重写clone方法</strong>：实现<strong>Cloneable</strong>接口（引用数据类型也要实现Cloneable接口），重写clone方法，<strong>clone的嵌套</strong>，复制后的对象与原对象之间完全不会影响。<br><strong>方式二：序列化对象</strong>：实现序列化<strong>Serializable</strong>接口（不实现<strong>Cloneable</strong>接口），（引用数据类型也要实现Serializable），对象序列化后写入流中，此时不存在引用数据类型的概念，从流中读取，生成新的对象，新对象和原对象之间也是完全互不影响的。</td></tr></tbody></table><p><strong>举例</strong>：</p><p>1.1. 浅克隆（简单属性）：创建对象，实现Cloneable，重写clone方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CandyShallow</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String color<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//浅克隆</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"CandyShallow{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", color='"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>1.2. 测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        CandyShallow candyShallow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CandyShallow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>CandyShallow<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            CandyShallow clone <span class="token operator">=</span> <span class="token punctuation">(</span>CandyShallow<span class="token punctuation">)</span>candyShallow<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            clone<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"ALPENLIEBE"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            clone<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>clone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>1.3. 输出</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>Candy<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'ALPENLIEBE0'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'color0'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Candy<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'ALPENLIEBE1'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'color1'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Candy<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'ALPENLIEBE2'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'color2'</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>2.1. 方式一：实现Cloneable,嵌套重写clone方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CandyDeep</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String color<span class="token punctuation">;</span>    <span class="token keyword">private</span> Stuffing stuffing<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//--------------------------------------重点↓</span>    <span class="token comment" spellcheck="true">/**     * 方式一：重写clone方法，实现深拷贝     * 注：该方式的缺陷是需要单独处理所有要克隆的类中的引用数据类型(Stuffing)     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        CandyDeep candyDeep <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            candyDeep <span class="token operator">=</span> <span class="token punctuation">(</span>CandyDeep<span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            candyDeep<span class="token punctuation">.</span>stuffing <span class="token operator">=</span> <span class="token punctuation">(</span>Stuffing<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>stuffing<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> candyDeep<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//--------------------------------------重点↑</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"CandyDeep{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", color='"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", stuffing="</span> <span class="token operator">+</span> stuffing <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CandyDeep</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String color<span class="token punctuation">,</span> Stuffing stuffing<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stuffing <span class="token operator">=</span> stuffing<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Stuffing <span class="token function">getStuffing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> stuffing<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStuffing</span><span class="token punctuation">(</span>Stuffing stuffing<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stuffing <span class="token operator">=</span> stuffing<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stuffing</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String body<span class="token punctuation">;</span>    <span class="token keyword">private</span> String form<span class="token punctuation">;</span>    <span class="token keyword">private</span> String color<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//--------------------------------------重点↓</span>    <span class="token comment" spellcheck="true">//无引用数据类型,浅克隆即可</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//--------------------------------------重点↑</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Stuffing{"</span> <span class="token operator">+</span>                <span class="token string">"body='"</span> <span class="token operator">+</span> body <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", form='"</span> <span class="token operator">+</span> form <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", color='"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Stuffing</span><span class="token punctuation">(</span>String body<span class="token punctuation">,</span> String form<span class="token punctuation">,</span> String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>form <span class="token operator">=</span> form<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> body<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBody</span><span class="token punctuation">(</span>String body<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> form<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setForm</span><span class="token punctuation">(</span>String form<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>form <span class="token operator">=</span> form<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.2. 方式二（推荐）：序列化对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CandyDeep2</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String color<span class="token punctuation">;</span>    <span class="token keyword">private</span> Stuffing2 stuffing2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//--------------------------------------重点↓</span>    <span class="token keyword">public</span> CandyDeep2 <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ByteArrayOutputStream bos <span class="token operator">=</span> null<span class="token punctuation">;</span>        ObjectOutputStream oos <span class="token operator">=</span> null<span class="token punctuation">;</span>        ByteArrayInputStream bis <span class="token operator">=</span> null<span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建序列化流</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将当前对象以对象流的方式输出</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建反序列化流</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将流对象反序列化,从而实现类的深拷贝</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>CandyDeep2<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> ClassNotFoundException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//资源释放</span>                bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//--------------------------------------重点↑</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"CandyDeep2{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", color='"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", stuffing2="</span> <span class="token operator">+</span> stuffing2 <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CandyDeep2</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String color<span class="token punctuation">,</span> Stuffing2 stuffing2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stuffing2 <span class="token operator">=</span> stuffing2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Stuffing2 <span class="token function">getStuffing2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> stuffing2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStuffing2</span><span class="token punctuation">(</span>Stuffing2 stuffing2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stuffing2 <span class="token operator">=</span> stuffing2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stuffing2</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String body<span class="token punctuation">;</span>    <span class="token keyword">private</span> String form<span class="token punctuation">;</span>    <span class="token keyword">private</span> String color<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Stuffing2{"</span> <span class="token operator">+</span>                <span class="token string">"body='"</span> <span class="token operator">+</span> body <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", form='"</span> <span class="token operator">+</span> form <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", color='"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Stuffing2</span><span class="token punctuation">(</span>String body<span class="token punctuation">,</span> String form<span class="token punctuation">,</span> String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>form <span class="token operator">=</span> form<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> body<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBody</span><span class="token punctuation">(</span>String body<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> form<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setForm</span><span class="token punctuation">(</span>String form<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>form <span class="token operator">=</span> form<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.3. 测试</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"深克隆,方式一:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CandyDeep candyDeep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CandyDeep</span><span class="token punctuation">(</span><span class="token string">"黑色"</span><span class="token punctuation">,</span><span class="token string">"酒心巧克力"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Stuffing</span><span class="token punctuation">(</span><span class="token string">"酒饮料"</span><span class="token punctuation">,</span><span class="token string">"液体"</span><span class="token punctuation">,</span><span class="token string">"无色"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>candyDeep<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//candyDeep 和 cloneCandy 非同一个对象</span>        CandyDeep cloneCandy <span class="token operator">=</span> <span class="token punctuation">(</span>CandyDeep<span class="token punctuation">)</span> candyDeep<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cloneCandy<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"+++++++++++++++++++华丽的分界线++++++++++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"深克隆,方式二:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CandyDeep2 candyDeep2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CandyDeep2</span><span class="token punctuation">(</span><span class="token string">"白色"</span><span class="token punctuation">,</span><span class="token string">"果仁巧克力"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Stuffing2</span><span class="token punctuation">(</span><span class="token string">"果仁"</span><span class="token punctuation">,</span><span class="token string">"固体"</span><span class="token punctuation">,</span><span class="token string">"棕色"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>candyDeep2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//candyDeep2 和 cloneCandy2 非同一个对象</span>        CandyDeep2 cloneCandy2 <span class="token operator">=</span> candyDeep2<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cloneCandy2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>2.4. 输出</p><pre class=" language-java"><code class="language-java">深克隆<span class="token punctuation">,</span>方式一<span class="token operator">:</span>CandyDeep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'黑色'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'酒心巧克力'</span><span class="token punctuation">,</span> stuffing<span class="token operator">=</span>Stuffing<span class="token punctuation">{</span>body<span class="token operator">=</span><span class="token string">'酒饮料'</span><span class="token punctuation">,</span> form<span class="token operator">=</span><span class="token string">'液体'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'无色'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>CandyDeep<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'黑色'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'酒心巧克力'</span><span class="token punctuation">,</span> stuffing<span class="token operator">=</span>Stuffing<span class="token punctuation">{</span>body<span class="token operator">=</span><span class="token string">'酒饮料'</span><span class="token punctuation">,</span> form<span class="token operator">=</span><span class="token string">'液体'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'无色'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">+</span>华丽的分界线<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>深克隆<span class="token punctuation">,</span>方式二<span class="token operator">:</span>CandyDeep2<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'白色'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'果仁巧克力'</span><span class="token punctuation">,</span> stuffing2<span class="token operator">=</span>Stuffing2<span class="token punctuation">{</span>body<span class="token operator">=</span><span class="token string">'果仁'</span><span class="token punctuation">,</span> form<span class="token operator">=</span><span class="token string">'固体'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'棕色'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>CandyDeep2<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'白色'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'果仁巧克力'</span><span class="token punctuation">,</span> stuffing2<span class="token operator">=</span>Stuffing2<span class="token punctuation">{</span>body<span class="token operator">=</span><span class="token string">'果仁'</span><span class="token punctuation">,</span> form<span class="token operator">=</span><span class="token string">'固体'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'棕色'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h3 id="2-结构型模式（7）"><a href="#2-结构型模式（7）" class="headerlink" title="2.结构型模式（7）"></a>2.结构型模式（7）</h3><h4 id="2-1-外观模式（FP）"><a href="#2-1-外观模式（FP）" class="headerlink" title="2.1. 外观模式（FP）"></a>2.1. 外观模式（FP）</h4><p><strong>英文：</strong>Facade Pattern</p><p><strong>定义：</strong>外观模式又叫门面模式，提供了统一的接口，用来访问子系统中的一群接口。</p><p><strong>优点：</strong></p><ol><li>简化了调用过程，无需了解深入子系统</li><li>减低耦合度；</li><li>更好的层次划分；</li><li>符合LKP。</li></ol><p><strong>缺点：</strong></p><ol><li>增加子系统，拓展子系统行为容易引入风险；</li><li>不符合OCP。</li></ol><p><strong>最佳实践：</strong></p><ol><li>子系统越来越复杂，增加外观模式提供简单接口调用；</li><li>构建多层系统结构，利用外观对象作为每层的入口，简化层间调用。</li></ol><p><strong>举例</strong>：</p><p>客户购买现做蛋糕，客户直接和前台打交道，前台和后台(制作蛋糕,装饰,打包)传达信息，后台对于客户被透明化</p><ol><li>创建蛋糕信息实体</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CakeInfo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String cakeName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Double amount<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer num<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"CakeInfo{"</span> <span class="token operator">+</span>                <span class="token string">"cakeName='"</span> <span class="token operator">+</span> cakeName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", amount="</span> <span class="token operator">+</span> amount <span class="token operator">+</span>                <span class="token string">", num="</span> <span class="token operator">+</span> num <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Double <span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAmount</span><span class="token punctuation">(</span>Double amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">=</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNum</span><span class="token punctuation">(</span>Integer num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCakeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cakeName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCakeName</span><span class="token punctuation">(</span>String cakeName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cakeName <span class="token operator">=</span> cakeName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建后台-制作服务</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MakeService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">makeCake</span><span class="token punctuation">(</span>String cakeName<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"糕点师制作"</span><span class="token operator">+</span>cakeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>创建后台-装饰服务</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DecorateService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">decorateCake</span><span class="token punctuation">(</span>String cakeName<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"装饰师装饰"</span><span class="token operator">+</span>cakeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>创建后台-打包服务</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">packageCake</span><span class="token punctuation">(</span>String cakeName<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打包师打包"</span><span class="token operator">+</span>cakeName<span class="token operator">+</span><span class="token string">",并转交前台"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>创建前台服务聚合后台服务</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FrontDeskService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> MakeService maker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> DecorateService decorator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecorateService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> PackageService packer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sellCake</span><span class="token punctuation">(</span>CakeInfo cakeInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前台从客户接受蛋糕信息:"</span><span class="token operator">+</span>cakeInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        String cakeName <span class="token operator">=</span> cakeInfo<span class="token punctuation">.</span><span class="token function">getCakeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>maker<span class="token punctuation">.</span><span class="token function">makeCake</span><span class="token punctuation">(</span>cakeName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>decorator<span class="token punctuation">.</span><span class="token function">decorateCake</span><span class="token punctuation">(</span>cakeName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>packer<span class="token punctuation">.</span><span class="token function">packageCake</span><span class="token punctuation">(</span>cakeName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前台收到蛋糕->转交客户->收银->销售成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><ol start="6"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CakeInfo cakeInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CakeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cakeInfo<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token number">100.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cakeInfo<span class="token punctuation">.</span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cakeInfo<span class="token punctuation">.</span><span class="token function">setCakeName</span><span class="token punctuation">(</span><span class="token string">"巧克力蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FrontDeskService frontDeskService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FrontDeskService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frontDeskService<span class="token punctuation">.</span><span class="token function">sellCake</span><span class="token punctuation">(</span>cakeInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="7"><li>输出</li></ol><pre class=" language-java"><code class="language-java">前台从客户接受蛋糕信息<span class="token operator">:</span>CakeInfo<span class="token punctuation">{</span>cakeName<span class="token operator">=</span><span class="token string">'巧克力蛋糕'</span><span class="token punctuation">,</span> amount<span class="token operator">=</span><span class="token number">100.0</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>糕点师制作巧克力蛋糕装饰师装饰巧克力蛋糕打包师打包巧克力蛋糕<span class="token punctuation">,</span>并转交前台前台收到蛋糕<span class="token operator">-</span><span class="token operator">></span>转交客户<span class="token operator">-</span><span class="token operator">></span>收银<span class="token operator">-</span><span class="token operator">></span>销售成功</code></pre><hr><h4 id="2-2-装饰者模式（DP）"><a href="#2-2-装饰者模式（DP）" class="headerlink" title="2.2. 装饰者模式（DP）"></a>2.2. 装饰者模式（DP）</h4><p><strong>英文：</strong>Decorator Pattern</p><p><strong>定义：</strong>在不改变原有对象的基础之上，将功能附加到对象上，提供了比继承更有弹性的替代方案</p><p><strong>优点：</strong></p><ol><li>继承的有力补充，不改变原有对象的情况下给对象拓展功能</li><li>通过使用不同的装饰类、不同的组合方式，实现不同的效果</li><li>符合OCP</li></ol><p><strong>缺点：</strong>增加程序复杂性</p><p><strong>最佳实践：</strong></p><ol><li>拓展一个类的功能</li><li>动态给对象添加功能，并且动态撤销</li></ol><p><strong>举例</strong>：</p><p>客户买蛋糕，要求对蛋糕加不同材料(果切，奶油，巧克力，装饰画等)，价格也随之变动</p><p>1.创建蛋糕套餐抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CakePackage</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.创建装饰器类继承蛋糕套餐抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CakeDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">CakePackage</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> CakePackage cakePackage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CakeDecorator</span><span class="token punctuation">(</span>CakePackage cakePackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cakePackage <span class="token operator">=</span> cakePackage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cakePackage<span class="token punctuation">.</span><span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cakePackage<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建标准蛋糕套餐类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardCakePackage</span> <span class="token keyword">extends</span> <span class="token class-name">CakePackage</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"蛋糕胚\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.创建加奶油、水果、糖果等增值套餐类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreamCakePackage</span> <span class="token keyword">extends</span> <span class="token class-name">CakeDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">CreamCakePackage</span><span class="token punctuation">(</span>CakePackage cakePackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>cakePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"加奶油\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FruitCakePackage</span> <span class="token keyword">extends</span> <span class="token class-name">CakeDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">FruitCakePackage</span><span class="token punctuation">(</span>CakePackage cakePackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>cakePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"加水果\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CandyCakePackage</span> <span class="token keyword">extends</span> <span class="token class-name">CakeDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">CandyCakePackage</span><span class="token punctuation">(</span>CakePackage cakePackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>cakePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"加糖果\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CakePackage cake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardCakePackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreamCakePackage</span><span class="token punctuation">(</span>cake<span class="token punctuation">)</span><span class="token punctuation">;</span>        cake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FruitCakePackage</span><span class="token punctuation">(</span>cake<span class="token punctuation">)</span><span class="token punctuation">;</span>        cake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CandyCakePackage</span><span class="token punctuation">(</span>cake<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cake<span class="token punctuation">.</span><span class="token function">remark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"价格："</span><span class="token operator">+</span>cake<span class="token punctuation">.</span><span class="token function">price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>6.输出</p><pre class=" language-java"><code class="language-java">蛋糕胚加奶油加水果加糖果价格：<span class="token number">35</span>元</code></pre><hr><h4 id="2-3-适配器模式（AP）"><a href="#2-3-适配器模式（AP）" class="headerlink" title="2.3. 适配器模式（AP）"></a>2.3. 适配器模式（AP）</h4><p><strong>英文：</strong>Adapter Pattern</p><p><strong>定义：</strong>将一个类的接口转换为期望的另一个接口，使原本不兼容的类可以一起工作</p><p><strong>优点：</strong></p><ol><li>提高类的透明性和复用，现有的类复用但不需改变</li><li>目标类和适配器类解耦，提高程序拓展性</li><li>符合OCP</li></ol><p><strong>缺点：</strong></p><ol><li>适配器编写过程需要全面考虑，可能会增加系统的复杂性</li><li>降低代码可读性</li></ol><p><strong>最佳实践：</strong>已存在的类，它的方法和需求不匹配时（方法结果相同或者相似）</p><p><strong>举例</strong>：</p><p>原有的蛋糕产品线，新增一个物料产品线(水果、奶油等)，在不修改原产品线的同时,两个产品线共同工作</p><ol><li>创建蛋糕产品线类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cake</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeCakes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建物料产品线接口</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Materiel</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>蛋糕产品类加入到物料产品线，创建一个适配器</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//一般适配器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreamCakeAdaptor</span> <span class="token keyword">extends</span> <span class="token class-name">Cake</span> <span class="token keyword">implements</span> <span class="token class-name">Materiel</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产奶油预备"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">makeCakes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"混合成奶油蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//对象适配器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FruitCakeAdaptor</span> <span class="token keyword">implements</span> <span class="token class-name">Materiel</span><span class="token punctuation">{</span>    Cake cake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产果切预备"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cake<span class="token punctuation">.</span><span class="token function">makeCakes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"混合成水果蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CreamCakeAdaptor creamCakeAdaptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreamCakeAdaptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        creamCakeAdaptor<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++++++++++++++华丽的分割线+++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FruitCakeAdaptor fruitCakeAdaptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FruitCakeAdaptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fruitCakeAdaptor<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>输出</li></ol><pre class=" language-java"><code class="language-java">生产奶油预备生产蛋糕混合成奶油蛋糕<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>华丽的分割线<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">+</span>生产果切预备生产蛋糕混合成水果蛋糕</code></pre><hr><h4 id="2-4-享元模式（FP）"><a href="#2-4-享元模式（FP）" class="headerlink" title="2.4. 享元模式（FP）"></a>2.4. 享元模式（FP）</h4><p><strong>英文：</strong>Flyweight Pattern</p><p><strong>定义：</strong>提供了减少对象数量从而改善应用所需的对象结构的方式，运用共享技术有效地支持大量细粒度的对象。</p><p><strong>优点：</strong>减少对象的创建，降低内存占用；</p><p><strong>缺点：</strong></p><ol><li><p>关注内部状态或外部状态，关注线程安全问题；（内部状态：享元对象的属性状态，不会因为外部的改变而改变； 外部状态：方法参数）</p></li><li><p>程序的逻辑复杂化。</p></li></ol><p><strong>最佳实践：</strong></p><ol><li><p>减少对象的创建，降低内存占用；</p></li><li><p>统拥有大量相似对象，需要缓冲池的场景。</p></li></ol><p><strong>举例</strong>：制作大量相同类型的蛋糕（代码关键是通过HashMap存储对象）</p><ol><li>创建蛋糕接口</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cake</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>具体类(如：水果类型蛋糕)实现蛋糕接口</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FruitCake</span> <span class="token keyword">implements</span> <span class="token class-name">Cake</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> LocalDateTime productTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">FruitCake</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProductTime</span><span class="token punctuation">(</span>LocalDateTime productTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>productTime <span class="token operator">=</span> productTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"生产时间："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>productTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>创建水果蛋糕的工厂</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FruitCakeFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//关键点</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>FruitCake<span class="token operator">></span> CAKE_HASH_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> FruitCake <span class="token function">product</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        FruitCake fruitCake <span class="token operator">=</span> CAKE_HASH_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fruitCake <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"制作方法,学习制作方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fruitCake <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FruitCake</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            CAKE_HASH_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>fruitCake<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> fruitCake<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> CAKE_TYPE <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"蓝莓蛋糕"</span><span class="token punctuation">,</span><span class="token string">"火龙果蛋糕"</span><span class="token punctuation">,</span><span class="token string">"草莓蛋糕"</span><span class="token punctuation">,</span><span class="token string">"香蕉蛋糕"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            String name <span class="token operator">=</span> CAKE_TYPE<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> CAKE_TYPE<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            FruitCake cake <span class="token operator">=</span> FruitCakeFactory<span class="token punctuation">.</span><span class="token function">product</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            cake<span class="token punctuation">.</span><span class="token function">setProductTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cake<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li><p>输出 </p><p>10次循环中，只生产了4个对象，很好的描述了系统有大量相似对象，需要缓冲池的场景。</p><p><strong>JDK中的字符串常量池，数据库连接池等都是用的享元模式。</strong></p></li></ol><pre class=" language-java"><code class="language-java">没有蓝莓蛋糕制作方法<span class="token punctuation">,</span>学习制作方法蓝莓蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">17.647076600</span>蓝莓蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">17.779721700</span>没有草莓蛋糕制作方法<span class="token punctuation">,</span>学习制作方法草莓蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">17.881450300</span>草莓蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">17.982180600</span>没有香蕉蛋糕制作方法<span class="token punctuation">,</span>学习制作方法香蕉蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">18.085903500</span>蓝莓蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">18.204594900</span>蓝莓蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">18.305322300</span>香蕉蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">18.430981100</span>草莓蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">18.541684900</span>蓝莓蛋糕生产时间：<span class="token number">2020</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>13T10<span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">18.645407200</span></code></pre><hr><h4 id="2-5-组合模式（CP）"><a href="#2-5-组合模式（CP）" class="headerlink" title="2.5. 组合模式（CP）"></a>2.5. 组合模式（CP）</h4><p><strong>英文：</strong>Composite Pattern</p><p><strong>定义：</strong>又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。</p><p><strong>优点：</strong></p><ol><li><p>层次清晰</p></li><li><p>客户端不必关系层次差异，方便控制</p></li><li><p>符合OCP</p></li></ol><p><strong>缺点：</strong>树形处理较为复杂</p><p><strong>最佳实践：</strong></p><ol><li><p>客户端可以忽略组合对象与单个对象的差异</p></li><li><p>处理树形结构数据</p></li></ol><p><strong>举例</strong>：菜单按钮组成的树形</p><ol><li>创建菜单按钮组合抽象类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MenuButton</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>MenuButton menuButton<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"不支持创建操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"不支持名称获取"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"不支持类型获取"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"不支持图标"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"不支持打印操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建按钮类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">MenuButton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Button</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"按钮"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>创建菜单类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Menu</span> <span class="token keyword">extends</span> <span class="token class-name">MenuButton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>MenuButton<span class="token operator">></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String icon<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer level<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Menu</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String icon<span class="token punctuation">,</span> Integer level<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>icon <span class="token operator">=</span> icon<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">=</span> level<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>MenuButton menuButton<span class="token punctuation">)</span><span class="token punctuation">{</span>        items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>menuButton<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"菜单"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>icon<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span> <span class="token operator">+</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>MenuButton item <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            item<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>测试</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Menu userMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">"用户管理"</span><span class="token punctuation">,</span> <span class="token string">"🧑"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button createUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"新增用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button updateUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"修改用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button deleteUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"删除用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>createUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        userMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>updateUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        userMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>deleteUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        Menu logMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">"操作日志"</span><span class="token punctuation">,</span> <span class="token string">"📃"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button export <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"导出Excel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>export<span class="token punctuation">)</span><span class="token punctuation">;</span>        Menu systemMenu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token string">"系统管理"</span><span class="token punctuation">,</span> <span class="token string">"🔨"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        systemMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>        systemMenu<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>logMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>        systemMenu<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>输出</li></ol><pre class=" language-java"><code class="language-java">🔨系统管理<span class="token punctuation">[</span>菜单<span class="token punctuation">]</span>    🧑用户管理<span class="token punctuation">[</span>菜单<span class="token punctuation">]</span>        新增用户<span class="token punctuation">[</span>按钮<span class="token punctuation">]</span>        修改用户<span class="token punctuation">[</span>按钮<span class="token punctuation">]</span>        删除用户<span class="token punctuation">[</span>按钮<span class="token punctuation">]</span>    📃操作日志<span class="token punctuation">[</span>菜单<span class="token punctuation">]</span>        导出Excel<span class="token punctuation">[</span>按钮<span class="token punctuation">]</span></code></pre><hr><h4 id="2-6-桥接模式（BP）"><a href="#2-6-桥接模式（BP）" class="headerlink" title="2.6. 桥接模式（BP）"></a>2.6. 桥接模式（BP）</h4><p><strong>英文：</strong>Bridge Pattern</p><p><strong>定义：</strong>将抽象部分和具体实现部分分离，使它们都可以独立变化。通过组合的方式建立两个类之间的关系，而不是通过继承。</p><p><strong>优点：</strong></p><ol><li><p>分离抽象部分和具体实现部分</p></li><li><p>提高了系统可拓展性</p></li><li><p>符合OCP和合成复用原则</p></li></ol><p><strong>缺点：</strong>增加了系统的理解和设计难度</p><p><strong>最佳实践：</strong></p><ol><li><p>抽象和实体实现之间增加更多的灵活性</p></li><li><p>一个类存在多个独立变化的维度，并且需要独立拓展</p></li><li><p>不希望使用继承</p></li></ol><p><strong>举例</strong>：</p><p>1.创建蛋糕的接口类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cake</span> <span class="token punctuation">{</span>    Cake <span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">getCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.创建蛋糕接口的实现类</p><p>水果蛋糕</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FruitCake</span> <span class="token keyword">implements</span> <span class="token class-name">Cake</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Cake <span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作水果蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FruitCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得水果蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>奶油蛋糕</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreamCake</span> <span class="token keyword">implements</span> <span class="token class-name">Cake</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Cake <span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作奶油蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CreamCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得奶油蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建店铺抽象类,通过属性的方式和蛋糕接口相关联，目的是可以在不同的店铺实现类中灵活地制作各种蛋糕</p><p>店铺抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Cake cake<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Store</span><span class="token punctuation">(</span>Cake cake<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cake <span class="token operator">=</span> cake<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> Cake <span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>店铺实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZhangSanStore</span> <span class="token keyword">extends</span> <span class="token class-name">Store</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ZhangSanStore</span><span class="token punctuation">(</span>Cake cake<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>cake<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    Cake <span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"张三的蛋糕店"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cake<span class="token punctuation">.</span><span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiSiStore</span> <span class="token keyword">extends</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">LiSiStore</span><span class="token punctuation">(</span>Cake cake<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>cake<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    Cake <span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"李四的蛋糕店"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cake<span class="token punctuation">.</span><span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZhangSanStore zhangSanStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhangSanStore</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FruitCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cake cake <span class="token operator">=</span> zhangSanStore<span class="token punctuation">.</span><span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cake<span class="token punctuation">.</span><span class="token function">getCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++++++++++++++++华丽的分割线+++++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LiSiStore liSiStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LiSiStore</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CreamCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cake cake1 <span class="token operator">=</span> liSiStore<span class="token punctuation">.</span><span class="token function">makeCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cake1<span class="token punctuation">.</span><span class="token function">getCake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.输出</p><pre class=" language-java"><code class="language-java">张三的蛋糕店制作水果蛋糕获得水果蛋糕<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>华丽的分割线<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">+</span>李四的蛋糕店制作奶油蛋糕获得奶油蛋糕</code></pre><hr><h4 id="2-7-代理模式（PP）"><a href="#2-7-代理模式（PP）" class="headerlink" title="2.7. 代理模式（PP）"></a>2.7. 代理模式（PP）</h4><p><strong>英文：</strong>Proxy Pattern</p><p><strong>定义：</strong>为其他对象提供一种代理，以控制对这个对象的访问，代理对象在客户端和目标对象之间起到了中介的作用</p><p><strong>优点：</strong></p><ol><li>将代理对象和真实被调用的目标对象分离</li><li>降低耦合，拓展性好</li><li>保护目标对象，增强目标对象</li></ol><p><strong>缺点：</strong></p><ol><li><p>造成类的数目增加，增加复杂度</p></li><li><p>客户端和目标对象增加代理对象，会造成处理速度变慢</p></li></ol><p><strong>最佳实践：</strong></p><ol><li>保护目标对象</li><li>增强目标对象</li></ol><table><thead><tr><th>代理分类</th><th>功能</th><th>缺点</th></tr></thead><tbody><tr><td>静态代理</td><td>通过在代码中显式地定义了一个代理类，在代理类中通过同名的方法对目标对象的方法进行包装，客户端通过调用代理类的方法来调用目标对象的方法。</td><td>每需要代理一个类，就需要手写对应的代理类</td></tr><tr><td>动态代理</td><td>JDK的动态代理只能代理接口，通过接口的方法名在动态生成的代理类中调用业务实现类的同名方法。</td><td></td></tr><tr><td>CGLib代理</td><td>通过继承来实现，生成的代理类就是目标对象类的子类，通过重写业务方法来实现代理</td><td></td></tr><tr><td>Spring对代理模式的拓展</td><td>1. 当Bean有实现接口时，使用JDK动态代理； 2. 当Bean没有实现接口时，使用CGLib代理。</td></tr></tbody></table><p><strong>举例</strong>：</p><p>1.静态代理</p><p>（1）创建糖果类接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICandyService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">makeCandy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>（2）创建糖果类实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CandyServiceServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ICandyService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeCandy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作糖果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（3）创建代理对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ICandyService iCandyService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeCandy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iCandyService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CandyServiceServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iCandyService<span class="token punctuation">.</span><span class="token function">makeCandy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"包装"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"准备材料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（4）测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[代理模式-静态代理]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ProxyService proxyService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyService<span class="token punctuation">.</span><span class="token function">makeCandy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（5）输出</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>代理模式<span class="token operator">-</span>静态代理<span class="token punctuation">]</span>准备材料制作糖果包装</code></pre><p>2.动态代理</p><p>（1）创建饼干类接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBiscuitService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">makeBiscuit</span><span class="token punctuation">(</span>String ingredients<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>（2）创建饼干类实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BiscuitServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IBiscuitService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeBiscuit</span><span class="token punctuation">(</span>String ingredients<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作"</span><span class="token operator">+</span>ingredients<span class="token operator">+</span><span class="token string">"饼干"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（3）创建动态代理</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 代理的目标对象</span>    <span class="token keyword">private</span> Object object<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DynamicProxy</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> object<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param proxy  动态生成的代理对象     * @param method 代理方法     * @param args   代理方法的方法参数     * @return 结果     * @throws Throwable 异常     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token function">beforeMethod</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 反射执行代理对象的目标方法</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">afterMethod</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">IBiscuitService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"准备饼干配料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">ICandyService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"准备糖果配料"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"暂不支持代理"</span> <span class="token operator">+</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">afterMethod</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">IBiscuitService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"包装饼干"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">ICandyService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"包装糖果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"暂不支持代理"</span> <span class="token operator">+</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（4）测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pp2Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[代理模式-动态代理]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ICandyService candyService <span class="token operator">=</span> <span class="token punctuation">(</span>ICandyService<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">DynamicProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CandyServiceServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        candyService<span class="token punctuation">.</span><span class="token function">makeCandy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++++++++++++++++华丽的分割线+++++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IBiscuitService biscuitService <span class="token operator">=</span> <span class="token punctuation">(</span>IBiscuitService<span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">DynamicProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BiscuitServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        biscuitService<span class="token punctuation">.</span><span class="token function">makeBiscuit</span><span class="token punctuation">(</span><span class="token string">"草莓"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++++++++++++++++华丽的分割线+++++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        biscuitService<span class="token punctuation">.</span><span class="token function">makeBiscuit</span><span class="token punctuation">(</span><span class="token string">"奶油"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>（5）输出</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>代理模式<span class="token operator">-</span>动态代理<span class="token punctuation">]</span>准备糖果配料制作糖果包装糖果<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>华丽的分割线<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">+</span>准备饼干配料制作草莓饼干包装饼干<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>华丽的分割线<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">+</span>准备饼干配料制作奶油饼干包装饼干</code></pre><p>3.CGLib代理</p><p>​    通过继承来实现，生成的代理类就是目标对象类的子类，通过重写业务方法来实现代理。</p><p>4.Spring对代理模式的扩展</p><p>​    可以通过以下配置强制使用CGLib代理;</p><pre class=" language-java"><code class="language-java">spring<span class="token operator">:</span>  aop<span class="token operator">:</span>    proxy<span class="token operator">-</span>target<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">:</span> <span class="token boolean">true</span></code></pre><hr><h3 id="3-行为型模式（11）"><a href="#3-行为型模式（11）" class="headerlink" title="3.行为型模式（11）"></a>3.行为型模式（11）</h3><h4 id="3-1-模板方法模式（TP）"><a href="#3-1-模板方法模式（TP）" class="headerlink" title="3.1. 模板方法模式（TP）"></a>3.1. 模板方法模式（TP）</h4><p><strong>英文：</strong>Template Pattern</p><p><strong>定义：</strong>模板方法模式定义了一个流程的骨架，由多个方法组成。并允许子类为一个或多个步骤提供实现。简而言之就是公共的不变的部分由父类统一实现，变化的部分由子类来个性化实现。</p><p><strong>优点：</strong></p><ol><li><p>提高复用性</p></li><li><p>提高拓展性</p></li><li><p>OCP</p></li></ol><p><strong>缺点：</strong></p><ol><li><p>类的数目增加</p></li><li><p>增加了系统实现的复杂度</p></li><li><p>父类添加新的抽象方法，所有子类都要改一遍</p></li></ol><p><strong>最佳实践：</strong></p><p><strong>举例</strong>：外卖<br>1.创建固定流程抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Takeaway</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(流程固定)下单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">packageSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(流程固定)打包派送"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">needTableware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">flow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">needTableware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"赠送一次性餐具"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">packageSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.创建子类实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CakeTakeaway</span> <span class="token keyword">extends</span> <span class="token class-name">Takeaway</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作蛋糕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">needTableware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">needTableware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BiscuitTakeaway</span> <span class="token keyword">extends</span> <span class="token class-name">Takeaway</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作饼干"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">needTableware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CakeTakeaway cakeTakeaway <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CakeTakeaway</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cakeTakeaway<span class="token punctuation">.</span><span class="token function">flow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++++++++++++++华丽的分割线+++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BiscuitTakeaway biscuitTakeaway <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BiscuitTakeaway</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        biscuitTakeaway<span class="token punctuation">.</span><span class="token function">flow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.实现</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span>流程固定<span class="token punctuation">)</span>下单制作蛋糕赠送一次性餐具<span class="token punctuation">(</span>流程固定<span class="token punctuation">)</span>打包派送<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>华丽的分割线<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">+</span><span class="token punctuation">(</span>流程固定<span class="token punctuation">)</span>下单制作饼干<span class="token punctuation">(</span>流程固定<span class="token punctuation">)</span>打包派送</code></pre><hr><h4 id="3-2-迭代器模式（IP）"><a href="#3-2-迭代器模式（IP）" class="headerlink" title="3.2. 迭代器模式（IP）"></a>3.2. 迭代器模式（IP）</h4><p><strong>英文：</strong>Iterator Pattern</p><p><strong>定义：</strong>迭代器模式，又称游标模式。这种模式提供一种方法访问一个容器对象中各个元素，而又不需要暴露该对象的内部细节。</p><p><strong>优点：</strong></p><p>1.它支持以不同的方式遍历一个聚合对象，在同一个聚合对象上可以定义多种遍历方式。替换迭代器就可以切换遍历方法。</p><p>2.迭代器简化了聚合类。聚合对象可以不用自己再提供遍历方法。</p><p>3.在迭代器模式中由于引入了抽象层，增加新的聚合类和迭代器类都很方便，无须修改原有代码，满足“开闭原则”的要求。</p><p><strong>缺点：</strong></p><p>1.由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器来，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p><p>2.抽象迭代器设计难度相对较大，需要充分考虑到系统将来的扩展，，例如JDK内置迭代器Iterator就无法实现逆向遍历，如果需要实现逆向遍历，只能通过其子类ListIterator等来实现，而ListIterator迭代器无法用于操作Set类型的聚合对象。</p><p><strong>最佳实践：</strong></p><p>1.访问一个聚合对象的内容而无须暴露它的内部表示。将聚合对象的访问与内部数据的存储分离，使得访问聚合对象时无须了解其内部实现细节。</p><p>2.需要为一个聚合对象提供多种遍历方式。</p><p>3.为遍历不同聚合结构提供统一的接口，该接口的实现类中为不同的聚合结构提供不同的遍历方式，而客户端可以一致性的操作该接口。</p><p><strong>举例</strong>：</p><p>1.创建抽象容器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span>  <span class="token class-name">Aggregate</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    Iterator <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.创建容器实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteAggregate</span> <span class="token keyword">implements</span> <span class="token class-name">Aggregate</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteIterator</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建抽象迭代器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>    Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.创建具体迭代器实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ConcreteIterator</span><span class="token punctuation">(</span>List list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object obj <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            obj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cursor<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor <span class="token operator">==</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Aggregate ag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteAggregate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ag<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ag<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ag<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator it <span class="token operator">=</span> ag<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String str <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>6.输出</p><pre class=" language-java"><code class="language-java">abc</code></pre><hr><h4 id="3-3-策略模式（SP）"><a href="#3-3-策略模式（SP）" class="headerlink" title="3.3. 策略模式（SP）"></a>3.3. 策略模式（SP）</h4><p><strong>英文：</strong>Strategy Pattern</p><p><strong>定义：</strong>策略模式定义了算法家族，分别封装起来，让它们之间可以互相替换。此模式让算法的变化不会影响到使用算法的用户。策略模式常用于消除大量的if else代码。</p><p><strong>优点：</strong></p><p><strong>缺点：</strong></p><p><strong>最佳实践：</strong></p><ol><li>系统有很多类，它们的区别仅仅在于行为不同</li><li>一个系统需要动态地在几种算法中选择一种</li></ol><p><strong>举例</strong>：促销活动</p><p>1.创建活动接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">discount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.创建多接口实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategyOne</span> <span class="token keyword">implements</span> <span class="token class-name">Activity</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">discount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"满减返现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategyTwo</span> <span class="token keyword">implements</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">discount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"满减打折"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String plan <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>plan<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            StrategyOne strategyOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            strategyOne<span class="token punctuation">.</span><span class="token function">discount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>plan<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            StrategyTwo strategyTwo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            strategyTwo<span class="token punctuation">.</span><span class="token function">discount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"暂不支持活动策略"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.输出</p><pre class=" language-java"><code class="language-java">满减返现</code></pre><hr><h4 id="3-4-解释器模式（IP）–-TODO"><a href="#3-4-解释器模式（IP）–-TODO" class="headerlink" title="3.4. 解释器模式（IP）– TODO"></a>3.4. 解释器模式（IP）– TODO</h4><p><strong>英文：</strong>Interpreter Pattern</p><p><strong>定义：</strong></p><p><strong>优点：</strong></p><p><strong>缺点：</strong></p><p><strong>最佳实践：</strong></p><p><strong>举例</strong>：最难模式，不常用，后补充</p><hr><h4 id="3-5-观察者模式（OP）"><a href="#3-5-观察者模式（OP）" class="headerlink" title="3.5. 观察者模式（OP）"></a>3.5. 观察者模式（OP）</h4><p><strong>英文：</strong>Observer Pattern</p><p><strong>定义：</strong>观察者模式定义了对象之间的一对多依赖，让多个观察者同时监听某个主题对象，当主体对象发生变化时，它的所有观察者都会收到响应的通知。</p><p><strong>优点：</strong></p><ol><li><p>观察者和被观察者之间建立一个抽象的耦合；</p></li><li><p>观察者模式支持广播通信。</p></li></ol><p><strong>缺点：</strong></p><ol><li><p>观察者之间有过多的细节依赖，提高时间消耗及程序复杂度</p></li><li><p>应避免循环调用</p></li></ol><p><strong>最佳实践：</strong></p><p><strong>举例</strong>：公众号推送文章</p><p>1.创建被观察者(公众号)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OfficialAccount</span> <span class="token keyword">extends</span> <span class="token class-name">Observable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String accountName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OfficialAccount</span><span class="token punctuation">(</span>String accountName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountName <span class="token operator">=</span> accountName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAccountName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>Article article<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>accountName<span class="token operator">+</span><span class="token string">"】"</span> <span class="token operator">+</span><span class="token string">"发起推送>>>"</span><span class="token operator">+</span>article<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的《"</span><span class="token operator">+</span>article<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置标识位 changed = true，表示被观察者发生了改变</span>        <span class="token function">setChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通知观察者，可以给观察者传递数据</span>        <span class="token function">notifyObservers</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.创建观察者（订阅者）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Followers</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Followers</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Observable o<span class="token punctuation">,</span> Object arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OfficialAccount officialAccount <span class="token operator">=</span> <span class="token punctuation">(</span>OfficialAccount<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        Article article <span class="token operator">=</span> <span class="token punctuation">(</span>Article<span class="token punctuation">)</span> arg<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">":::收到【"</span><span class="token operator">+</span>officialAccount<span class="token punctuation">.</span><span class="token function">getAccountName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"】的推送:"</span><span class="token operator">+</span>article<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的《"</span><span class="token operator">+</span>article<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建推送对象（文章）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Article</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> author<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthor</span><span class="token punctuation">(</span>String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OfficialAccount officialAccount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OfficialAccount</span><span class="token punctuation">(</span><span class="token string">"JAVA大本营"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加订阅者</span>        Followers follower1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Followers</span><span class="token punctuation">(</span><span class="token string">"路人甲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        officialAccount<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>follower1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Followers follower2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Followers</span><span class="token punctuation">(</span><span class="token string">"路人乙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        officialAccount<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>follower2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//推送</span>        Article article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token string">"大话设计模式"</span><span class="token punctuation">,</span><span class="token string">"菜鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        officialAccount<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.输出</p><pre class=" language-java"><code class="language-java">【JAVA大本营】发起推送<span class="token operator">>>></span>菜鸟的《大话设计模式》路人乙<span class="token operator">:</span><span class="token operator">:</span><span class="token operator">:</span>收到【JAVA大本营】的推送<span class="token operator">:</span>菜鸟的《大话设计模式》路人甲<span class="token operator">:</span><span class="token operator">:</span><span class="token operator">:</span>收到【JAVA大本营】的推送<span class="token operator">:</span>菜鸟的《大话设计模式》</code></pre><hr><h4 id="3-6-备忘录模式（MP）"><a href="#3-6-备忘录模式（MP）" class="headerlink" title="3.6. 备忘录模式（MP）"></a>3.6. 备忘录模式（MP）</h4><p><strong>英文：</strong>Memento Pattern</p><p><strong>定义：</strong>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以将该对象恢复到原先保存的状态。</p><p><strong>优点：</strong></p><p>1.它提供了一种状态恢复的实现机制，使得用户可以方便地回到一个特定的历史步骤，当新的状态无效或者存在问题时，可以使用暂时存储起来的备忘录将状态复原。</p><p>2.备忘录实现了对信息的封装，一个备忘录对象是一种原发器对象状态的表示，不会被其他代码所改动。备忘录保存了原发器的状态，采用列表、堆栈等集合来存储备忘录对象可以实现多次撤销操作。</p><p><strong>缺点：</strong>资源消耗过大，如果需要保存的原发器类的成员变量太多，就不可避免需要占用大量的存储空间，每保存一次对象的状态都需要消耗一定的系统资源。</p><p><strong>最佳实践：</strong></p><ol><li><p>保存一个对象在某一个时刻的全部状态或部分状态，这样以后需要时它能够恢复到先前的状态，实现撤销操作。</p></li><li><p>防止外界对象破坏一个对象历史状态的封装性，避免将对象历史状态的实现细节暴露给外界对象。</p></li></ol><table><thead><tr><th>名称</th><th>作用</th><th></th></tr></thead><tbody><tr><td>原发器类（Originator）</td><td>创建一个备忘录对象，使用备忘录存储它的内部状态</td><td></td></tr><tr><td>负责人类（CareTaker）</td><td>负责保存好备忘录对象，不能检查或操作备忘录的内容</td><td></td></tr><tr><td>备忘录类（Memento）</td><td>将原发器的内部状态存储起来，原发器根据需要决定备忘录存储原发器的哪些内部状态</td></tr></tbody></table><p><strong>举例</strong>：冒险岛闯关</p><p>1.创建游戏类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdventureIslandGame</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**关卡*/</span>    <span class="token keyword">private</span> Integer point<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**建档*/</span>    <span class="token keyword">public</span> GameMemento <span class="token function">createMemento</span><span class="token punctuation">(</span>Integer point<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GameMemento</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**开始游戏*/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        point <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**恢复备份*/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restore</span><span class="token punctuation">(</span>GameMemento gameMemento<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>point <span class="token operator">=</span> gameMemento<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> point<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPoint</span><span class="token punctuation">(</span>Integer point<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>point <span class="token operator">=</span> point<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.创建备份</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameMemento</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**关卡*/</span>    <span class="token keyword">private</span> Integer point<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 备份关卡     */</span>    <span class="token keyword">public</span> <span class="token function">GameMemento</span><span class="token punctuation">(</span><span class="token keyword">int</span> point<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>point <span class="token operator">=</span> point<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> point<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPoint</span><span class="token punctuation">(</span>Integer point<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>point <span class="token operator">=</span> point<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建备份管理类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Caretaker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> GameMemento gameMemento<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**恢复备份*/</span>    <span class="token keyword">public</span> GameMemento <span class="token function">retrieveMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameMemento<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**保存备份*/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveMemento</span><span class="token punctuation">(</span>GameMemento gameMemento<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gameMemento <span class="token operator">=</span> gameMemento<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[冒险岛闯关游戏]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AdventureIslandGame game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdventureIslandGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"游戏开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        game<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"击杀第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关boss,进入下一关"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建新档..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GameMemento gameMemento <span class="token operator">=</span> game<span class="token punctuation">.</span><span class="token function">createMemento</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Caretaker caretaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Caretaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caretaker<span class="token punctuation">.</span><span class="token function">saveMemento</span><span class="token punctuation">(</span>gameMemento<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关,存档完成~~~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        game<span class="token punctuation">.</span><span class="token function">setPoint</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"击杀第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关boss,进入下一关"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gameMemento<span class="token punctuation">.</span><span class="token function">setPoint</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caretaker<span class="token punctuation">.</span><span class="token function">saveMemento</span><span class="token punctuation">(</span>gameMemento<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关,存档完成~~~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        game<span class="token punctuation">.</span><span class="token function">setPoint</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关boss杀死,游戏结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"回退关卡..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        game<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span>caretaker<span class="token punctuation">.</span><span class="token function">retrieveMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"~~~~~~回退完成,当前关卡第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关~~~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        game<span class="token punctuation">.</span><span class="token function">setPoint</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取当前关卡：进入第"</span><span class="token operator">+</span>game<span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"关"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.输出</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>冒险岛闯关游戏<span class="token punctuation">]</span>游戏开始进入第<span class="token number">1</span>关击杀第<span class="token number">1</span>关boss<span class="token punctuation">,</span>进入下一关创建新档<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>进入第<span class="token number">2</span>关击杀第<span class="token number">2</span>关boss<span class="token punctuation">,</span>进入下一关​<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>第<span class="token number">2</span>关<span class="token punctuation">,</span>存档完成<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>进入第<span class="token number">3</span>关被第<span class="token number">3</span>关boss杀死<span class="token punctuation">,</span>游戏结束回退关卡<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>​<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>回退完成<span class="token punctuation">,</span>当前关卡第<span class="token number">2</span>关<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>获取当前关卡：进入第<span class="token number">3</span>关</code></pre><hr><h4 id="3-7-命令模式（CP）"><a href="#3-7-命令模式（CP）" class="headerlink" title="3.7. 命令模式（CP）"></a>3.7. 命令模式（CP）</h4><p><strong>英文：</strong>Command Pattern</p><p><strong>定义：</strong> 将一个请求封装为一个对象，从而使我们可用不同的请求对用户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>抽象命令者（Command）</td><td>定义命令的接口，声明执行的方法。</td></tr><tr><td>具体命令类（ConcreteCommand）</td><td>命令接口实现对象，是“虚”的实现；通常会持有接收者，并调用接收者的功能来完成命令要执行的操作。</td></tr><tr><td>接收者（Receiver）</td><td>真正执行命令的对象。任何类都可能成为一个接收者，只要它能够根据命令要求实现的相应功能。</td></tr><tr><td>调用者（Invoker）</td><td>要求命令要求命令对象执行请求，通常会持有命令对象，可以持有很多的命令对象。这是用户端真正出发命令并要求命令执行相应操作的地方，也就是说，相当于使用命令对象的入口。</td></tr><tr><td>具体命令对象（client）</td><td>创建具体的命令对象，并且设置命令对象的接收者。也可以理解为装配者。</td></tr></tbody></table><p><strong>优点：</strong></p><ol><li>降低系统的耦合度。由于请求者与接收者之间不存在直接引用，因此请求者与接收者之间实现完全解耦，相同的请求者可以对应不同的接收者，同样，相同的接收者也可以供不同的请求者使用，两者之间具有良好的独立性。</li><li>新的命令可以很容易地加入到系统中。由于增加新的具体命令类不会影响到其他类，因此增加新的具体命令类很容易，无须修改原有系统源代码，甚至客户类代码，满足“开闭原则”的要求。</li></ol><p><strong>缺点：</strong>使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个对请求接收者的调用操作都需要设计一个具体命令类，因此在某些系统中可能需要提供大量的具体命令类，这将影响命令模式的使用。</p><p><strong>最佳实践：</strong></p><p>1.系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</p><p>2.系统需要在不同的时间指定请求、将请求排队和执行请求。</p><p><strong>举例</strong>：Siri语音助手</p><p>1.创建命令接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行命令</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.创建具体实现命令实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OpenCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Application app<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OpenCommand</span><span class="token punctuation">(</span>Application app<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>app <span class="token operator">=</span> app<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloseCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Application app<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CloseCommand</span><span class="token punctuation">(</span>Application app<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>app <span class="token operator">=</span> app<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        app<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建应用抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.创建应用实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeChat</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"微信打开了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"微信关闭了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Alipay</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"支付宝打开了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"支付宝关闭了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.实现命令发起者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Siri</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Command command<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置要执行的命令     * @param command 命令     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommand</span><span class="token punctuation">(</span>Command command<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>command <span class="token operator">=</span> command<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 执行命令     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>6.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Siri siri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Siri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"嘿 siri， 打开微信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Application weChat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeChat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Command command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenCommand</span><span class="token punctuation">(</span>weChat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//siri传递命令</span>        siri<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        siri<span class="token punctuation">.</span><span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"嘿 siri，打开支付宝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Application alipay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Alipay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenCommand</span><span class="token punctuation">(</span>alipay<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//siri传递命令</span>        siri<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        siri<span class="token punctuation">.</span><span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>7.输出</p><pre class=" language-java"><code class="language-java">嘿 siri， 打开微信微信打开了嘿 siri，打开支付宝支付宝打开了</code></pre><hr><h4 id="3-8-中介者模式（MP）"><a href="#3-8-中介者模式（MP）" class="headerlink" title="3.8. 中介者模式（MP）"></a>3.8. 中介者模式（MP）</h4><p><strong>英文：</strong>Mediator Pattern</p><p><strong>定义：</strong>中介者模式是指用一个中介对象来封装一系列的对象交互。中介者使个对象不需要显示的相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p><strong>优点：</strong></p><p>1.简化了对象之间的交互，它用中介者和同事的一对多交互代替了原来同事之间的多对多交互，一对多关系更容易理解、维护扩展，将原本难以理解的网状结构转换成相对简单的星型结构。</p><p>2.可将各同事对象解耦。中介者有利于各同事之间的松耦合，我们可以独立的改变和复用每一个同事和中介者，增加新的中介者和新的同事类都比较方便，更好的符合“开闭原则”。</p><p>3.可以减少子类生成，中介者将原本分布于多个对象间的行为集中在一起，改变这些行为只需生成新的中介者子类即可，这使得各个同事类可被重用，无须对同事类进行扩展。</p><p><strong>缺点：</strong>在具体中介者类中包含了大量同事之间的交互细节，可能会导致具体中介者类非常复杂，使得系统难以维护。</p><p><strong>最佳实践：</strong></p><p>1.系统中对象之间存在复杂的引用关系，系统结构混乱且难以理解。</p><p>2.一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象。</p><p>3.想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。可以通过引入中介者类来实现，在中介者中定义对象交互的公共行为，如果需要改变行为则可以增加新的具体中介者类。</p><p><strong>举例</strong>：同事类相互影响</p><p>1.创建同事类抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">,</span> Mediator mediator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.创建同事类实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColleagueA</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">,</span> Mediator mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>        mediator<span class="token punctuation">.</span><span class="token function">A2B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColleagueB</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">,</span> Mediator mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>        mediator<span class="token punctuation">.</span><span class="token function">B2A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建中介者抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Colleague ca<span class="token punctuation">;</span>    <span class="token keyword">protected</span> Colleague cb<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Mediator</span><span class="token punctuation">(</span>Colleague a<span class="token punctuation">,</span> Colleague b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ca <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">A2B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">B2A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.创建中介者实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MediatorImpl</span> <span class="token keyword">extends</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MediatorImpl</span><span class="token punctuation">(</span>Colleague a<span class="token punctuation">,</span> Colleague b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">A2B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> ca<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cb<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span>number<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">B2A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ca<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span>number<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ColleagueA colleagueA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ColleagueB colleagueB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Mediator mediator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediatorImpl</span><span class="token punctuation">(</span>colleagueA<span class="token punctuation">,</span>colleagueB<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++++++++++++通过设置A影响B++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        colleagueA<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A的值为："</span><span class="token operator">+</span>colleagueA<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B的值为A的10倍："</span><span class="token operator">+</span>colleagueB<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++++++++++++通过设置B影响A++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        colleagueB<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B的值为："</span><span class="token operator">+</span>colleagueB<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A的值为B的0.1倍："</span><span class="token operator">+</span>colleagueA<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>6.输出</p><pre class=" language-java"><code class="language-java"><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>通过设置A影响B<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>A的值为：<span class="token number">1000</span>B的值为A的<span class="token number">10</span>倍：<span class="token number">100000</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>通过设置B影响A<span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span><span class="token operator">++</span>B的值为：<span class="token number">2000</span>A的值为B的<span class="token number">0.1</span>倍：<span class="token number">20</span></code></pre><hr><h4 id="3-9-职责链模式（CRP）"><a href="#3-9-职责链模式（CRP）" class="headerlink" title="3.9. 职责链模式（CRP）"></a>3.9. 职责链模式（CRP）</h4><p><strong>英文：</strong>Chain of Responsibility Pattern</p><p><strong>定义：</strong>责任链模式是为了避免请求的发送者和接收者之间的耦合关系，使多个接收对象都有机会处理请求。将这些对象练成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><table><thead><tr><th>职责链分类</th><th>定义</th></tr></thead><tbody><tr><td>纯的职责链模式</td><td>纯的职责链模式要求一个具体的处理者对象只能在两个行为中选择一个：一个是承担责任；二是把责任推给下家。不允许出现某一个具体处理者对象在承担了一部分责任后又把责任向下传的情况。在一个纯的职责链中，一个请求必须被某一个处理者对象所接受。</td></tr><tr><td>不纯的职责链模式</td><td>不纯的职责链模式中允许某个请求被一个具体处理者部分处理后再向下传递，或者一个具体处理者处理完某请求后其后继处理者可以继续处理该请求，而且一个请求可以最终不被任何处理者对象所接收。</td></tr></tbody></table><p><strong>优点：</strong></p><p>1.请求不需要指出被哪个对象处理了，这样的效果是请求者和接收者之间的解耦，而且链中的对象也不需要清楚其他链的结构，也降低了耦合。</p><p>2.请求处理对象仅需要维护一个指向其后继者的的引用，而不需要维护所有的处理对象，简化了对象之间的相互连接。</p><p>3.在给对象分派职责时，职责链可以给我们更多的灵活性，可以通过在运行时对该链进行动态的增加或修改来增加或改变处理一个请求的职责。</p><p>4.新增一个请求处理对象，不需要改动现有代码，只需要重新设置连接即可，符合“开闭原则”。</p><p><strong>缺点：</strong></p><p>1.如果一个请求没有明确的接收者，那么就不能保证它一定会被处理，该请求可能一直到链的末端都得不到处理；一个请求也可能因职责链没有被正确配置而得不到处理。</p><p>2.对于比较长的职责链，请求的处理可能涉及到多个处理对象，不仅增加了代码的复杂性并且系统性能也将受到一定影响，而且在进行代码调试时不太方便。</p><p>3.若建链不当，可能会造成循环调用，将导致系统陷入死循环。</p><p><strong>最佳实践：</strong></p><p>1.有多个对象可以处理同一个请求，具体哪个对象处理该请求待运行时刻再确定，客户端只需将请求提交到链上，而无须关心请求的处理对象是谁以及它是如何处理的。</p><p>2.在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。</p><p>3.可动态指定一组对象处理请求，客户端可以动态创建职责链来处理请求，还可以改变链中处理者之间的先后次序。其实在我们日常开发中也会有适用到责任链模式的场景，try/catch、servlet(各个servelt互相调用)、以及filter等</p><p><strong>举例</strong>：请假审批</p><p>1.创建请假对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leave</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//部门</span>    <span class="token keyword">private</span> String department<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//天数</span>    <span class="token keyword">private</span> Double day<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//原因</span>    <span class="token keyword">private</span> String cause<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> department<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDepartment</span><span class="token punctuation">(</span>String department<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>department <span class="token operator">=</span> department<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Double <span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> day<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDay</span><span class="token punctuation">(</span>Double day<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cause<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCause</span><span class="token punctuation">(</span>String cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cause <span class="token operator">=</span> cause<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Leave{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", department='"</span> <span class="token operator">+</span> department <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", day="</span> <span class="token operator">+</span> day <span class="token operator">+</span>                <span class="token string">", cause='"</span> <span class="token operator">+</span> cause <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.创建审批者抽象类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Approver</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//审核人名</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//下一个审核人</span>    <span class="token keyword">public</span> Approver nextApprove<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Approver</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置下一个审核人</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNextApprove</span><span class="token punctuation">(</span>Approver nextApprove<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextApprove <span class="token operator">=</span> nextApprove<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//审核</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">approval</span><span class="token punctuation">(</span>Leave leave<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.创建审批者实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Approver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Manager</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">approval</span><span class="token punctuation">(</span>Leave leave<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>leave<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"权限范围内,批准了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束审批"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>nextApprove<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"权限范围外,移交上一级领导"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>nextApprove<span class="token punctuation">.</span><span class="token function">approval</span><span class="token punctuation">(</span>leave<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"领导不在,审批质押"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boss</span> <span class="token keyword">extends</span> <span class="token class-name">Approver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Boss</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">approval</span><span class="token punctuation">(</span>Leave leave<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leave<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> leave<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"：未超预期,批准"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束审批"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"时间太长了,影响公司挣钱,驳回"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束审批"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Leave leave <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leave<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leave<span class="token punctuation">.</span><span class="token function">setDepartment</span><span class="token punctuation">(</span><span class="token string">"研发部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leave<span class="token punctuation">.</span><span class="token function">setDay</span><span class="token punctuation">(</span><span class="token number">8.0D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leave<span class="token punctuation">.</span><span class="token function">setCause</span><span class="token punctuation">(</span><span class="token string">"结婚"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Manager manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token string">"李经理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Boss boss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boss</span><span class="token punctuation">(</span><span class="token string">"钱总"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        manager<span class="token punctuation">.</span><span class="token function">setNextApprove</span><span class="token punctuation">(</span>boss<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请假发起者："</span><span class="token operator">+</span>leave<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        manager<span class="token punctuation">.</span><span class="token function">approval</span><span class="token punctuation">(</span>leave<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.输出</p><pre class=" language-java"><code class="language-java">请假发起者：Leave<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'小王'</span><span class="token punctuation">,</span> department<span class="token operator">=</span><span class="token string">'研发部'</span><span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">8.0</span><span class="token punctuation">,</span> cause<span class="token operator">=</span><span class="token string">'结婚'</span><span class="token punctuation">}</span>李经理权限范围外<span class="token punctuation">,</span>移交上一级领导钱总：未超预期<span class="token punctuation">,</span>批准结束审批</code></pre><hr><h4 id="3-10-访问者模式（VP）"><a href="#3-10-访问者模式（VP）" class="headerlink" title="3.10. 访问者模式（VP）"></a>3.10. 访问者模式（VP）</h4><p><strong>英文：</strong>Visitor Pattern</p><p><strong>定义：</strong>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素类的前提<a href="https://baike.baidu.com/item/下定义/658188" target="_blank" rel="noopener">下定义</a>作用于这些元素的新操作。</p><p><strong>优点：</strong></p><p>1.符合单一职责原则</p><p>2.优秀的扩展性</p><p>3.灵活性</p><p><strong>缺点：</strong></p><p>1.具体元素对访问者公布细节，违反了迪米特原则</p><p>2.具体元素变更比较困难</p><p>3.违反了依赖倒置原则，依赖了具体类，没有依赖抽象。</p><p><strong>最佳实践：</strong></p><p>1.对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 </p><p>2.需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，也不希望在增加新操作时修改这些类。</p><p>注意事项：访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。</p><p><strong>举例</strong>：</p><p>场景：</p><p>CEO和CTO开始评定员工一年的工作绩效，员工分为工程师和经理，CTO关注工程师的代码量、经理的新产品数量；CEO关注的是工程师的KPI和经理的KPI以及新产品数量。由于CEO和CTO对于不同员工的关注点是不一样的，这就需要对不同员工类型进行不同的处理。访问者模式此时可以派上用场了。</p><p>1.创建抽象员工类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Staff</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//员工姓名</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//员工KPI</span>    <span class="token keyword">public</span> Integer kpi<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Staff</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>kpi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//接受visitor访问</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.创建员工实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Engineer</span> <span class="token keyword">extends</span> <span class="token class-name">Staff</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Engineer</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCodeLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Staff</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Manager</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getProductNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.创建观接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 访问工程师类型</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Engineer engineer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 访问经理类型</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Manager manager<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.创建观察者接口实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CEO</span> <span class="token keyword">implements</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CEO</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Engineer engineer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"查看:"</span><span class="token operator">+</span>engineer<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"的KPI："</span><span class="token operator">+</span>engineer<span class="token punctuation">.</span>kpi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Manager manager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"查看:"</span><span class="token operator">+</span>manager<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"的KPI："</span><span class="token operator">+</span>manager<span class="token punctuation">.</span>kpi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CTO</span> <span class="token keyword">implements</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CTO</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Engineer engineer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"查看:"</span><span class="token operator">+</span>engineer<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"的代码数："</span><span class="token operator">+</span>engineer<span class="token punctuation">.</span><span class="token function">getCodeLines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Manager manager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"查看:"</span><span class="token operator">+</span>manager<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"的产品数："</span><span class="token operator">+</span>manager<span class="token punctuation">.</span><span class="token function">getProductNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.创建报表类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelReport</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Staff<span class="token operator">></span> staffs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ExcelReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        staffs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token string">"李经理"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        staffs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token string">"张经理"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        staffs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Engineer</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        staffs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Engineer</span><span class="token punctuation">(</span><span class="token string">"小李"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showReport</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Staff staff <span class="token operator">:</span> staffs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            staff<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>6.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExcelReport excelReport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExcelReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        excelReport<span class="token punctuation">.</span><span class="token function">showReport</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CEO</span><span class="token punctuation">(</span><span class="token string">"吴董"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        excelReport<span class="token punctuation">.</span><span class="token function">showReport</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CTO</span><span class="token punctuation">(</span><span class="token string">"程总"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>7.输出</p><pre class=" language-java"><code class="language-java">吴董查看<span class="token operator">:</span>李经理的KPI：<span class="token number">3</span>吴董查看<span class="token operator">:</span>张经理的KPI：<span class="token number">7</span>吴董查看<span class="token operator">:</span>小王的KPI：<span class="token number">5</span>吴董查看<span class="token operator">:</span>小李的KPI：<span class="token number">8</span>程总查看<span class="token operator">:</span>李经理的产品数：<span class="token number">1</span>程总查看<span class="token operator">:</span>张经理的产品数：<span class="token number">3</span>程总查看<span class="token operator">:</span>小王的代码数：<span class="token number">55701</span>程总查看<span class="token operator">:</span>小李的代码数：<span class="token number">31420</span></code></pre><hr><h4 id="3-11-状态模式（SP）"><a href="#3-11-状态模式（SP）" class="headerlink" title="3.11. 状态模式（SP）"></a>3.11. 状态模式（SP）</h4><p><strong>英文</strong>：State Pattern</p><p><strong>定义：</strong>允许一个对象在其状态改变时，改变它的行为，对象看起来似乎修改了它的类。</p><p><strong>优点：</strong></p><p>1.封装了状态的转换规则，在状态模式中可以将状态转换的工作封装在环境类或具体的状态类中，可以对状态转换码进行集中管理，而不是分散在一个个的业务中。</p><p>2.将所有与某个状态有关的行为放到一个类中，只需要注入一个不同的状态对象即可使环境对象拥有不同的行为。</p><p>3.允许状态转换逻辑与状态对象合为一体，而不是提供一个巨大的条件语句块，状态模式可以让我们避免使用庞大的条件语句来将业务方法和状态转换代码交织在一起。</p><p><strong>缺点：</strong></p><p>1.状态模式的使用必然会增加系统中类和对象的个数，导致系统运行开销增大。</p><p>2.状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱，增加系统设计的难度。</p><p><strong>最佳实践：</strong></p><p>1.对象的行为依赖于它的状态（如某些属性值），状态的改变将导致行为的变化。</p><p>2.在代码中包含大量与对象状态有关的条件语句，这些条件语句的出现，会导致代码的可维护性和灵活性变差，不能方便地增加和删除状态，并且导致客户类与类库之间的耦合增强。</p><p><strong>举例</strong>：请假审核</p><p>1.创建请假对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeaveApply</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//申请单初始状态是待提交状态</span>    <span class="token keyword">private</span> ApplyState applyState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置状态</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span>ApplyState state<span class="token punctuation">)</span><span class="token punctuation">{</span>        applyState <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//状态变化后,更新对象自身的行为</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        applyState<span class="token punctuation">.</span><span class="token function">changeHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.创建审核状态接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplyState</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//状态变化处理操作</span>    <span class="token keyword">void</span> <span class="token function">changeHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.创建各审核状态具体实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Audit</span> <span class="token keyword">implements</span> <span class="token class-name">ApplyState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[审核中]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuditPass</span> <span class="token keyword">implements</span> <span class="token class-name">ApplyState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[审核通过]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuditReject</span> <span class="token keyword">implements</span> <span class="token class-name">ApplyState</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[审核未通过]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4.测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LeaveApply leaveApply <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeaveApply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leaveApply<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leaveApply<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AuditPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leaveApply<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leaveApply<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AuditReject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        leaveApply<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>5.输出</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>审核中<span class="token punctuation">]</span><span class="token punctuation">[</span>审核通过<span class="token punctuation">]</span><span class="token punctuation">[</span>审核未通过<span class="token punctuation">]</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统优化小记：CPU长时间满负荷运行</title>
      <link href="/2020/11/28/system-optimize/"/>
      <url>/2020/11/28/system-optimize/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CPU长时间满负荷运行,一次入门级降CPU系统优化实战</p></blockquote><a id="more"></a><h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>用户量增大,线上一个Java单应用服务长时间占用服务器CPU达到400%，使得接口响应速度非常慢，线程拥堵，出现各种响应超时问题，即便有时候没有用户操作，也会长时间占用大量CPU和内存。</p><p><img src="/2020/11/28/system-optimize/1-1-1.png" alt=""></p><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>找出哪些程序处理满，进行排查优化（业务流程调整、锁关闭、SQL优化、一些耗性能的程序不使用内存方案）</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>linux命令排查 + Arthas监控 + Druid sql 监控</p><h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><h2 id="一、Linux命令排查，方法如下："><a href="#一、Linux命令排查，方法如下：" class="headerlink" title="一、Linux命令排查，方法如下："></a>一、Linux命令排查，方法如下：</h2><h3 id="1-显示进程列表，定位进程号"><a href="#1-显示进程列表，定位进程号" class="headerlink" title="1.显示进程列表，定位进程号"></a>1.显示进程列表，定位进程号</h3><p>在<strong>top</strong>命令下，按<strong>shift+H</strong>查看cpu占用最高进程(<strong>PID</strong>:21659)</p><p><img src="/2020/11/28/system-optimize/1-1-2.png" alt=""></p><h3 id="2-显示线程列表，定位线程号，找到哪些线程占用高耗时长"><a href="#2-显示线程列表，定位线程号，找到哪些线程占用高耗时长" class="headerlink" title="2.显示线程列表，定位线程号，找到哪些线程占用高耗时长"></a>2.显示线程列表，定位线程号，找到哪些线程占用高耗时长</h3><p>命令：<code>ps -mp pid -o THREAD,tid,time | sort -rn | more</code></p><p>ex：ps -mp 21659 -o THREAD,tid,time （shift+H）</p><p>ps：截图中pid写成24275原因是由于中途重启过一次程序，原PID：21659 变更成 PID：24275，实则都是同一个Java程序</p><p>其中TID：24737、24742、24745，耗时较长占用CPU率较高</p><p><img src="/2020/11/28/system-optimize/1-1-3.png" alt=""></p><h3 id="3-将线程号转为系统可识别的16进制"><a href="#3-将线程号转为系统可识别的16进制" class="headerlink" title="3.将线程号转为系统可识别的16进制"></a>3.将线程号转为系统可识别的16进制</h3><p>命令：<code>printf "%x\n" tid</code></p><p><img src="/2020/11/28/system-optimize/1-1-4.png" alt=""></p><h3 id="4-打印线程的堆栈信息，分析原因"><a href="#4-打印线程的堆栈信息，分析原因" class="headerlink" title="4.打印线程的堆栈信息，分析原因"></a>4.打印线程的堆栈信息，分析原因</h3><p>命令： <code>jstack PID | grep [16进制TID] -A 30</code></p><p>ex：查看线程24737的堆栈信息， jstack 24275 | grep 60a1 -A 30</p><h3 id="5-如果嫌以上操作麻烦，也可直接使用-jstack-PID，打印出所有堆栈，进行查看。"><a href="#5-如果嫌以上操作麻烦，也可直接使用-jstack-PID，打印出所有堆栈，进行查看。" class="headerlink" title="5.如果嫌以上操作麻烦，也可直接使用  jstack PID，打印出所有堆栈，进行查看。"></a>5.如果嫌以上操作麻烦，也可直接使用  jstack PID，打印出所有堆栈，进行查看。</h3><h2 id="二、辅助神器Arthas程序监控"><a href="#二、辅助神器Arthas程序监控" class="headerlink" title="二、辅助神器Arthas程序监控"></a>二、辅助神器Arthas程序监控</h2><p>本次不在说明，后出专题讲解，附上官方文档：</p><p><a href="https://arthas.aliyun.com/doc/" target="_blank" rel="noopener">Arthas传送门</a></p><h2 id="三、辅助Druid-SQL监控"><a href="#三、辅助Druid-SQL监控" class="headerlink" title="三、辅助Druid SQL监控"></a>三、辅助Druid SQL监控</h2><p>本次也不在说明，后出专题讲解，附一张图</p><p><img src="/2020/11/28/system-optimize/1-1-5.png" alt=""></p><h1 id="最终问题定位在"><a href="#最终问题定位在" class="headerlink" title="最终问题定位在"></a>最终问题定位在</h1><p><strong>堆内存占满，新创建对象时无法分配足够的内存，引起频繁GC</strong></p><p>1.程序频繁请求RPC接口得到的响应慢，耗时过大；<br>    解决方案：由于获取的数据实时性要求不高，改为缓存处理，避免实时请求。</p><p>2.客户端频繁请求某个接口，且接口中的sql效率非常低,导致了sql连接长时间被占用。<br>    解决方案：由于该接口历史遗留，且和对应的调用客户端同事确认该接口现今已用处不大，因此注释掉了该接口。</p><p>3.频繁收到回调，随开启了多线程处理但由于有线程锁，使得其他线程被block，实则依然是个单线程处理，消费速度赶不上生产速度，线程积压。<br>    解决方案：确保安全的情况下，关闭了线程锁。</p><p>4.代码逻辑不合理;<br>    解决方案：重新调整代码逻辑</p><p>5.对数据库操作过于频繁;<br>    解决方案：调整逻辑，优化sql（调整sql，加索引，避免全表扫描），尽量少操作数据库，多使用缓存对数据进行操作</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>经过此次排查，虽最终问题得以缓解，但深知系统内依然存在很多其他性能问题，暴露出对JVM知识的欠缺，以及Java代码、SQL功底需要持续加强。保证程序系统的稳定，健壮，高效。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 后端 </tag>
            
            <tag> 系统优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Installs</title>
      <link href="/2020/10/23/docker-installs/"/>
      <url>/2020/10/23/docker-installs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>docker 安装软件工具<br><a id="more"></a></p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><a href="http://tryto.top/2019/10/11/docker/" target="_blank" rel="noopener">docker准备工作传送门</a></p><h2 id="命令快捷"><a href="#命令快捷" class="headerlink" title="命令快捷"></a>命令快捷</h2><ul><li>查看镜像<pre><code># docker images | grep ?</code></pre></li><li>启动容器<pre><code># docker run -id --name=matrix_mysql -p 13306:3306 -e MYSQL_ROOT_PASSWORD=abc123 mysql</code></pre></li><li>进入容器<pre><code># docker exec -it 容器名/容器Id  /bin/bash</code></pre></li></ul><h2 id="安装Nexus3"><a href="#安装Nexus3" class="headerlink" title="安装Nexus3"></a>安装Nexus3</h2><h3 id="查询镜像"><a href="#查询镜像" class="headerlink" title="查询镜像"></a>查询镜像</h3><pre><code># docker search nexus</code></pre><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><pre><code># docker pull sonatype/nexus3</code></pre><h3 id="配置本地保存数据的路径"><a href="#配置本地保存数据的路径" class="headerlink" title="配置本地保存数据的路径"></a>配置本地保存数据的路径</h3><p>  路径可自定义,我放在/docker/nexus/nexus-data下。</p><p>  注意：在生成目录的时候，因为nexus的读写默认是200,docker run的时候会报找不到路径的错误</p><p><a href="https://www.cnblogs.com/badaoliumangqizhi/p/11565113.html" target="_blank" rel="noopener">可能遇到的问题:找不到路径错误</a></p><h3 id="修改目录权限"><a href="#修改目录权限" class="headerlink" title="修改目录权限"></a>修改目录权限</h3><pre><code># chmod 777 docker# chmod 777 nexus# chmod 777 nexus-data</code></pre><h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><pre><code># docker run -d -p 8081:8081 -p 8082:8082 -p 8083:8083 --name matrix_nexus3 -v /usr/etc/docker/nexus/nexus-data:/nexus-data sonatype/nexus3</code></pre><ul><li>8082<br>  客户端页面的对外端口;</li><li>8082<br>  准备建立docker hosted 私有库使用。hosted可以上传下载我建立的images;</li><li>8083<br>  准备建立docker proxy 代理库使用。 proxy可以镜像远程公共仓库，比如：docke官方仓库、aliyun等等;</li><li>daemon.json<br>  在/etc/docker/daemon.json这个文件夹中配置;</li></ul><p>daemon.json文件中的配置说明：</p><pre><code>{    "registry-mirrors": ["https://1v50e4uy.mirror.aliyuncs.com"],    ----文件加速地址，下载国外的镜像，通过它进行加速    "insecure-registries":["192.168.111.112:8083"]      ---配置本地的镜像库地址,每次拖取镜像,如果8083上没有，先从远程库下载，下载到8083，再下载到本地库，下次再下载的时候，就从8083上下载了。 }</code></pre><h3 id="登录-Nexus3"><a href="#登录-Nexus3" class="headerlink" title="登录 Nexus3"></a>登录 Nexus3</h3><p>1.登录链接：<a href="http://192.168.111.112:8081/" target="_blank" rel="noopener">http://192.168.111.112:8081/</a></p><p>2.默认用户名:admin  默认密码不再是admin123,所以需要去容器内查看</p><p>3.查看默认密码：进入容器内查看</p><pre><code># docker exec -it matrix_nexus3 /bin/bash# cd nexus-data/# vi admin.password  ---复制出密码,去网页登录</code></pre><p>4.登录完成后,默认提示修改新密码,新密码改完后,admin.password将会消失,所以要保管好密码</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 运维 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker,轻量级的虚拟化技术</title>
      <link href="/2020/10/23/docker/"/>
      <url>/2020/10/23/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><blockquote><p>一个利用了lxc的技术的一个虚拟化引擎。<br><a id="more"></a></p></blockquote><h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><h2 id="什么是虚拟化"><a href="#什么是虚拟化" class="headerlink" title="什么是虚拟化"></a>什么是虚拟化</h2><p>​    在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。</p><p>​    在实际的生产环境中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件   对资源充分利用</p><p>​    虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。</p><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><p>​    Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 <a href="https://github.com/docker/docker" target="_blank" rel="noopener">GitHub</a> 上进行维护。</p><p>​    <img src="/2020/10/23/docker/1-3.png" alt=""></p><p>​    Docker 自开源后受到广泛的关注和讨论，以至于 dotCloud 公司后来都改名为 Docker Inc。Redhat 已经在其 RHEL6.5 中集中支持 Docker；Google 也在其 PaaS 产品中广泛应用。</p><p>​    Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。</p><p>​    在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p><p>为什么选择Docker?</p><p>（1）上手快。</p><p>​    用户只需要几分钟，就可以把自己的程序“Docker化”。Docker依赖于“写时复制”（copy-on-write）模型，使修改应用程序也非常迅速，可以说达到“随心所致，代码即改”的境界。    </p><pre><code>     随后，就可以创建容器来运行应用程序了。大多数Docker容器只需要不到1秒中即可启动。由于去除了管理程序的开销，Docker容器拥有很高的性能，同时同一台宿主机中也可以运行更多的容器，使用户尽可能的充分利用系统资源。</code></pre><p>（2）职责的逻辑分类</p><p>​    使用Docker，开发人员只需要关心容器中运行的应用程序，而运维人员只需要关心如何管理容器。Docker设计的目的就是要加强开发人员写代码的开发环境与应用程序要部署的生产环境一致性。从而降低那种“开发时一切正常，肯定是运维的问题（测试环境都是正常的，上线后出了问题就归结为肯定是运维的问题）”</p><p>（3）快速高效的开发生命周期</p><p>​    Docker的目标之一就是缩短代码从开发、测试到部署、上线运行的周期，让你的应用程序具备可移植性，易于构建，并易于协作。（通俗一点说，Docker就像一个盒子，里面可以装很多物件，如果需要这些物件的可以直接将该大盒子拿走，而不需要从该盒子中一件件的取。）</p><p>（4）鼓励使用面向服务的架构</p><p>​    Docker还鼓励面向服务的体系结构和微服务架构。Docker推荐单个容器只运行一个应用程序或进程，这样就形成了一个分布式的应用程序模型，在这种模型下，应用程序或者服务都可以表示为一系列内部互联的容器，从而使分布式部署应用程序，扩展或调试应用程序都变得非常简单，同时也提高了程序的内省性。（当然，可以在一个容器中运行多个应用程序）</p><h2 id="1-3-容器与虚拟机比较"><a href="#1-3-容器与虚拟机比较" class="headerlink" title="1.3 容器与虚拟机比较"></a>1.3 容器与虚拟机比较</h2><p>​    下面的图片比较了 Docker 和传统虚拟化方式的不同之处，可见容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件层面实现。</p><p><img src="/2020/10/23/docker/1-1.png" alt=""></p><p>与传统的虚拟机相比，Docker优势体现为启动速度快、占用体积小。</p><h2 id="Docker-组件"><a href="#Docker-组件" class="headerlink" title="Docker 组件"></a>Docker 组件</h2><h3 id="Docker服务器与客户端"><a href="#Docker服务器与客户端" class="headerlink" title="Docker服务器与客户端"></a>Docker服务器与客户端</h3><p>​    Docker是一个客户端-服务器（C/S）架构程序。Docker客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具Docker以及一整套RESTful API。你可以在同一台宿主机上运行Docker守护进程和客户端，也可以从本地的Docker客户端连接到运行在另一台宿主机上的远程Docker守护进程。</p><p><img src="/2020/10/23/docker/1-2.png" alt=""></p><h3 id="Docker镜像与容器"><a href="#Docker镜像与容器" class="headerlink" title="Docker镜像与容器"></a>Docker镜像与容器</h3><p>​    镜像是构建Docker的基石。用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的“构建”部分。镜像是基于联合文件系统的一种层式结构，由一系列指令一步一步构建出来。例如：</p><p>添加一个文件；</p><p>执行一个命令；</p><p>打开一个窗口。</p><p>也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。</p><p>​    Docker可以帮助你构建和部署容器，你只需要把自己的应用程序或者服务打包放进容器即可。容器是基于镜像启动起来的，容器中可以运行一个或多个进程。我们可以认为，镜像是Docker生命周期中的构建或者打包阶段，而容器则是启动或者执行阶段。  容器基于镜像启动，一旦容器启动完成后，我们就可以登录到容器中安装自己需要的软件或者服务。</p><p>所以Docker容器就是：</p><p>​    一个镜像格式；</p><p>​    一些列标准操作；</p><p>​    一个执行环境。</p><p>​    Docker借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Docker将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而Docker运输软件。</p><pre><code>     和集装箱一样，Docker在执行上述操作时，并不关心容器中到底装了什么，它不管是web服务器，还是数据库，或者是应用程序服务器什么的。所有的容器都按照相同的方式将内容“装载”进去。     Docker也不关心你要把容器运到何方：我们可以在自己的笔记本中构建容器，上传到Registry，然后下载到一个物理的或者虚拟的服务器来测试，在把容器部署到具体的主机中。像标准集装箱一样，Docker容器方便替换，可以叠加，易于分发，并且尽量通用。</code></pre><h3 id="Registry（注册中心）"><a href="#Registry（注册中心）" class="headerlink" title="Registry（注册中心）"></a>Registry（注册中心）</h3><p>​    Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营公共的Registry叫做Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像（说明：在Docker Hub下载镜像巨慢，可以自己构建私有的Registry）。</p><p>​    <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><h1 id="Docker安装与启动"><a href="#Docker安装与启动" class="headerlink" title="Docker安装与启动"></a>Docker安装与启动</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>​    Docker官方建议在Ubuntu中安装，因为Docker是基于Ubuntu发布的，而且一般Docker出现的问题Ubuntu是最先更新或者打补丁的。在很多版本的CentOS中是不支持更新最新的一些补丁包的。</p><p>​    由于我们学习的环境都使用的是CentOS，因此这里我们将Docker安装到CentOS上。注意：这里建议安装在CentOS7.x以上的版本，在CentOS6.x的版本中，安装前需要安装其他很多的环境而且Docker很多补丁不支持更新。</p><p>​    请直接挂载课程配套的Centos7.x镜像    </p><p>（1）yum 包更新到最新</p><pre><code>sudo yum update</code></pre><p>（2）安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><pre><code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</code></pre><p>（3）设置yum源为阿里云</p><pre><code>sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></pre><p>（4）安装docker</p><pre><code>sudo yum install docker-ce</code></pre><p>（5）安装后查看docker版本</p><pre><code>docker -v</code></pre><h2 id="设置ustc的镜像"><a href="#设置ustc的镜像" class="headerlink" title="设置ustc的镜像"></a>设置ustc的镜像</h2><p>ustc是老牌的linux镜像服务提供者了，还在遥远的ubuntu 5.04版本的时候就在用。ustc的docker镜像加速器速度很快。ustc docker mirror的优势之一就是不需要注册，是真正的公共服务。</p><p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker" target="_blank" rel="noopener">https://lug.ustc.edu.cn/wiki/mirrors/help/docker</a></p><p>编辑该文件：</p><pre><code>vi /etc/docker/daemon.json  </code></pre><p>在该文件中输入如下内容：</p><pre><code>{"registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"]}</code></pre><h2 id="Docker的启动与停止"><a href="#Docker的启动与停止" class="headerlink" title="Docker的启动与停止"></a>Docker的启动与停止</h2><p><strong>systemctl</strong>命令是系统服务管理器指令</p><p>启动docker：</p><pre><code>systemctl start docker</code></pre><p>停止docker：</p><pre><code>systemctl stop docker</code></pre><p>重启docker：</p><pre><code>systemctl restart docker</code></pre><p>查看docker状态：</p><pre><code>systemctl status docker</code></pre><p>开机启动：</p><pre><code>systemctl enable docker</code></pre><p>查看docker概要信息</p><pre><code>docker info</code></pre><p>查看docker帮助文档</p><pre><code>docker --help</code></pre><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h2><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><pre><code>docker images</code></pre><p>REPOSITORY：镜像名称</p><p>TAG：镜像标签</p><p>IMAGE ID：镜像ID</p><p>CREATED：镜像的创建日期（不是获取该镜像的日期）</p><p>SIZE：镜像大小</p><p>这些镜像都是存储在Docker宿主机的/var/lib/docker目录下</p><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><p>如果你需要从网络中查找需要的镜像，可以通过以下命令搜索</p><pre><code>docker search 镜像名称</code></pre><p>NAME：仓库名称</p><p>DESCRIPTION：镜像描述</p><p>STARS：用户评价，反应一个镜像的受欢迎程度</p><p>OFFICIAL：是否官方</p><p>AUTOMATED：自动构建，表示该镜像由Docker Hub自动构建流程创建的</p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>拉取镜像就是从中央仓库中下载镜像到本地</p><pre><code>docker pull 镜像名称</code></pre><p>例如，我要下载centos7镜像</p><pre><code>docker pull centos:7</code></pre><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>按镜像ID删除镜像</p><pre><code>docker rmi 镜像ID</code></pre><p>删除所有镜像</p><pre><code>docker rmi `docker images -q`</code></pre><h2 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h2><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><p>查看正在运行的容器</p><pre><code>docker ps</code></pre><p>查看所有容器</p><pre><code>docker ps –a</code></pre><p>查看最后一次运行的容器</p><pre><code>docker ps –l</code></pre><p>查看停止的容器</p><pre><code>docker ps -f status=exited</code></pre><h3 id="创建与启动容器"><a href="#创建与启动容器" class="headerlink" title="创建与启动容器"></a>创建与启动容器</h3><p>创建容器常用的参数说明：</p><p>创建容器命令：docker run</p><p> -i：表示运行容器</p><p> -t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</p><p> –name :为创建的容器命名。</p><p> -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</p><p> -d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</p><p> -p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</p><p>（1）交互式方式创建容器</p><pre><code>docker run -it --name=容器名称 镜像名称:标签 /bin/bash</code></pre><p>这时我们通过ps命令查看，发现可以看到启动的容器，状态为启动状态  </p><p>退出当前容器</p><pre><code>exit</code></pre><p>（2）守护式方式创建容器：</p><pre><code>docker run -di --name=容器名称 镜像名称:标签</code></pre><p>登录守护式容器方式：</p><pre><code>docker exec -it 容器名称 (或者容器ID)  /bin/bash</code></pre><h3 id="停止与启动容器"><a href="#停止与启动容器" class="headerlink" title="停止与启动容器"></a>停止与启动容器</h3><p>停止容器：</p><pre><code>docker stop 容器名称（或者容器ID）</code></pre><p>启动容器：</p><pre><code>docker start 容器名称（或者容器ID）</code></pre><h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><p>如果我们需要将文件拷贝到容器内可以使用cp命令</p><pre><code>docker cp 需要拷贝的文件或目录 容器名称:容器目录</code></pre><p>也可以将文件从容器内拷贝出来</p><pre><code>docker cp 容器名称:容器目录 需要拷贝的文件或目录</code></pre><h3 id="目录挂载"><a href="#目录挂载" class="headerlink" title="目录挂载"></a>目录挂载</h3><p>我们可以在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器。<br>创建容器 添加-v参数 后边为   宿主机目录:容器目录，例如：</p><pre><code>docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos3 centos:7</code></pre><p>如果你共享的是多级的目录，可能会出现权限不足的提示。</p><p>这是因为CentOS7中的安全模块selinux把权限禁掉了，我们需要添加参数  –privileged=true  来解决挂载的目录没有权限的问题</p><h3 id="查看容器IP地址"><a href="#查看容器IP地址" class="headerlink" title="查看容器IP地址"></a>查看容器IP地址</h3><p>我们可以通过以下命令查看容器运行的各种数据</p><pre><code>docker inspect 容器名称（容器ID） </code></pre><p>也可以直接执行下面的命令直接输出IP地址</p><pre><code>docker inspect --format='{{.NetworkSettings.IPAddress}}' 容器名称（容器ID）</code></pre><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><p>删除指定的容器：</p><pre><code>docker rm 容器名称（容器ID）</code></pre><h1 id="应用部署"><a href="#应用部署" class="headerlink" title="应用部署"></a>应用部署</h1><h2 id="MySQL部署"><a href="#MySQL部署" class="headerlink" title="MySQL部署"></a>MySQL部署</h2><p>（1）拉取mysql镜像</p><pre><code>docker pull centos/mysql-57-centos7</code></pre><p>（2）创建容器</p><pre><code>docker run -di --name=tensquare_mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</code></pre><p>-p 代表端口映射，格式为  宿主机映射端口:容器运行端口</p><p>-e 代表添加环境变量  MYSQL_ROOT_PASSWORD  是root用户的登陆密码</p><p>（3）远程登录mysql</p><p>连接宿主机的IP  ,指定端口为33306 </p><h2 id="tomcat部署"><a href="#tomcat部署" class="headerlink" title="tomcat部署"></a>tomcat部署</h2><p>（1）拉取镜像</p><pre><code>docker pull tomcat:7-jre7</code></pre><p>（2）创建容器</p><p>创建容器  -p表示地址映射</p><pre><code>docker run -di --name=mytomcat -p 9000:8080 -v /usr/local/webapps:/usr/local/tomcat/webapps tomcat:7-jre7</code></pre><h2 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h2><p>（1）拉取镜像    </p><pre><code>docker pull nginx</code></pre><p>（2）创建Nginx容器</p><pre><code>docker run -di --name=mynginx -p 80:80 nginx</code></pre><h2 id="Redis部署"><a href="#Redis部署" class="headerlink" title="Redis部署"></a>Redis部署</h2><p>（1）拉取镜像</p><pre><code>docker pull redis</code></pre><p>（2）创建容器</p><pre><code>docker run -di --name=myredis -p 6379:6379 redis</code></pre><h1 id="迁移与备份"><a href="#迁移与备份" class="headerlink" title="迁移与备份"></a>迁移与备份</h1><h2 id="容器保存为镜像"><a href="#容器保存为镜像" class="headerlink" title="容器保存为镜像"></a>容器保存为镜像</h2><p>我们可以通过以下命令将容器保存为镜像</p><pre><code>docker commit mynginx mynginx_i</code></pre><h2 id="镜像备份"><a href="#镜像备份" class="headerlink" title="镜像备份"></a>镜像备份</h2><p>我们可以通过以下命令将镜像保存为tar 文件</p><pre><code>docker  save -o mynginx.tar mynginx_i</code></pre><h2 id="镜像恢复与迁移"><a href="#镜像恢复与迁移" class="headerlink" title="镜像恢复与迁移"></a>镜像恢复与迁移</h2><p>首先我们先删除掉mynginx_img镜像  然后执行此命令进行恢复</p><pre><code>docker load -i mynginx.tar</code></pre><p>-i 输入的文件</p><p>执行后再次查看镜像，可以看到镜像已经恢复</p><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><blockquote><p><a href="https://www.cnblogs.com/panwenbin-logs/p/8007348.html" target="_blank" rel="noopener">Dockerfile文件详解</a></p></blockquote><h2 id="什么是Dockerfile"><a href="#什么是Dockerfile" class="headerlink" title="什么是Dockerfile"></a>什么是Dockerfile</h2><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。</p><ul><li>对于开发人员：可以为开发团队提供一个完全一致的开发环境； </li><li>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作了； </li><li>对于运维人员：在部署时，可以实现应用的无缝移植。</li></ul><h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>FROM image_name:tag</td><td>定义了使用哪个基础镜像启动构建流程</td></tr><tr><td>MAINTAINER user_name</td><td>声明镜像的创建者</td></tr><tr><td>ENV key value</td><td>设置环境变量 (可以写多条)</td></tr><tr><td>RUN command</td><td>是Dockerfile的核心部分(可以写多条)</td></tr><tr><td>ADD source_dir/file dest_dir/file</td><td>将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压</td></tr><tr><td>COPY source_dir/file dest_dir/file</td><td>和ADD相似，但是如果有压缩文件并不能解压</td></tr><tr><td>WORKDIR path_dir</td><td>设置工作目录</td></tr></tbody></table><h2 id="使用脚本创建镜像"><a href="#使用脚本创建镜像" class="headerlink" title="使用脚本创建镜像"></a>使用脚本创建镜像</h2><p>步骤：</p><p>（1）创建目录</p><pre><code>mkdir –p /usr/local/dockerjdk8</code></pre><p>（2）下载jdk-8u171-linux-x64.tar.gz并上传到服务器（虚拟机）中的/usr/local/dockerjdk8目录</p><p>（3）创建文件Dockerfile  <code>vi Dockerfile</code></p><pre><code>#依赖镜像名称和IDFROM centos:7#指定镜像创建者信息MAINTAINER ITCAST#切换工作目录WORKDIR /usrRUN mkdir  /usr/local/java#ADD 是相对路径jar,把java添加到容器中ADD jdk-8u171-linux-x64.tar.gz /usr/local/java/#配置java环境变量ENV JAVA_HOME /usr/local/java/jdk1.8.0_171ENV JRE_HOME $JAVA_HOME/jreENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATHENV PATH $JAVA_HOME/bin:$PATH</code></pre><p>（4）执行命令构建镜像</p><pre><code>docker build -t='jdk1.8' .</code></pre><p>注意后边的空格和点，不要省略</p><p>（5）查看镜像是否建立完成</p><pre><code>docker images</code></pre><h1 id="Docker私有仓库"><a href="#Docker私有仓库" class="headerlink" title="Docker私有仓库"></a>Docker私有仓库</h1><h2 id="私有仓库搭建与配置"><a href="#私有仓库搭建与配置" class="headerlink" title="私有仓库搭建与配置"></a>私有仓库搭建与配置</h2><p>（1）拉取私有仓库镜像（此步省略）</p><pre><code>docker pull registry</code></pre><p>（2）启动私有仓库容器</p><pre><code>docker run -di --name=registry -p 5000:5000 registry</code></pre><p>（3）打开浏览器 输入地址<a href="http://192.168.184.141:5000/v2/_catalog看到`{&quot;repositories&quot;:[]}`" target="_blank" rel="noopener">http://192.168.184.141:5000/v2/_catalog看到`{"repositories":[]}`</a> 表示私有仓库搭建成功并且内容为空</p><p>（4）修改daemon.json</p><pre><code>vi /etc/docker/daemon.json</code></pre><p>添加以下内容，保存退出。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"insecure-registries"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"192.168.184.141:5000"</span><span class="token punctuation">]</span><span class="token punctuation">}</span> </code></pre><p>此步用于让 docker信任私有仓库地址</p><p>（5）重启docker 服务</p><pre><code>systemctl restart docker</code></pre><h2 id="镜像上传至私有仓库"><a href="#镜像上传至私有仓库" class="headerlink" title="镜像上传至私有仓库"></a>镜像上传至私有仓库</h2><p>（1）标记此镜像为私有仓库的镜像</p><pre><code>docker tag jdk1.8 192.168.184.141:5000/jdk1.8</code></pre><p>（2）再次启动私服容器</p><pre><code>docker start registry</code></pre><p>（3）上传标记的镜像</p><pre><code>docker push 192.168.184.141:5000/jdk1.8</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 运维 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo操作手册</title>
      <link href="/2020/10/23/hexo-manual/"/>
      <url>/2020/10/23/hexo-manual/</url>
      
        <content type="html"><![CDATA[<blockquote><p>A fast, simple &amp; powerful blog framework</p></blockquote><a id="more"></a><h3 id="官方网站："><a href="#官方网站：" class="headerlink" title="官方网站："></a>官方网站：</h3><p><a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration</a></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)</p><pre><code>$ hexo clean</code></pre><p>生成静态文件</p><pre><code>$ hexo generate    -d, --deploy    文件生成后立即部署网站    -w, --watch    监视文件变动</code></pre><p>部署</p><pre><code>hexo d</code></pre><p>启动服务器。默认情况下,访问网址为: <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><pre><code>$ hexo server    -p, --port    重设端口    -s, --static    只使用静态文件    -l, --log    启动日记记录，使用覆盖记录格式</code></pre><p>发表草稿</p><pre><code>$ hexo publish [layout] &lt;filename&gt; </code></pre><p>显示草稿</p><pre><code>$ hexo --draft</code></pre><p>自定义 CWD（Current working directory）</p><pre><code>$ hexo --cwd /path/to/cwd</code></pre><p>创建文档</p><pre><code>hexo new [layout] &lt;title&gt;ex:    hexo new inner demo01    hexo new outer demo01    hexo new feeling demo01draft--&gt;publichexo publish [layout] &lt;title&gt;ex:    hexo new draft demo01    hexo publish inner &lt;title&gt;</code></pre><h3 id="页眉说明"><a href="#页眉说明" class="headerlink" title="页眉说明"></a>页眉说明</h3><pre><code>title: Hexo操作手册 //标题author: 571 //作者series: INNER //所属系列categories: INNER //所属类别comments: true //是否开启评论： true 开启img: /cover/abc.jpg  //封面图top: false //是否置顶 true 是cover: false //是否轮播 true 是tags:  //标签  - inner  - 手册date: 2020-05-14 21:58:38  //创建时间updated: 2020-05-14 21:58:38 //修改时间</code></pre><h3 id="创建文章文件"><a href="#创建文章文件" class="headerlink" title="创建文章文件"></a>创建文章文件</h3><pre><code>创建文件命名格式：小写、中杠隔开单词</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手册 </tag>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Installs</title>
      <link href="/2020/10/23/linux-installs/"/>
      <url>/2020/10/23/linux-installs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Linux 软件工具安装<br><a id="more"></a></p></blockquote><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><h3 id="通过yum方式安装Java"><a href="#通过yum方式安装Java" class="headerlink" title="通过yum方式安装Java"></a>通过yum方式安装Java</h3><h4 id="查看JDK是否已安装"><a href="#查看JDK是否已安装" class="headerlink" title="查看JDK是否已安装"></a>查看JDK是否已安装</h4><pre><code># yum list installed | grep java</code></pre><h4 id="若已经安装了JDK，如何卸载Java环境？"><a href="#若已经安装了JDK，如何卸载Java环境？" class="headerlink" title="若已经安装了JDK，如何卸载Java环境？"></a>若已经安装了JDK，如何卸载Java环境？</h4><ul><li>卸载JDK相关文件：<pre><code># yum -y remove java-1.7.0-openjdk*</code></pre>卸载tzdata-java：<pre><code># yum -y remove tzdata-java.noarch</code></pre>注：“*”表示卸载掉java 1.7.0的所有openjdk相关文件<h4 id="查看yum库中的Java安装包"><a href="#查看yum库中的Java安装包" class="headerlink" title="查看yum库中的Java安装包"></a>查看yum库中的Java安装包</h4><pre><code># yum -y list java*</code></pre><h4 id="安装Java安装包"><a href="#安装Java安装包" class="headerlink" title="安装Java安装包"></a>安装Java安装包</h4></li></ul><p>以yum库中java-1.8.0为例：</p><pre><code># yum -y install java-1.8.0-openjdk*</code></pre><p>注：“*”表示将java-1.8.0的所有相关Java程序都安装上</p><h4 id="查看刚刚安装版本"><a href="#查看刚刚安装版本" class="headerlink" title="查看刚刚安装版本"></a>查看刚刚安装版本</h4><pre><code># java -version</code></pre><h4 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h4><p>1.修改配置文件</p><pre><code># vim /etc/profile# export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk# export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar# export PATH=$PATH:$JAVA_HOME/bin</code></pre><p>2.生效修改</p><pre><code># source /etc/profile</code></pre><h3 id="通过压缩包安装Java"><a href="#通过压缩包安装Java" class="headerlink" title="通过压缩包安装Java"></a>通过压缩包安装Java</h3><p>####准备工作：</p><ul><li>jdk-8u11-linux-x64.tar.gz<br>下载地址：<a href="https://pan.baidu.com/s/1smNHABN" target="_blank" rel="noopener">https://pan.baidu.com/s/1smNHABN</a> (ps：也可在官网下载最新jdk:<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a>)</li><li>shell<br>在windows下载完成jdk后，通过shell发送到Linux上</li></ul><h4 id="登录Linux，切换到root用户"><a href="#登录Linux，切换到root用户" class="headerlink" title="登录Linux，切换到root用户"></a>登录Linux，切换到root用户</h4><pre><code># su root ---获取root用户权限，当前工作目录不变(需要root密码)</code></pre><p>或者</p><pre><code># sudo -i ---不需要root密码直接切换成root（需要当前用户密码）</code></pre><h4 id="在usr目录下建立Java安装目录"><a href="#在usr目录下建立Java安装目录" class="headerlink" title="在usr目录下建立Java安装目录"></a>在usr目录下建立Java安装目录</h4><pre><code># cd /usr/local/src/# mkdir java</code></pre><h4 id="解压jdk到当前目录-得到文件夹-jdk1-8-0-11"><a href="#解压jdk到当前目录-得到文件夹-jdk1-8-0-11" class="headerlink" title="解压jdk到当前目录,得到文件夹 jdk1.8.0_11"></a>解压jdk到当前目录,得到文件夹 jdk1.8.0_11</h4><pre><code># tar -zxvf jdk-8u11-linux-x64.tar.gz</code></pre><h4 id="解压完建立一个链接以节省目录长度"><a href="#解压完建立一个链接以节省目录长度" class="headerlink" title="解压完建立一个链接以节省目录长度"></a>解压完建立一个链接以节省目录长度</h4><pre><code># ln -s /usr/local/src/java/jdk1.8.0_11/ /usr/local/src/jdk</code></pre><h4 id="编辑配置文件，配置环境变量"><a href="#编辑配置文件，配置环境变量" class="headerlink" title="编辑配置文件，配置环境变量"></a>编辑配置文件，配置环境变量</h4><pre><code># vim /etc/profile</code></pre><p>在文末添加如下内容：</p><pre><code># JAVA_HOME=/usr/local/src/jdk# CLASSPATH=$JAVA_HOME/lib/# PATH=$PATH:$JAVA_HOME/bin# export PATH JAVA_HOME CLASSPATH</code></pre><h4 id="重启机器或执行命令"><a href="#重启机器或执行命令" class="headerlink" title="重启机器或执行命令"></a>重启机器或执行命令</h4><pre><code># sudo shutdown -r now</code></pre><h4 id="查看刚刚安装版本-1"><a href="#查看刚刚安装版本-1" class="headerlink" title="查看刚刚安装版本"></a>查看刚刚安装版本</h4><pre><code># java -version</code></pre><h2 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h2><h3 id="在线下载安装"><a href="#在线下载安装" class="headerlink" title="在线下载安装"></a>在线下载安装</h3><h4 id="安装wget命令"><a href="#安装wget命令" class="headerlink" title="安装wget命令"></a>安装wget命令</h4><pre><code># yum -y install wget</code></pre><h4 id="下载maven安装包"><a href="#下载maven安装包" class="headerlink" title="下载maven安装包"></a>下载maven安装包</h4><pre><code># cd /usr/local/src/# wget http://mirrors.cnnic.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz</code></pre><h4 id="解压maven安装包"><a href="#解压maven安装包" class="headerlink" title="解压maven安装包"></a>解压maven安装包</h4><pre><code># tar -zxvf apache-maven-3.5.4-bin.tar.gz</code></pre><h4 id="配置maven"><a href="#配置maven" class="headerlink" title="配置maven"></a>配置maven</h4><pre><code># vi /etc/profile</code></pre><p>在配置文件配置</p><pre><code># export MAVEN_HOME=/usr/local/src/apache-maven-3.5.4# export PATH=$MAVEN_HOME/bin:$PATH</code></pre><p>配置文件生效</p><pre><code># source /etc/profile</code></pre><h4 id="查看maven"><a href="#查看maven" class="headerlink" title="查看maven"></a>查看maven</h4><pre><code># mvn -version</code></pre><h3 id="安装包安装"><a href="#安装包安装" class="headerlink" title="安装包安装"></a>安装包安装</h3><p><img src="/2020/10/23/linux-installs/404.jpg" alt=""></p><p><a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">Maven下载地址</a></p><h2 id="安装Nexus3"><a href="#安装Nexus3" class="headerlink" title="安装Nexus3"></a>安装Nexus3</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>安装Java</li><li>安装Maven</li></ul><h3 id="在线下载安装-1"><a href="#在线下载安装-1" class="headerlink" title="在线下载安装"></a>在线下载安装</h3><p><a href="https://my.oschina.net/u/2963821/blog/1806035" target="_blank" rel="noopener">在线下载安装传送门</a></p><h3 id="安装包安装-1"><a href="#安装包安装-1" class="headerlink" title="安装包安装"></a>安装包安装</h3><p><img src="/2020/10/23/linux-installs/404.jpg" alt=""></p><p><a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="noopener">Nexus下载地址1</a><br><a href="https://help.sonatype.com/repomanager3/download/download-archives---repository-manager-3" target="_blank" rel="noopener">Nexus下载地址2</a></p><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><p>源码下载不动,无耐想到此法,推荐 <a href="http://tryto.top/2019/10/29/docker-installs/" target="_blank" rel="noopener">Docker安装传送门</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 后端 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
